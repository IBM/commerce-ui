{
  "swagger": "2.0",
  "info": {
    "title": "Commerce API",
    "version": "1.0.0"
  },
  "paths": {
    "/rest/admin/v2/online-stores": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "x-entity-path": "dataArea/get/recordSetStartNumber"
          },
          {
            "description": "The maximum number of records to return.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "x-entity-path": "dataArea/get/maxItems"
          },
          {
            "description": "The usage.",
            "in": "query",
            "name": "usage",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of online stores.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer"
                },
                "items": {
                  "description": "The data objects or resources that that match the query parameters.",
                  "items": {
                    "description": "An online store.",
                    "properties": {
                      "catalogOverrideEnabled": {
                        "description": "The catalog override enabled value configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/isCatalogOverrideEnabled"
                      },
                      "externalContentEnablementMode": {
                        "description": "The external content enablement value configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/externalContentEnablementMode"
                      },
                      "externalContentHostName": {
                        "description": "The external content host name configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.hostName"
                      },
                      "externalContentPickerUrl": {
                        "description": "The external content picker URL configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.pickerURL"
                      },
                      "externalContentTenantId": {
                        "description": "The external content tenant ID configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.tenant-id"
                      },
                      "externalContentUiContextRoot": {
                        "description": "The external content UI context root configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.UIContextRoot"
                      },
                      "id": {
                        "description": "The unique numeric ID for identifying the online store.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "onlineStoreIdentifier/uniqueID"
                      },
                      "identifier": {
                        "description": "The identifier or name for identifying the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "onlineStoreIdentifier/externalIdentifier/nameIdentifier"
                      },
                      "ownerId": {
                        "description": "The unique numeric ID of the organization that owns the online store.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "onlineStoreIdentifier/externalIdentifier/ownerID"
                      },
                      "state": {
                        "description": "The state of the online store. Valid values are 'open' and 'closed'.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "state"
                      },
                      "type": {
                        "description": "The online store type.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "storeType"
                      },
                      "unregisterMarketingEvent": {
                        "description": "The unregister marketing event configuration value for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/unregisterMarketingEvent"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/onlineStore"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStores",
        "summary": "Get a collection of online stores.",
        "x-expression-template": "{_wcf.ap='IBM_Admin_All';_wcf.usage='{usage}'}/OnlineStore",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      }
    },
    "/rest/admin/v2/online-stores/by-identifier": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "x-entity-path": "dataArea/get/recordSetStartNumber"
          },
          {
            "description": "The maximum number of records to return.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "x-entity-path": "dataArea/get/maxItems"
          },
          {
            "description": "The usage.",
            "in": "query",
            "name": "usage",
            "required": true,
            "type": "string"
          },
          {
            "description": "The identifier or name for identifying the online store.",
            "in": "query",
            "name": "identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of online stores.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer"
                },
                "items": {
                  "description": "The data objects or resources that that match the query parameters.",
                  "items": {
                    "description": "An online store.",
                    "properties": {
                      "catalogOverrideEnabled": {
                        "description": "The catalog override enabled value configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/isCatalogOverrideEnabled"
                      },
                      "externalContentEnablementMode": {
                        "description": "The external content enablement value configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/externalContentEnablementMode"
                      },
                      "externalContentHostName": {
                        "description": "The external content host name configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.hostName"
                      },
                      "externalContentPickerUrl": {
                        "description": "The external content picker URL configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.pickerURL"
                      },
                      "externalContentTenantId": {
                        "description": "The external content tenant ID configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.tenant-id"
                      },
                      "externalContentUiContextRoot": {
                        "description": "The external content UI context root configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.UIContextRoot"
                      },
                      "id": {
                        "description": "The unique numeric ID for identifying the online store.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "onlineStoreIdentifier/uniqueID"
                      },
                      "identifier": {
                        "description": "The identifier or name for identifying the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "onlineStoreIdentifier/externalIdentifier/nameIdentifier"
                      },
                      "ownerId": {
                        "description": "The unique numeric ID of the organization that owns the online store.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "onlineStoreIdentifier/externalIdentifier/ownerID"
                      },
                      "state": {
                        "description": "The state of the online store. Valid values are 'open' and 'closed'.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "state"
                      },
                      "type": {
                        "description": "The online store type.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "storeType"
                      },
                      "unregisterMarketingEvent": {
                        "description": "The unregister marketing event configuration value for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/unregisterMarketingEvent"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/onlineStore"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoresByIdentifier",
        "summary": "Gets online stores by identifier.",
        "x-expression-builder-class": "com.ibm.commerce.foundation.internal.client.taglib.util.SearchExpressionBuilder",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_All",
          "template": "{_wcf.usage='$usage$'}/OnlineStore[search(StoreIdentifier/ExternalIdentifier/NameIdentifier='$identifier$')]"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      }
    },
    "/rest/admin/v2/online-stores/by-related-store-id": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "x-entity-path": "dataArea/get/recordSetStartNumber"
          },
          {
            "description": "The maximum number of records to return.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "x-entity-path": "dataArea/get/maxItems"
          },
          {
            "description": "The usage.",
            "in": "query",
            "name": "usage",
            "required": true,
            "type": "string"
          },
          {
            "description": "The unique numeric ID of the related online store. The returned online stores are related to this online store.",
            "format": "int32",
            "in": "query",
            "name": "relatedStoreId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of online stores.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer"
                },
                "items": {
                  "description": "The data objects or resources that that match the query parameters.",
                  "items": {
                    "description": "An online store.",
                    "properties": {
                      "catalogOverrideEnabled": {
                        "description": "The catalog override enabled value configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/isCatalogOverrideEnabled"
                      },
                      "externalContentEnablementMode": {
                        "description": "The external content enablement value configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/externalContentEnablementMode"
                      },
                      "externalContentHostName": {
                        "description": "The external content host name configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.hostName"
                      },
                      "externalContentPickerUrl": {
                        "description": "The external content picker URL configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.pickerURL"
                      },
                      "externalContentTenantId": {
                        "description": "The external content tenant ID configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.tenant-id"
                      },
                      "externalContentUiContextRoot": {
                        "description": "The external content UI context root configured for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/wc.externalContent.UIContextRoot"
                      },
                      "id": {
                        "description": "The unique numeric ID for identifying the online store.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "onlineStoreIdentifier/uniqueID"
                      },
                      "identifier": {
                        "description": "The identifier or name for identifying the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "onlineStoreIdentifier/externalIdentifier/nameIdentifier"
                      },
                      "ownerId": {
                        "description": "The unique numeric ID of the organization that owns the online store.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "onlineStoreIdentifier/externalIdentifier/ownerID"
                      },
                      "state": {
                        "description": "The state of the online store. Valid values are 'open' and 'closed'.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "state"
                      },
                      "type": {
                        "description": "The online store type.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "storeType"
                      },
                      "unregisterMarketingEvent": {
                        "description": "The unregister marketing event configuration value for the online store.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "userData/userDataField/unregisterMarketingEvent"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/onlineStore"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoresByRelatedStoreId",
        "summary": "Get a collection of online stores by related store ID.",
        "x-expression-template": "{_wcf.ap='{accessProfile}';_wcf.usage='{usage}'}/OnlineStore[OnlineStoreRelatedStores[StoreIdentifier[(UniqueID='{relatedStoreId}')]]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_All"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      }
    },
    "/rest/admin/v2/online-stores/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "An online store.",
              "properties": {
                "catalogOverrideEnabled": {
                  "description": "The catalog override enabled value configured for the online store.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "userData/userDataField/isCatalogOverrideEnabled"
                },
                "externalContentEnablementMode": {
                  "description": "The external content enablement value configured for the online store.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "userData/userDataField/externalContentEnablementMode"
                },
                "externalContentHostName": {
                  "description": "The external content host name configured for the online store.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "userData/userDataField/wc.externalContent.hostName"
                },
                "externalContentPickerUrl": {
                  "description": "The external content picker URL configured for the online store.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "userData/userDataField/wc.externalContent.pickerURL"
                },
                "externalContentTenantId": {
                  "description": "The external content tenant ID configured for the online store.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "userData/userDataField/wc.externalContent.tenant-id"
                },
                "externalContentUiContextRoot": {
                  "description": "The external content UI context root configured for the online store.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "userData/userDataField/wc.externalContent.UIContextRoot"
                },
                "id": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "onlineStoreIdentifier/uniqueID"
                },
                "identifier": {
                  "description": "The identifier or name for identifying the online store.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "onlineStoreIdentifier/externalIdentifier/nameIdentifier"
                },
                "ownerId": {
                  "description": "The unique numeric ID of the organization that owns the online store.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "onlineStoreIdentifier/externalIdentifier/ownerID"
                },
                "state": {
                  "description": "The state of the online store. Valid values are 'open' and 'closed'.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "state"
                },
                "type": {
                  "description": "The online store type.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "storeType"
                },
                "unregisterMarketingEvent": {
                  "description": "The unregister marketing event configuration value for the online store.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "userData/userDataField/unregisterMarketingEvent"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreType"
            },
            "x-entity-path": "dataArea/onlineStore[1]"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStore",
        "summary": "Gets an online store by online store ID.",
        "x-expression-template": "{_wcf.ap='{accessProfile}'}/OnlineStore[StoreIdentifier[(UniqueID='{id}')]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_All"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      }
    },
    "/rest/admin/v2/online-stores/{id}/close": {
      "post": {
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "closeOnlineStore",
        "summary": "Closes an online store.",
        "x-action-code": "Close",
        "x-expression-template": "/OnlineStore[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "processOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ProcessOnlineStoreType"
      }
    },
    "/rest/admin/v2/online-stores/{id}/open": {
      "post": {
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "openOnlineStore",
        "summary": "Opens an online store.",
        "x-action-code": "Open",
        "x-expression-template": "/OnlineStore[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "processOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ProcessOnlineStoreType"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/configuration-values": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "An online store's configuration values.",
              "properties": {
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                },
                "values": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "The set of configuration values for the online store.",
                  "readOnly": true,
                  "type": "object",
                  "x-entity-path": "userDataField"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.foundation.common.datatypes.UserDataType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/userData"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoreConfigurationValues",
        "summary": "Gets an online store's configuration values.",
        "x-expression-template": "{_wcf.ap='{accessProfile}'}/OnlineStore[StoreIdentifier[(UniqueID='{onlineStoreId}')]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Details"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/contacts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The data language IDs.",
            "in": "query",
            "name": "dataLanguageIds",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of online store contacts.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer"
                },
                "items": {
                  "description": "The data objects or resources that that match the query parameters.",
                  "items": {
                    "description": "An online store contact.",
                    "properties": {
                      "addressLine1": {
                        "description": "First address line.",
                        "type": "string",
                        "x-entity-path": "address/addressLine[1]"
                      },
                      "addressLine2": {
                        "description": "Second address line.",
                        "type": "string",
                        "x-entity-path": "address/addressLine[2]"
                      },
                      "addressLine3": {
                        "description": "Third address line.",
                        "type": "string",
                        "x-entity-path": "address/addressLine[3]"
                      },
                      "city": {
                        "description": "City.",
                        "type": "string",
                        "x-entity-path": "address/city"
                      },
                      "country": {
                        "description": "Country.",
                        "type": "string",
                        "x-entity-path": "address/country"
                      },
                      "email1": {
                        "description": "Primary e-mail address.",
                        "type": "string",
                        "x-entity-path": "emailAddress1/value"
                      },
                      "email2": {
                        "description": "Secondary e-mail address.",
                        "type": "string",
                        "x-entity-path": "emailAddress2/value"
                      },
                      "fax1": {
                        "description": "Primary fax number.",
                        "type": "string",
                        "x-entity-path": "fax1/value"
                      },
                      "fax2": {
                        "description": "Secondary fax number.",
                        "type": "string",
                        "x-entity-path": "fax2/value"
                      },
                      "id": {
                        "description": "The unique numeric ID for identifying the online store contact.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "contactInfoIdentifier/uniqueID"
                      },
                      "languageId": {
                        "description": "The integer for identifying the language of the online store contact. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                        "format": "int32",
                        "type": "integer",
                        "x-entity-path": "language"
                      },
                      "name": {
                        "description": "The name of the online store contact.",
                        "type": "string",
                        "x-entity-path": "contactName/businessTitle"
                      },
                      "onlineStoreId": {
                        "description": "The unique numeric ID for identifying the online store.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                      },
                      "phone1": {
                        "description": "Primary telephone number.",
                        "type": "string",
                        "x-entity-path": "telephone1/value"
                      },
                      "phone2": {
                        "description": "Secondary telephone number.",
                        "type": "string",
                        "x-entity-path": "telephone2/value"
                      },
                      "postalCode": {
                        "description": "Postal code.",
                        "type": "string",
                        "x-entity-path": "address/postalCode"
                      },
                      "stateOrProvince": {
                        "description": "State or province.",
                        "type": "string",
                        "x-entity-path": "address/stateOrProvinceName"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.foundation.common.datatypes.ContactInfoType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreContactInfo"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoreContacts",
        "summary": "Gets the online store contact information.",
        "x-expression-template": "{_wcf.ap='{accessProfile}';_wcf.dataLanguageIds='{dataLanguageIds}'}/OnlineStore[StoreIdentifier[(UniqueID='{onlineStoreId}')]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_All"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "An online store contact.",
              "properties": {
                "addressLine1": {
                  "description": "First address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[1]"
                },
                "addressLine2": {
                  "description": "Second address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[2]"
                },
                "addressLine3": {
                  "description": "Third address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[3]"
                },
                "city": {
                  "description": "City.",
                  "type": "string",
                  "x-entity-path": "address/city"
                },
                "country": {
                  "description": "Country.",
                  "type": "string",
                  "x-entity-path": "address/country"
                },
                "email1": {
                  "description": "Primary e-mail address.",
                  "type": "string",
                  "x-entity-path": "emailAddress1/value"
                },
                "email2": {
                  "description": "Secondary e-mail address.",
                  "type": "string",
                  "x-entity-path": "emailAddress2/value"
                },
                "fax1": {
                  "description": "Primary fax number.",
                  "type": "string",
                  "x-entity-path": "fax1/value"
                },
                "fax2": {
                  "description": "Secondary fax number.",
                  "type": "string",
                  "x-entity-path": "fax2/value"
                },
                "id": {
                  "description": "The unique numeric ID for identifying the online store contact.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "contactInfoIdentifier/uniqueID"
                },
                "languageId": {
                  "description": "The integer for identifying the language of the online store contact. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "language"
                },
                "name": {
                  "description": "The name of the online store contact.",
                  "type": "string",
                  "x-entity-path": "contactName/businessTitle"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                },
                "phone1": {
                  "description": "Primary telephone number.",
                  "type": "string",
                  "x-entity-path": "telephone1/value"
                },
                "phone2": {
                  "description": "Secondary telephone number.",
                  "type": "string",
                  "x-entity-path": "telephone2/value"
                },
                "postalCode": {
                  "description": "Postal code.",
                  "type": "string",
                  "x-entity-path": "address/postalCode"
                },
                "stateOrProvince": {
                  "description": "State or province.",
                  "type": "string",
                  "x-entity-path": "address/stateOrProvinceName"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.foundation.common.datatypes.ContactInfoType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreContactInfo[1]"
          }
        ],
        "responses": {
          "201": {
            "description": "The operation is successful.",
            "headers": {
              "Location": {
                "description": "The URI of the contact.",
                "type": "string"
              }
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreContactInfo[1]/contactInfoIdentifier/uniqueID"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "createOnlineStoreContact",
        "summary": "Creates an online store contact.",
        "x-action-code": "Add",
        "x-expression-template": "/OnlineStore[1]/OnlineStoreContactInfo[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/contacts/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying online store contact ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreContactInfo[1]/contactInfoIdentifier/uniqueID"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation is successful."
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "deleteOnlineStoreContact",
        "summary": "Deletes an online store contact.",
        "x-action-code": "Delete",
        "x-expression-template": "/OnlineStore[1]/OnlineStoreContactInfo[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying online store contact ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreContactInfo[1]/contactInfoIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "An online store contact.",
              "properties": {
                "addressLine1": {
                  "description": "First address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[1]"
                },
                "addressLine2": {
                  "description": "Second address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[2]"
                },
                "addressLine3": {
                  "description": "Third address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[3]"
                },
                "city": {
                  "description": "City.",
                  "type": "string",
                  "x-entity-path": "address/city"
                },
                "country": {
                  "description": "Country.",
                  "type": "string",
                  "x-entity-path": "address/country"
                },
                "email1": {
                  "description": "Primary e-mail address.",
                  "type": "string",
                  "x-entity-path": "emailAddress1/value"
                },
                "email2": {
                  "description": "Secondary e-mail address.",
                  "type": "string",
                  "x-entity-path": "emailAddress2/value"
                },
                "fax1": {
                  "description": "Primary fax number.",
                  "type": "string",
                  "x-entity-path": "fax1/value"
                },
                "fax2": {
                  "description": "Secondary fax number.",
                  "type": "string",
                  "x-entity-path": "fax2/value"
                },
                "id": {
                  "description": "The unique numeric ID for identifying the online store contact.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "contactInfoIdentifier/uniqueID"
                },
                "languageId": {
                  "description": "The integer for identifying the language of the online store contact. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "language"
                },
                "name": {
                  "description": "The name of the online store contact.",
                  "type": "string",
                  "x-entity-path": "contactName/businessTitle"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                },
                "phone1": {
                  "description": "Primary telephone number.",
                  "type": "string",
                  "x-entity-path": "telephone1/value"
                },
                "phone2": {
                  "description": "Secondary telephone number.",
                  "type": "string",
                  "x-entity-path": "telephone2/value"
                },
                "postalCode": {
                  "description": "Postal code.",
                  "type": "string",
                  "x-entity-path": "address/postalCode"
                },
                "stateOrProvince": {
                  "description": "State or province.",
                  "type": "string",
                  "x-entity-path": "address/stateOrProvinceName"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.foundation.common.datatypes.ContactInfoType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreContactInfo[1]"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "updateOnlineStoreContact",
        "summary": "Updates an online store contact.",
        "x-action-code": "Change",
        "x-expression-template": "/OnlineStore[1]/OnlineStoreContactInfo[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/currencies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "An online store's supported currencies.",
              "properties": {
                "currencies": {
                  "description": "An array containing the currencies that are supported by the online store.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-entity-path": "supportedCurrencies"
                },
                "defaultCurrency": {
                  "description": "The default currency of the online store.",
                  "type": "string",
                  "x-entity-path": "defaultCurrency"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreSupportedCurrenciesType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreSupportedCurrencies[1]"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoreCurrencies",
        "summary": "Get an online store's currencies.",
        "x-expression-template": "{_wcf.ap='{accessProfile}'}/OnlineStore[StoreIdentifier[(UniqueID='{onlineStoreId}')]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_Details"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "An online store's supported currencies.",
              "properties": {
                "currencies": {
                  "description": "An array containing the currencies that are supported by the online store.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-entity-path": "supportedCurrencies"
                },
                "defaultCurrency": {
                  "description": "The default currency of the online store.",
                  "type": "string",
                  "x-entity-path": "defaultCurrency"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreSupportedCurrenciesType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreSupportedCurrencies[1]"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "updateOnlineStoreCurrencies",
        "summary": "Updates an online store's currencies.",
        "x-action-code": "Change",
        "x-expression-template": "/OnlineStore[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/default-catalogs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of online store default catalogs.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer"
                },
                "items": {
                  "description": "The data objects or resources that that match the query parameters.",
                  "items": {
                    "description": "An online store default catalog.",
                    "properties": {
                      "catalogId": {
                        "description": "The unique numeric ID of the catalog associated with the default catalog.",
                        "format": "int64",
                        "type": "integer",
                        "x-entity-path": "catalogIdentifier/uniqueID"
                      },
                      "id": {
                        "description": "The unique numeric ID for identifying the online store default catalog.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "uniqueID"
                      },
                      "onlineStoreId": {
                        "description": "The unique numeric ID for identifying the online store.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                      },
                      "storeId": {
                        "description": "The unique numeric ID of the store associated with the default catalog.",
                        "format": "int32",
                        "type": "integer",
                        "x-entity-path": "storeIdentifier/uniqueID"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/onlineStore[1]/defaultCatalog"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoreDefaultCatalogs",
        "summary": "Gets an online store's default catalogs.",
        "x-expression-template": "{_wcf.ap='{accessProfile}'}/OnlineStore[StoreIdentifier[(UniqueID='{onlineStoreId}')]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_Details"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "An online store default catalog.",
              "properties": {
                "catalogId": {
                  "description": "The unique numeric ID of the catalog associated with the default catalog.",
                  "format": "int64",
                  "type": "integer",
                  "x-entity-path": "catalogIdentifier/uniqueID"
                },
                "id": {
                  "description": "The unique numeric ID for identifying the online store default catalog.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "uniqueID"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                },
                "storeId": {
                  "description": "The unique numeric ID of the store associated with the default catalog.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "storeIdentifier/uniqueID"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/defaultCatalog[1]"
          }
        ],
        "responses": {
          "201": {
            "description": "The operation is successful.",
            "headers": {
              "Location": {
                "description": "The URI of the default catalog.",
                "type": "string"
              }
            },
            "x-entity-path": "dataArea/onlineStore[1]/defaultCatalog[1]/uniqueID"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "createOnlineStoreDefaultCatalog",
        "summary": "Create a default catalog for an online store.",
        "x-action-code": "Add",
        "x-expression-template": "/OnlineStore[1]/DefaultCatalog[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/default-catalogs/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the default catalog.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/defaultCatalog[1]/uniqueID"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation is successful."
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "deleteOnlineStoreDefaultCatalog",
        "summary": "Delete the default catalog of an online store.",
        "x-action-code": "Delete",
        "x-expression-template": "/OnlineStore[1]/DefaultCatalog[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/descriptions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The data language IDs.",
            "in": "query",
            "name": "dataLanguageIds",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of online store descriptions.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer"
                },
                "items": {
                  "description": "The data objects or resources that that match the query parameters.",
                  "items": {
                    "description": "An online store description.",
                    "properties": {
                      "description": {
                        "description": "The online store description.",
                        "type": "string"
                      },
                      "id": {
                        "description": "The language ID of the online store description.",
                        "format": "int32",
                        "type": "integer",
                        "x-entity-path": "language"
                      },
                      "name": {
                        "description": "The name of the online store.",
                        "type": "string",
                        "x-entity-path": "displayName"
                      },
                      "onlineStoreId": {
                        "description": "The unique numeric ID for identifying the online store.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreDescriptionType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreDescription"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoreDescriptions",
        "summary": "Gets the online store descriptions.",
        "x-expression-template": "{_wcf.ap='{accessProfile}';_wcf.dataLanguageIds='{dataLanguageIds}'}/OnlineStore[StoreIdentifier[(UniqueID='{onlineStoreId}')]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_All"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "An online store description.",
              "properties": {
                "description": {
                  "description": "The online store description.",
                  "type": "string"
                },
                "id": {
                  "description": "The language ID of the online store description.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "language"
                },
                "name": {
                  "description": "The name of the online store.",
                  "type": "string",
                  "x-entity-path": "displayName"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreDescriptionType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreDescription[1]"
          }
        ],
        "responses": {
          "201": {
            "description": "The operation is successful.",
            "headers": {
              "Location": {
                "description": "The URI of the online store description.",
                "type": "string"
              }
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreDescription[1]/language"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "createOnlineStoreDescription",
        "summary": "Create a description for an online store.",
        "x-action-code": "Add",
        "x-expression-template": "/OnlineStore[1]/OnlineStoreDescription[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/descriptions/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The integer for identifying the language of the description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "An online store description.",
              "properties": {
                "description": {
                  "description": "The online store description.",
                  "type": "string"
                },
                "id": {
                  "description": "The language ID of the online store description.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "language"
                },
                "name": {
                  "description": "The name of the online store.",
                  "type": "string",
                  "x-entity-path": "displayName"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreDescriptionType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreDescription[1]"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoreDescription",
        "summary": "Gets an online store description.",
        "x-expression-template": "{_wcf.ap='{accessProfile}';_wcf.dataLanguageIds='{id}'}/OnlineStore[StoreIdentifier[(UniqueID='{onlineStoreId}')]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_All"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The integer for identifying the language of the description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreDescription[1]/language"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "An online store description.",
              "properties": {
                "description": {
                  "description": "The online store description.",
                  "type": "string"
                },
                "id": {
                  "description": "The language ID of the online store description.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "language"
                },
                "name": {
                  "description": "The name of the online store.",
                  "type": "string",
                  "x-entity-path": "displayName"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreDescriptionType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreDescription[1]"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "updateOnlineStoreDescription",
        "summary": "Updates an online store description.",
        "x-action-code": "Change",
        "x-expression-template": "/OnlineStore[1]/OnlineStoreDescription[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/languages": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "An online store's supported languages.",
              "properties": {
                "defaultLanguageId": {
                  "description": "The integer for identifying the default language of the online store. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "defaultLanguage"
                },
                "languageIds": {
                  "description": "An array containing the integers for identifying the languages that are supported by the online store. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "items": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "type": "array",
                  "x-entity-path": "supportedLanguages"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreSupportedLanguagesType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreSupportedLanguages[1]"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoreLanguages",
        "summary": "Gets an online store's languages.",
        "x-expression-template": "{_wcf.ap='{accessProfile}'}/OnlineStore[StoreIdentifier[(UniqueID='{onlineStoreId}')]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_All"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "An online store's supported languages.",
              "properties": {
                "defaultLanguageId": {
                  "description": "The integer for identifying the default language of the online store. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "defaultLanguage"
                },
                "languageIds": {
                  "description": "An array containing the integers for identifying the languages that are supported by the online store. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "items": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "type": "array",
                  "x-entity-path": "supportedLanguages"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreSupportedLanguagesType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreSupportedLanguages[1]"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "updateOnlineStoreLanguages",
        "summary": "Updates an online store's languages.",
        "x-action-code": "Change",
        "x-expression-template": "/OnlineStore[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/locations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The data language IDs.",
            "in": "query",
            "name": "dataLanguageIds",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of online store contacts.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer"
                },
                "items": {
                  "description": "The data objects or resources that that match the query parameters.",
                  "items": {
                    "description": "An online store contact.",
                    "properties": {
                      "addressLine1": {
                        "description": "First address line.",
                        "type": "string",
                        "x-entity-path": "address/addressLine[1]"
                      },
                      "addressLine2": {
                        "description": "Second address line.",
                        "type": "string",
                        "x-entity-path": "address/addressLine[2]"
                      },
                      "addressLine3": {
                        "description": "Third address line.",
                        "type": "string",
                        "x-entity-path": "address/addressLine[3]"
                      },
                      "city": {
                        "description": "City.",
                        "type": "string",
                        "x-entity-path": "address/city"
                      },
                      "country": {
                        "description": "Country.",
                        "type": "string",
                        "x-entity-path": "address/country"
                      },
                      "email1": {
                        "description": "Primary e-mail address.",
                        "type": "string",
                        "x-entity-path": "emailAddress1/value"
                      },
                      "email2": {
                        "description": "Secondary e-mail address.",
                        "type": "string",
                        "x-entity-path": "emailAddress2/value"
                      },
                      "fax1": {
                        "description": "Primary fax number.",
                        "type": "string",
                        "x-entity-path": "fax1/value"
                      },
                      "fax2": {
                        "description": "Secondary fax number.",
                        "type": "string",
                        "x-entity-path": "fax2/value"
                      },
                      "id": {
                        "description": "The unique numeric ID for identifying the online store contact.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "contactInfoIdentifier/uniqueID"
                      },
                      "languageId": {
                        "description": "The integer for identifying the language of the online store contact. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                        "format": "int32",
                        "type": "integer",
                        "x-entity-path": "language"
                      },
                      "name": {
                        "description": "The name of the online store contact.",
                        "type": "string",
                        "x-entity-path": "contactName/businessTitle"
                      },
                      "onlineStoreId": {
                        "description": "The unique numeric ID for identifying the online store.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                      },
                      "phone1": {
                        "description": "Primary telephone number.",
                        "type": "string",
                        "x-entity-path": "telephone1/value"
                      },
                      "phone2": {
                        "description": "Secondary telephone number.",
                        "type": "string",
                        "x-entity-path": "telephone2/value"
                      },
                      "postalCode": {
                        "description": "Postal code.",
                        "type": "string",
                        "x-entity-path": "address/postalCode"
                      },
                      "stateOrProvince": {
                        "description": "State or province.",
                        "type": "string",
                        "x-entity-path": "address/stateOrProvinceName"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.foundation.common.datatypes.ContactInfoType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreLocationInfo"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoreLocations",
        "summary": "Gets the online store location information.",
        "x-expression-template": "{_wcf.ap='{accessProfile}';_wcf.dataLanguageIds='{dataLanguageIds}'}/OnlineStore[StoreIdentifier[(UniqueID='{onlineStoreId}')]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_All"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "An online store location.",
              "properties": {
                "addressLine1": {
                  "description": "First address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[1]"
                },
                "addressLine2": {
                  "description": "Second address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[2]"
                },
                "addressLine3": {
                  "description": "Third address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[3]"
                },
                "city": {
                  "description": "City.",
                  "type": "string",
                  "x-entity-path": "address/city"
                },
                "country": {
                  "description": "Country.",
                  "type": "string",
                  "x-entity-path": "address/country"
                },
                "email1": {
                  "description": "Primary e-mail address.",
                  "type": "string",
                  "x-entity-path": "emailAddress1/value"
                },
                "email2": {
                  "description": "Secondary e-mail address.",
                  "type": "string",
                  "x-entity-path": "emailAddress2/value"
                },
                "fax1": {
                  "description": "Primary fax number.",
                  "type": "string",
                  "x-entity-path": "fax1/value"
                },
                "fax2": {
                  "description": "Secondary fax number.",
                  "type": "string",
                  "x-entity-path": "fax2/value"
                },
                "id": {
                  "description": "The unique numeric ID for identifying the online store location.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "contactInfoIdentifier/uniqueID"
                },
                "languageId": {
                  "description": "The integer for identifying the language of the online store location. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "language"
                },
                "name": {
                  "description": "Store location name.",
                  "type": "string",
                  "x-entity-path": "contactName/businessTitle"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                },
                "phone1": {
                  "description": "Primary phone number.",
                  "type": "string",
                  "x-entity-path": "telephone1/value"
                },
                "phone2": {
                  "description": "Secondary phone number.",
                  "type": "string",
                  "x-entity-path": "telephone2/value"
                },
                "postalCode": {
                  "description": "Postal code.",
                  "type": "string",
                  "x-entity-path": "address/postalCode"
                },
                "stateOrProvince": {
                  "description": "State or province.",
                  "type": "string",
                  "x-entity-path": "address/stateOrProvinceName"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.foundation.common.datatypes.ContactInfoType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreLocationInfo[1]"
          }
        ],
        "responses": {
          "201": {
            "description": "The operation is successful.",
            "headers": {
              "Location": {
                "description": "The URI of the location.",
                "type": "string"
              }
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreLocationInfo[1]/contactInfoIdentifier/uniqueID"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "createOnlineStoreLocation",
        "summary": "Creates an online store location.",
        "x-action-code": "Add",
        "x-expression-template": "/OnlineStore[1]/OnlineStoreLocationInfo[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/locations/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying online store location ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreLocationInfo[1]/contactInfoIdentifier/uniqueID"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation is successful."
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "deleteOnlineStoreLocation",
        "summary": "Deletes an online store location.",
        "x-action-code": "Delete",
        "x-expression-template": "/OnlineStore[1]/OnlineStoreLocationInfo[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying online store location ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreLocationInfo[1]/contactInfoIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "An online store location.",
              "properties": {
                "addressLine1": {
                  "description": "First address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[1]"
                },
                "addressLine2": {
                  "description": "Second address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[2]"
                },
                "addressLine3": {
                  "description": "Third address line.",
                  "type": "string",
                  "x-entity-path": "address/addressLine[3]"
                },
                "city": {
                  "description": "City.",
                  "type": "string",
                  "x-entity-path": "address/city"
                },
                "country": {
                  "description": "Country.",
                  "type": "string",
                  "x-entity-path": "address/country"
                },
                "email1": {
                  "description": "Primary e-mail address.",
                  "type": "string",
                  "x-entity-path": "emailAddress1/value"
                },
                "email2": {
                  "description": "Secondary e-mail address.",
                  "type": "string",
                  "x-entity-path": "emailAddress2/value"
                },
                "fax1": {
                  "description": "Primary fax number.",
                  "type": "string",
                  "x-entity-path": "fax1/value"
                },
                "fax2": {
                  "description": "Secondary fax number.",
                  "type": "string",
                  "x-entity-path": "fax2/value"
                },
                "id": {
                  "description": "The unique numeric ID for identifying the online store location.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "contactInfoIdentifier/uniqueID"
                },
                "languageId": {
                  "description": "The integer for identifying the language of the online store location. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "language"
                },
                "name": {
                  "description": "Store location name.",
                  "type": "string",
                  "x-entity-path": "contactName/businessTitle"
                },
                "onlineStoreId": {
                  "description": "The unique numeric ID for identifying the online store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                },
                "phone1": {
                  "description": "Primary phone number.",
                  "type": "string",
                  "x-entity-path": "telephone1/value"
                },
                "phone2": {
                  "description": "Secondary phone number.",
                  "type": "string",
                  "x-entity-path": "telephone2/value"
                },
                "postalCode": {
                  "description": "Postal code.",
                  "type": "string",
                  "x-entity-path": "address/postalCode"
                },
                "stateOrProvince": {
                  "description": "State or province.",
                  "type": "string",
                  "x-entity-path": "address/stateOrProvinceName"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.foundation.common.datatypes.ContactInfoType"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreLocationInfo[1]"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "updateOnlineStoreLocation",
        "summary": "Updates an online store location.",
        "x-action-code": "Change",
        "x-expression-template": "/OnlineStore[1]/OnlineStoreLocationInfo[1]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "changeOnlineStore",
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.ChangeOnlineStoreType",
        "x-request-verb": "change"
      }
    },
    "/rest/admin/v2/online-stores/{onlineStoreId}/related-stores": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the online store.",
            "format": "int32",
            "in": "path",
            "name": "onlineStoreId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of online store related stores.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer"
                },
                "items": {
                  "description": "The data objects or resources that that match the query parameters.",
                  "items": {
                    "description": "An online store related stores.",
                    "properties": {
                      "id": {
                        "description": "The unique numeric ID for identifying the online store relationship.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "storeIdentifier/uniqueID"
                      },
                      "onlineStoreId": {
                        "description": "The unique numeric ID for identifying the online store.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "container/onlineStoreIdentifier/uniqueID"
                      },
                      "relationshipTypeId": {
                        "description": "The unique numeric ID for identifying the store relationship type.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "relationshipType"
                      },
                      "sequence": {
                        "description": "The store relationship sequence number.",
                        "format": "double",
                        "readOnly": true,
                        "type": "number",
                        "x-entity-path": "relationshipSequence"
                      },
                      "state": {
                        "description": "The store relationship state. 1 indicates active. 0 indicates inactive.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "state"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.infrastructure.facade.datatypes.OnlineStoreRelatedStoresType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/onlineStore[1]/onlineStoreRelatedStores"
          }
        },
        "tags": [
          "Online Stores"
        ],
        "operationId": "getOnlineStoreRelatedStores",
        "summary": "Gets an online store's related stores.",
        "x-expression-template": "{_wcf.ap='{accessProfile}'}/OnlineStore[StoreIdentifier[(UniqueID='{onlineStoreId}')]]",
        "x-facade-client-class": "com.ibm.commerce.infrastructure.facade.client.InfrastructureFacadeClient",
        "x-facade-client-method": "getOnlineStore",
        "x-parameters": {
          "accessProfile": "IBM_Admin_All"
        },
        "x-request-bod-class": "com.ibm.commerce.infrastructure.facade.datatypes.GetOnlineStoreType"
      }
    },
    "/rest/admin/v2/organizations": {
      "post": {
        "responses": {
          "201": {
            "description": "The requested resource has been created.",
            "headers": {
              "Location": {
                "description": "Link to the newly created resource.",
                "type": "string"
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "properties": {
                "id": {
                  "description": "The unique numeric ID for identifying the organization.",
                  "type": "integer",
                  "format": "int64"
                },
                "address": {
                  "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the address."
                    },
                    "address1": {
                      "type": "string",
                      "description": "The first address line of the street address."
                    },
                    "address2": {
                      "type": "string",
                      "description": "The second address line of the street address."
                    },
                    "address3": {
                      "type": "string",
                      "description": "The third address line of the street address."
                    },
                    "addressType": {
                      "type": "string",
                      "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                    },
                    "bestCallingTime": {
                      "type": "string",
                      "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                    },
                    "billingCode": {
                      "type": "string",
                      "description": "A code to identify the shipping or billing information."
                    },
                    "billingCodeType": {
                      "type": "string",
                      "description": "The code for identifying the system or method of code structure that is used for billing."
                    },
                    "businessTitle": {
                      "type": "string",
                      "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                    },
                    "city": {
                      "type": "string",
                      "description": "The name of the city where the user or organization resides."
                    },
                    "country": {
                      "type": "string",
                      "description": "The name of the country or region where the user or organization resides."
                    },
                    "createdDateTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time that the address was created."
                    },
                    "email1": {
                      "type": "string",
                      "description": "The primary e-mail."
                    },
                    "email2": {
                      "type": "string",
                      "description": "The secondary e-mail."
                    },
                    "fax1": {
                      "type": "string",
                      "description": "The primary facsimile number."
                    },
                    "fax2": {
                      "type": "string",
                      "description": "The secondary facsimile number."
                    },
                    "field1": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field2": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field3": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "firstName": {
                      "type": "string",
                      "description": "The first name of the user."
                    },
                    "lastName": {
                      "type": "string",
                      "description": "The last name of the user."
                    },
                    "memberId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                    },
                    "middleName": {
                      "type": "string",
                      "description": "The middle name or initial of the user."
                    },
                    "mobilePhone1": {
                      "type": "string",
                      "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                    },
                    "mobilePhone1Country": {
                      "type": "string",
                      "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                    },
                    "nickName": {
                      "type": "string",
                      "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                    },
                    "officeAddress": {
                      "type": "string",
                      "description": "The internal office address line, such as the internal designation for an employee's desk location."
                    },
                    "organizationName": {
                      "type": "string",
                      "description": "The name of the organization to which the address information applies, if this is a business address."
                    },
                    "organizationUnitName": {
                      "type": "string",
                      "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                    },
                    "packageSuppression": {
                      "type": "integer",
                      "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                    },
                    "personTitle": {
                      "type": "string",
                      "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                    },
                    "phone1": {
                      "type": "string",
                      "description": "The primary phone number."
                    },
                    "phone1Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "phone2": {
                      "type": "string",
                      "description": "The secondary phone number."
                    },
                    "phone2Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "primary": {
                      "type": "integer",
                      "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                    },
                    "publishPhone1": {
                      "type": "integer",
                      "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "publishPhone2": {
                      "type": "integer",
                      "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "selfAddress": {
                      "type": "integer",
                      "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                      "readOnly": true
                    },
                    "shippingGeoCode": {
                      "type": "string",
                      "description": "The geographical code that identifies a region for the shipping purposes."
                    },
                    "state": {
                      "type": "string",
                      "description": "The name of the state, province, or equivalent where the user or organization resides."
                    },
                    "status": {
                      "type": "string",
                      "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                      "readOnly": true
                    },
                    "taxGeoCode": {
                      "type": "string",
                      "description": "The geographical tax code that identifies a region for the tax purposes."
                    },
                    "zipCode": {
                      "type": "string",
                      "description": "The ZIP or postal code of the user's address."
                    }
                  }
                },
                "administratorFirstName": {
                  "description": "The first name of the administrator.",
                  "type": "string"
                },
                "administratorLastName": {
                  "description": "The last name of the administrator.",
                  "type": "string"
                },
                "administratorMiddleName": {
                  "description": "The middle name of the administrator.",
                  "type": "string"
                },
                "approvalState": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The organizational entity's approval status. Supported values are 0 (pending approval), 1 (approved), 2 (rejected) and null (approval not applicable, so considered approved).",
                  "readOnly": true
                },
                "businessCategory": {
                  "description": "Describes the kind of business performed by an organization or organizational unit.",
                  "type": "string"
                },
                "description": {
                  "description": "A description of the registrant.",
                  "type": "string"
                },
                "distinguishedName": {
                  "description": "Distinguished Name (DN) of the organization or organizational unit, for LDAP use.",
                  "type": "string",
                  "readOnly": true
                },
                "isBusinessEntity": {
                  "description": "Whether this organization is a business entity, that is, an organization that can have business accounts. If the organization is a business entity, the value will be true, or false otherwise.",
                  "type": "boolean"
                },
                "legalId": {
                  "description": "The organization's legal identifier, such as the identifier assigned by a government. The value may be null for an organization whose type is an organizational unit (OU).",
                  "type": "string"
                },
                "organizationName": {
                  "description": "The name of the organization that the registrant represents.",
                  "type": "string"
                },
                "organizationType": {
                  "description": "The type of the organizational entity being added. O=Organization; OU=Organizational Unit.",
                  "type": "string"
                },
                "parentOrganizationId": {
                  "description": "If the organization type is an organizational unit (OU), parentOrganizationId is the unique ID of the parent organization of this organization. If the organization type is an organization (O), parentOrganizationId is not required and the default value is the root organization (-2001). Can be set when creating an organization, but is read only otherwise.",
                  "type": "integer",
                  "format": "int64"
                },
                "parentOrganizationName": {
                  "description": "The name of this organization's parent.",
                  "type": "string"
                },
                "preferredDelivery": {
                  "description": "The registrant's preferred mode of delivery.",
                  "type": "string"
                },
                "status": {
                  "description": "Whether or not the organization is locked. A value of 0 indicates the organization is unlocked, and a value of -1 indicates the organization is locked.",
                  "format": "int32",
                  "type": "integer"
                },
                "taxPayerId": {
                  "description": "A string used to identify the user for taxation, especially useful with tax software.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of data bean returning this information. Supported values are: O (OrgEntity), U (User), and G (MemberGroup).",
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Create an organization.",
        "produces": [
          "application/json"
        ],
        "summary": "Create an organization.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Organizations-createOrganization"
      }
    },
    "/rest/admin/v2/organizations/{id}": {
      "patch": {
        "responses": {
          "200": {
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "required": false,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "properties": {
                "id": {
                  "description": "The unique numeric ID for identifying the organization.",
                  "type": "integer",
                  "format": "int64"
                },
                "address": {
                  "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the address."
                    },
                    "address1": {
                      "type": "string",
                      "description": "The first address line of the street address."
                    },
                    "address2": {
                      "type": "string",
                      "description": "The second address line of the street address."
                    },
                    "address3": {
                      "type": "string",
                      "description": "The third address line of the street address."
                    },
                    "addressType": {
                      "type": "string",
                      "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                    },
                    "bestCallingTime": {
                      "type": "string",
                      "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                    },
                    "billingCode": {
                      "type": "string",
                      "description": "A code to identify the shipping or billing information."
                    },
                    "billingCodeType": {
                      "type": "string",
                      "description": "The code for identifying the system or method of code structure that is used for billing."
                    },
                    "businessTitle": {
                      "type": "string",
                      "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                    },
                    "city": {
                      "type": "string",
                      "description": "The name of the city where the user or organization resides."
                    },
                    "country": {
                      "type": "string",
                      "description": "The name of the country or region where the user or organization resides."
                    },
                    "createdDateTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time that the address was created."
                    },
                    "email1": {
                      "type": "string",
                      "description": "The primary e-mail."
                    },
                    "email2": {
                      "type": "string",
                      "description": "The secondary e-mail."
                    },
                    "fax1": {
                      "type": "string",
                      "description": "The primary facsimile number."
                    },
                    "fax2": {
                      "type": "string",
                      "description": "The secondary facsimile number."
                    },
                    "field1": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field2": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field3": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "firstName": {
                      "type": "string",
                      "description": "The first name of the user."
                    },
                    "lastName": {
                      "type": "string",
                      "description": "The last name of the user."
                    },
                    "memberId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                    },
                    "middleName": {
                      "type": "string",
                      "description": "The middle name or initial of the user."
                    },
                    "mobilePhone1": {
                      "type": "string",
                      "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                    },
                    "mobilePhone1Country": {
                      "type": "string",
                      "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                    },
                    "nickName": {
                      "type": "string",
                      "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                    },
                    "officeAddress": {
                      "type": "string",
                      "description": "The internal office address line, such as the internal designation for an employee's desk location."
                    },
                    "organizationName": {
                      "type": "string",
                      "description": "The name of the organization to which the address information applies, if this is a business address."
                    },
                    "organizationUnitName": {
                      "type": "string",
                      "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                    },
                    "packageSuppression": {
                      "type": "integer",
                      "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                    },
                    "personTitle": {
                      "type": "string",
                      "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                    },
                    "phone1": {
                      "type": "string",
                      "description": "The primary phone number."
                    },
                    "phone1Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "phone2": {
                      "type": "string",
                      "description": "The secondary phone number."
                    },
                    "phone2Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "primary": {
                      "type": "integer",
                      "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                    },
                    "publishPhone1": {
                      "type": "integer",
                      "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "publishPhone2": {
                      "type": "integer",
                      "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "selfAddress": {
                      "type": "integer",
                      "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                      "readOnly": true
                    },
                    "shippingGeoCode": {
                      "type": "string",
                      "description": "The geographical code that identifies a region for the shipping purposes."
                    },
                    "state": {
                      "type": "string",
                      "description": "The name of the state, province, or equivalent where the user or organization resides."
                    },
                    "status": {
                      "type": "string",
                      "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                      "readOnly": true
                    },
                    "taxGeoCode": {
                      "type": "string",
                      "description": "The geographical tax code that identifies a region for the tax purposes."
                    },
                    "zipCode": {
                      "type": "string",
                      "description": "The ZIP or postal code of the user's address."
                    }
                  }
                },
                "administratorFirstName": {
                  "description": "The first name of the administrator.",
                  "type": "string"
                },
                "administratorLastName": {
                  "description": "The last name of the administrator.",
                  "type": "string"
                },
                "administratorMiddleName": {
                  "description": "The middle name of the administrator.",
                  "type": "string"
                },
                "approvalState": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The organizational entity's approval status. Supported values are 0 (pending approval), 1 (approved), 2 (rejected) and null (approval not applicable, so considered approved).",
                  "readOnly": true
                },
                "businessCategory": {
                  "description": "Describes the kind of business performed by an organization or organizational unit.",
                  "type": "string"
                },
                "description": {
                  "description": "A description of the registrant.",
                  "type": "string"
                },
                "distinguishedName": {
                  "description": "Distinguished Name (DN) of the organization or organizational unit, for LDAP use.",
                  "type": "string",
                  "readOnly": true
                },
                "isBusinessEntity": {
                  "description": "Whether this organization is a business entity, that is, an organization that can have business accounts. If the organization is a business entity, the value will be true, or false otherwise.",
                  "type": "boolean"
                },
                "legalId": {
                  "description": "The organization's legal identifier, such as the identifier assigned by a government. The value may be null for an organization whose type is an organizational unit (OU).",
                  "type": "string"
                },
                "organizationName": {
                  "description": "The name of the organization that the registrant represents.",
                  "type": "string"
                },
                "organizationType": {
                  "description": "The type of the organizational entity being added. O=Organization; OU=Organizational Unit.",
                  "type": "string"
                },
                "parentOrganizationId": {
                  "description": "If the organization type is an organizational unit (OU), parentOrganizationId is the unique ID of the parent organization of this organization. If the organization type is an organization (O), parentOrganizationId is not required and the default value is the root organization (-2001). Can be set when creating an organization, but is read only otherwise.",
                  "type": "integer",
                  "format": "int64"
                },
                "parentOrganizationName": {
                  "description": "The name of this organization's parent.",
                  "type": "string"
                },
                "preferredDelivery": {
                  "description": "The registrant's preferred mode of delivery.",
                  "type": "string"
                },
                "status": {
                  "description": "Whether or not the organization is locked. A value of 0 indicates the organization is unlocked, and a value of -1 indicates the organization is locked.",
                  "format": "int32",
                  "type": "integer"
                },
                "taxPayerId": {
                  "description": "A string used to identify the user for taxation, especially useful with tax software.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of data bean returning this information. Supported values are: O (OrgEntity), U (User), and G (MemberGroup).",
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Update an organization.",
        "produces": [
          "application/json"
        ],
        "summary": "Update an organization.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Organizations-updateOrganization"
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "id": {
                  "description": "The unique numeric ID for identifying the organization.",
                  "type": "integer",
                  "format": "int64"
                },
                "address": {
                  "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the address."
                    },
                    "address1": {
                      "type": "string",
                      "description": "The first address line of the street address."
                    },
                    "address2": {
                      "type": "string",
                      "description": "The second address line of the street address."
                    },
                    "address3": {
                      "type": "string",
                      "description": "The third address line of the street address."
                    },
                    "addressType": {
                      "type": "string",
                      "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                    },
                    "bestCallingTime": {
                      "type": "string",
                      "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                    },
                    "billingCode": {
                      "type": "string",
                      "description": "A code to identify the shipping or billing information."
                    },
                    "billingCodeType": {
                      "type": "string",
                      "description": "The code for identifying the system or method of code structure that is used for billing."
                    },
                    "businessTitle": {
                      "type": "string",
                      "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                    },
                    "city": {
                      "type": "string",
                      "description": "The name of the city where the user or organization resides."
                    },
                    "country": {
                      "type": "string",
                      "description": "The name of the country or region where the user or organization resides."
                    },
                    "createdDateTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time that the address was created."
                    },
                    "email1": {
                      "type": "string",
                      "description": "The primary e-mail."
                    },
                    "email2": {
                      "type": "string",
                      "description": "The secondary e-mail."
                    },
                    "fax1": {
                      "type": "string",
                      "description": "The primary facsimile number."
                    },
                    "fax2": {
                      "type": "string",
                      "description": "The secondary facsimile number."
                    },
                    "field1": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field2": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field3": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "firstName": {
                      "type": "string",
                      "description": "The first name of the user."
                    },
                    "lastName": {
                      "type": "string",
                      "description": "The last name of the user."
                    },
                    "memberId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                    },
                    "middleName": {
                      "type": "string",
                      "description": "The middle name or initial of the user."
                    },
                    "mobilePhone1": {
                      "type": "string",
                      "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                    },
                    "mobilePhone1Country": {
                      "type": "string",
                      "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                    },
                    "nickName": {
                      "type": "string",
                      "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                    },
                    "officeAddress": {
                      "type": "string",
                      "description": "The internal office address line, such as the internal designation for an employee's desk location."
                    },
                    "organizationName": {
                      "type": "string",
                      "description": "The name of the organization to which the address information applies, if this is a business address."
                    },
                    "organizationUnitName": {
                      "type": "string",
                      "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                    },
                    "packageSuppression": {
                      "type": "integer",
                      "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                    },
                    "personTitle": {
                      "type": "string",
                      "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                    },
                    "phone1": {
                      "type": "string",
                      "description": "The primary phone number."
                    },
                    "phone1Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "phone2": {
                      "type": "string",
                      "description": "The secondary phone number."
                    },
                    "phone2Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "primary": {
                      "type": "integer",
                      "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                    },
                    "publishPhone1": {
                      "type": "integer",
                      "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "publishPhone2": {
                      "type": "integer",
                      "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "selfAddress": {
                      "type": "integer",
                      "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                      "readOnly": true
                    },
                    "shippingGeoCode": {
                      "type": "string",
                      "description": "The geographical code that identifies a region for the shipping purposes."
                    },
                    "state": {
                      "type": "string",
                      "description": "The name of the state, province, or equivalent where the user or organization resides."
                    },
                    "status": {
                      "type": "string",
                      "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                      "readOnly": true
                    },
                    "taxGeoCode": {
                      "type": "string",
                      "description": "The geographical tax code that identifies a region for the tax purposes."
                    },
                    "zipCode": {
                      "type": "string",
                      "description": "The ZIP or postal code of the user's address."
                    }
                  }
                },
                "administratorFirstName": {
                  "description": "The first name of the administrator.",
                  "type": "string"
                },
                "administratorLastName": {
                  "description": "The last name of the administrator.",
                  "type": "string"
                },
                "administratorMiddleName": {
                  "description": "The middle name of the administrator.",
                  "type": "string"
                },
                "approvalState": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The organizational entity's approval status. Supported values are 0 (pending approval), 1 (approved), 2 (rejected) and null (approval not applicable, so considered approved).",
                  "readOnly": true
                },
                "businessCategory": {
                  "description": "Describes the kind of business performed by an organization or organizational unit.",
                  "type": "string"
                },
                "description": {
                  "description": "A description of the registrant.",
                  "type": "string"
                },
                "distinguishedName": {
                  "description": "Distinguished Name (DN) of the organization or organizational unit, for LDAP use.",
                  "type": "string",
                  "readOnly": true
                },
                "isBusinessEntity": {
                  "description": "Whether this organization is a business entity, that is, an organization that can have business accounts. If the organization is a business entity, the value will be true, or false otherwise.",
                  "type": "boolean"
                },
                "legalId": {
                  "description": "The organization's legal identifier, such as the identifier assigned by a government. The value may be null for an organization whose type is an organizational unit (OU).",
                  "type": "string"
                },
                "organizationName": {
                  "description": "The name of the organization that the registrant represents.",
                  "type": "string"
                },
                "organizationType": {
                  "description": "The type of the organizational entity being added. O=Organization; OU=Organizational Unit.",
                  "type": "string"
                },
                "parentOrganizationId": {
                  "description": "If the organization type is an organizational unit (OU), parentOrganizationId is the unique ID of the parent organization of this organization. If the organization type is an organization (O), parentOrganizationId is not required and the default value is the root organization (-2001). Can be set when creating an organization, but is read only otherwise.",
                  "type": "integer",
                  "format": "int64"
                },
                "parentOrganizationName": {
                  "description": "The name of this organization's parent.",
                  "type": "string"
                },
                "preferredDelivery": {
                  "description": "The registrant's preferred mode of delivery.",
                  "type": "string"
                },
                "status": {
                  "description": "Whether or not the organization is locked. A value of 0 indicates the organization is unlocked, and a value of -1 indicates the organization is locked.",
                  "format": "int32",
                  "type": "integer"
                },
                "taxPayerId": {
                  "description": "A string used to identify the user for taxation, especially useful with tax software.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of data bean returning this information. Supported values are: O (OrgEntity), U (User), and G (MemberGroup).",
                  "type": "string"
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Get an organization by ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Get an organization by ID.",
        "operationId": "Organizations-findByOrganizationId"
      }
    },
    "/rest/admin/v2/organizations/{id}/lock": {
      "post": {
        "responses": {
          "200": {
            "description": "The requested completed successfully."
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Not authenticated. The user session is not valid.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "The user is not authorized to perform the specified request.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error. For details, see the server log files.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "name": "id",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path"
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Lock an organization. When locked the organization's status is -1.",
        "produces": [
          "application/json"
        ],
        "summary": "Lock an organization.",
        "operationId": "Organization-lock"
      }
    },
    "/rest/admin/v2/organizations/{id}/unlock": {
      "post": {
        "responses": {
          "200": {
            "description": "The requested completed successfully."
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Not authenticated. The user session is not valid.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "The user is not authorized to perform the specified request.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error. For details, see the server log files.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "name": "id",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path"
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Unlock an organization. When unlocked the organization's status is 0.",
        "produces": [
          "application/json"
        ],
        "summary": "Unlock an organization.",
        "operationId": "Organization-unlock"
      }
    },
    "/rest/admin/v2/organizations/manageable": {
      "get": {
        "responses": {
          "200": {
            "description": "The request completed successfully.",
            "schema": {
              "description": "The model for list of organizations.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "type": "integer",
                  "format": "int64",
                  "minimum": 0
                },
                "items": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "description": "The unique numeric ID for identifying the organization.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "address": {
                        "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The unique numeric ID for identifying the address."
                          },
                          "address1": {
                            "type": "string",
                            "description": "The first address line of the street address."
                          },
                          "address2": {
                            "type": "string",
                            "description": "The second address line of the street address."
                          },
                          "address3": {
                            "type": "string",
                            "description": "The third address line of the street address."
                          },
                          "addressType": {
                            "type": "string",
                            "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                          },
                          "bestCallingTime": {
                            "type": "string",
                            "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                          },
                          "billingCode": {
                            "type": "string",
                            "description": "A code to identify the shipping or billing information."
                          },
                          "billingCodeType": {
                            "type": "string",
                            "description": "The code for identifying the system or method of code structure that is used for billing."
                          },
                          "businessTitle": {
                            "type": "string",
                            "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                          },
                          "city": {
                            "type": "string",
                            "description": "The name of the city where the user or organization resides."
                          },
                          "country": {
                            "type": "string",
                            "description": "The name of the country or region where the user or organization resides."
                          },
                          "createdDateTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time that the address was created."
                          },
                          "email1": {
                            "type": "string",
                            "description": "The primary e-mail."
                          },
                          "email2": {
                            "type": "string",
                            "description": "The secondary e-mail."
                          },
                          "fax1": {
                            "type": "string",
                            "description": "The primary facsimile number."
                          },
                          "fax2": {
                            "type": "string",
                            "description": "The secondary facsimile number."
                          },
                          "field1": {
                            "type": "string",
                            "description": "A customizable field."
                          },
                          "field2": {
                            "type": "string",
                            "description": "A customizable field."
                          },
                          "field3": {
                            "type": "string",
                            "description": "A customizable field."
                          },
                          "firstName": {
                            "type": "string",
                            "description": "The first name of the user."
                          },
                          "lastName": {
                            "type": "string",
                            "description": "The last name of the user."
                          },
                          "memberId": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                          },
                          "middleName": {
                            "type": "string",
                            "description": "The middle name or initial of the user."
                          },
                          "mobilePhone1": {
                            "type": "string",
                            "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                          },
                          "mobilePhone1Country": {
                            "type": "string",
                            "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                          },
                          "nickName": {
                            "type": "string",
                            "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                          },
                          "officeAddress": {
                            "type": "string",
                            "description": "The internal office address line, such as the internal designation for an employee's desk location."
                          },
                          "organizationName": {
                            "type": "string",
                            "description": "The name of the organization to which the address information applies, if this is a business address."
                          },
                          "organizationUnitName": {
                            "type": "string",
                            "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                          },
                          "packageSuppression": {
                            "type": "integer",
                            "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                          },
                          "personTitle": {
                            "type": "string",
                            "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                          },
                          "phone1": {
                            "type": "string",
                            "description": "The primary phone number."
                          },
                          "phone1Type": {
                            "type": "string",
                            "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                          },
                          "phone2": {
                            "type": "string",
                            "description": "The secondary phone number."
                          },
                          "phone2Type": {
                            "type": "string",
                            "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                          },
                          "primary": {
                            "type": "integer",
                            "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                          },
                          "publishPhone1": {
                            "type": "integer",
                            "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                          },
                          "publishPhone2": {
                            "type": "integer",
                            "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                          },
                          "selfAddress": {
                            "type": "integer",
                            "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                            "readOnly": true
                          },
                          "shippingGeoCode": {
                            "type": "string",
                            "description": "The geographical code that identifies a region for the shipping purposes."
                          },
                          "state": {
                            "type": "string",
                            "description": "The name of the state, province, or equivalent where the user or organization resides."
                          },
                          "status": {
                            "type": "string",
                            "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                            "readOnly": true
                          },
                          "taxGeoCode": {
                            "type": "string",
                            "description": "The geographical tax code that identifies a region for the tax purposes."
                          },
                          "zipCode": {
                            "type": "string",
                            "description": "The ZIP or postal code of the user's address."
                          }
                        }
                      },
                      "administratorFirstName": {
                        "description": "The first name of the administrator.",
                        "type": "string"
                      },
                      "administratorLastName": {
                        "description": "The last name of the administrator.",
                        "type": "string"
                      },
                      "administratorMiddleName": {
                        "description": "The middle name of the administrator.",
                        "type": "string"
                      },
                      "approvalState": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The organizational entity's approval status. Supported values are 0 (pending approval), 1 (approved), 2 (rejected) and null (approval not applicable, so considered approved).",
                        "readOnly": true
                      },
                      "businessCategory": {
                        "description": "Describes the kind of business performed by an organization or organizational unit.",
                        "type": "string"
                      },
                      "description": {
                        "description": "A description of the registrant.",
                        "type": "string"
                      },
                      "distinguishedName": {
                        "description": "Distinguished Name (DN) of the organization or organizational unit, for LDAP use.",
                        "type": "string",
                        "readOnly": true
                      },
                      "isBusinessEntity": {
                        "description": "Whether this organization is a business entity, that is, an organization that can have business accounts. If the organization is a business entity, the value will be true, or false otherwise.",
                        "type": "boolean"
                      },
                      "legalId": {
                        "description": "The organization's legal identifier, such as the identifier assigned by a government. The value may be null for an organization whose type is an organizational unit (OU).",
                        "type": "string"
                      },
                      "organizationName": {
                        "description": "The name of the organization that the registrant represents.",
                        "type": "string"
                      },
                      "organizationType": {
                        "description": "The type of the organizational entity being added. O=Organization; OU=Organizational Unit.",
                        "type": "string"
                      },
                      "parentOrganizationId": {
                        "description": "If the organization type is an organizational unit (OU), parentOrganizationId is the unique ID of the parent organization of this organization. If the organization type is an organization (O), parentOrganizationId is not required and the default value is the root organization (-2001). Can be set when creating an organization, but is read only otherwise.",
                        "type": "integer",
                        "format": "int64"
                      },
                      "parentOrganizationName": {
                        "description": "The name of this organization's parent.",
                        "type": "string"
                      },
                      "preferredDelivery": {
                        "description": "The registrant's preferred mode of delivery.",
                        "type": "string"
                      },
                      "status": {
                        "description": "Whether or not the organization is locked. A value of 0 indicates the organization is unlocked, and a value of -1 indicates the organization is locked.",
                        "format": "int32",
                        "type": "integer"
                      },
                      "taxPayerId": {
                        "description": "A string used to identify the user for taxation, especially useful with tax software.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The type of data bean returning this information. Supported values are: O (OrgEntity), U (User), and G (MemberGroup).",
                        "type": "string"
                      }
                    }
                  },
                  "description": "The items."
                },
                "limit": {
                  "description": "The maximum number of records to return.",
                  "format": "int32",
                  "maximum": 500,
                  "type": "integer"
                },
                "offset": {
                  "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. Some of the inputs provided to the request are not valid."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "default": 0,
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "description": "The maximum number of records to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "description": "The organization name.",
            "in": "query",
            "name": "organizationName",
            "required": false,
            "type": "string"
          },
          {
            "description": "The parent organization name.",
            "in": "query",
            "name": "parentOrganizationName",
            "required": false,
            "type": "string"
          },
          {
            "description": "The comma-separated set of properties that control the order of the listed items. Properties can be prefixed by either (-) to sort in descending order, or (+) to sort in ascending order. By default, properties are sorted in ascending order. For example, sort=name,-id will order the items first based on the name value in ascending order, and then by their ID value in descending order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Get a collection of organizations the currently logged in administrator user can manage.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a collection of organizations the currently logged in administrator user can manage.",
        "operationId": "Organization-getManageableOrganizations"
      }
    },
    "/rest/admin/v2/organizations/{id}/site-attributes": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "description": "A list of custom attributes.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "items": {
                  "type": "array",
                  "items": {
                    "description": "A custom attribute that is associated with a user or organization and that is store-independent.",
                    "properties": {
                      "name": {
                        "description": "The name of the custom attribute.",
                        "type": "string"
                      },
                      "values": {
                        "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "2019-01-11 10:44:30.360000"
                        }
                      }
                    }
                  },
                  "description": "The items."
                },
                "limit": {
                  "description": "The maximum number of records to return.",
                  "format": "int32",
                  "maximum": 500,
                  "type": "integer"
                },
                "offset": {
                  "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "default": 0,
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "default": 100000,
            "description": "The maximum number of records to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Get an organization's site-level, store-independent attributes.",
        "produces": [
          "application/json"
        ],
        "summary": "Get an organization's site-level, store-independent attributes.",
        "operationId": "Organizations-findSiteAttributesByOrganizationId"
      },
      "post": {
        "responses": {
          "201": {
            "description": "The requested resource has been created.",
            "headers": {
              "Location": {
                "description": "Link to the newly created resource.",
                "type": "string"
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that is store-independent.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Create an organization site-level attribute.",
        "produces": [
          "application/json"
        ],
        "summary": "Create an organization site-level attribute.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Organizations-createOrganizationSiteAttribute"
      }
    },
    "/rest/admin/v2/organizations/{id}/site-attributes/{name}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that is store-independent.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "name": "name",
            "type": "string",
            "description": "The name of the attribute to use as the search term.",
            "in": "path"
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Get an organization's site-level, store-independent attribute by organization ID and attribute name.",
        "produces": [
          "application/json"
        ],
        "summary": "Get an organization's site-level, store-independent attribute by organization ID and attribute name.",
        "operationId": "Organizations-findSiteAttributeByOrganizationId"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "name": "name",
            "type": "string",
            "description": "The name of the attribute to be updated.",
            "in": "path"
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that is store-independent.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Update an organization's site-level attributes. Attribute values are merged at the attribute level, rather than at the attribute value level. For example, if an attribute has the following values '[a, b]', after performing an update using values '[c, d, e]', the attribute values would be '[c, d, e]'.",
        "produces": [
          "application/json"
        ],
        "summary": "Update an organization's site-level attributes.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Organizations-updateOrganizationSiteAttribute"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "The requested resource has been deleted."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "name": "name",
            "type": "string",
            "description": "The name of the attribute to be deleted.",
            "in": "path"
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Delete a site-level attribute of an organization.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete a site-level attribute of an organization.",
        "operationId": "Organizations-deleteOrganizationSiteAttribute"
      }
    },
    "/rest/admin/v2/organizations/{id}/store-attributes": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "description": "A list of custom attributes.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "items": {
                  "type": "array",
                  "items": {
                    "description": "A custom attribute that is associated with a user or organization and that applies to a specific store.",
                    "properties": {
                      "name": {
                        "description": "The name of the custom attribute.",
                        "type": "string"
                      },
                      "storeId": {
                        "description": "The unique numeric ID of the store where the attribute applies. This parameter can only be set at attribute creation time.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "values": {
                        "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "2019-01-11 10:44:30.360000"
                        }
                      }
                    }
                  },
                  "description": "The items."
                },
                "limit": {
                  "description": "The maximum number of records to return.",
                  "format": "int32",
                  "maximum": 500,
                  "type": "integer"
                },
                "offset": {
                  "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID of the store where the attribute applies.",
            "in": "query",
            "name": "storeId"
          },
          {
            "default": 0,
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "default": 100000,
            "description": "The maximum number of records to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Get an organization's store-specific attributes.",
        "produces": [
          "application/json"
        ],
        "summary": "Get an organization's store-specific attributes.",
        "operationId": "Organizations-findStoreMemberAttributesByOrganizationId"
      },
      "post": {
        "responses": {
          "201": {
            "description": "The requested resource has been created.",
            "headers": {
              "Location": {
                "description": "Link to the newly created resource.",
                "type": "string"
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that applies to a specific store.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "storeId": {
                  "description": "The unique numeric ID of the store where the attribute applies. This parameter can only be set at attribute creation time.",
                  "type": "integer",
                  "format": "int32"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Create a store-specific organization attribute.",
        "produces": [
          "application/json"
        ],
        "summary": "Create a store-specific organization attribute.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Organizations-createOrganizationStoreMemberAttribute"
      }
    },
    "/rest/admin/v2/organizations/{id}/store-attributes/storeId:{storeId},name:{name}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that applies to a specific store.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "storeId": {
                  "description": "The unique numeric ID of the store where the attribute applies. This parameter can only be set at attribute creation time.",
                  "type": "integer",
                  "format": "int32"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID of the store where the attribute applies.",
            "in": "path",
            "name": "storeId"
          },
          {
            "required": true,
            "name": "name",
            "type": "string",
            "description": "The name of the attribute to use as the search term.",
            "in": "path"
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Get an organization's store-specific attribute by organization ID, store ID and attribute name.",
        "produces": [
          "application/json"
        ],
        "summary": "Get an organization's store-specific attribute by organization ID, store ID and attribute name.",
        "operationId": "Organizations-findStoreMemberAttributeByOrganizationId"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID of the store where the attribute applies.",
            "in": "path",
            "name": "storeId"
          },
          {
            "required": true,
            "type": "string",
            "description": "The name of this attribute.",
            "in": "path",
            "name": "name"
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that applies to a specific store.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "storeId": {
                  "description": "The unique numeric ID of the store where the attribute applies. This parameter can only be set at attribute creation time.",
                  "type": "integer",
                  "format": "int32"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Update an organization's store-specific attributes. Attribute values are merged at the attribute level, rather than the attribute value level. For example, if an attribute has the following values '[a, b]', after performing an update using values '[c, d, e]', the attribute values would be '[c, d, e]'.",
        "produces": [
          "application/json"
        ],
        "summary": "Update an organization's store-specific attributes.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Organizations-updateOrganizationStoreMemberAttribute"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "The requested resource has been deleted."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "name": "storeId",
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID of the store where the attribute applies.",
            "in": "path"
          },
          {
            "required": true,
            "name": "name",
            "type": "string",
            "description": "The name of the attribute to be deleted.",
            "in": "path"
          }
        ],
        "tags": [
          "Organizations"
        ],
        "description": "Delete a store-specific attribute of an organization.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete a store-specific attribute of an organization.",
        "operationId": "Organizations-deleteOrganizationStoreMemberAttribute"
      }
    },
    "/rest/admin/v2/users/manageable": {
      "get": {
        "responses": {
          "200": {
            "description": "The request completed successfully.",
            "schema": {
              "description": "The model for list of users.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "type": "integer",
                  "format": "int64",
                  "minimum": 0
                },
                "items": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The unique numeric ID for identifying the user."
                      },
                      "address": {
                        "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The unique numeric ID for identifying the address."
                          },
                          "address1": {
                            "type": "string",
                            "description": "The first address line of the street address."
                          },
                          "address2": {
                            "type": "string",
                            "description": "The second address line of the street address."
                          },
                          "address3": {
                            "type": "string",
                            "description": "The third address line of the street address."
                          },
                          "addressType": {
                            "type": "string",
                            "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                          },
                          "bestCallingTime": {
                            "type": "string",
                            "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                          },
                          "billingCode": {
                            "type": "string",
                            "description": "A code to identify the shipping or billing information."
                          },
                          "billingCodeType": {
                            "type": "string",
                            "description": "The code for identifying the system or method of code structure that is used for billing."
                          },
                          "businessTitle": {
                            "type": "string",
                            "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                          },
                          "city": {
                            "type": "string",
                            "description": "The name of the city where the user or organization resides."
                          },
                          "country": {
                            "type": "string",
                            "description": "The name of the country or region where the user or organization resides."
                          },
                          "createdDateTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time that the address was created."
                          },
                          "email1": {
                            "type": "string",
                            "description": "The primary e-mail."
                          },
                          "email2": {
                            "type": "string",
                            "description": "The secondary e-mail."
                          },
                          "fax1": {
                            "type": "string",
                            "description": "The primary facsimile number."
                          },
                          "fax2": {
                            "type": "string",
                            "description": "The secondary facsimile number."
                          },
                          "field1": {
                            "type": "string",
                            "description": "A customizable field."
                          },
                          "field2": {
                            "type": "string",
                            "description": "A customizable field."
                          },
                          "field3": {
                            "type": "string",
                            "description": "A customizable field."
                          },
                          "firstName": {
                            "type": "string",
                            "description": "The first name of the user."
                          },
                          "lastName": {
                            "type": "string",
                            "description": "The last name of the user."
                          },
                          "memberId": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                          },
                          "middleName": {
                            "type": "string",
                            "description": "The middle name or initial of the user."
                          },
                          "mobilePhone1": {
                            "type": "string",
                            "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                          },
                          "mobilePhone1Country": {
                            "type": "string",
                            "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                          },
                          "nickName": {
                            "type": "string",
                            "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                          },
                          "officeAddress": {
                            "type": "string",
                            "description": "The internal office address line, such as the internal designation for an employee's desk location."
                          },
                          "organizationName": {
                            "type": "string",
                            "description": "The name of the organization to which the address information applies, if this is a business address."
                          },
                          "organizationUnitName": {
                            "type": "string",
                            "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                          },
                          "packageSuppression": {
                            "type": "integer",
                            "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                          },
                          "personTitle": {
                            "type": "string",
                            "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                          },
                          "phone1": {
                            "type": "string",
                            "description": "The primary phone number."
                          },
                          "phone1Type": {
                            "type": "string",
                            "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                          },
                          "phone2": {
                            "type": "string",
                            "description": "The secondary phone number."
                          },
                          "phone2Type": {
                            "type": "string",
                            "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                          },
                          "primary": {
                            "type": "integer",
                            "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                          },
                          "publishPhone1": {
                            "type": "integer",
                            "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                          },
                          "publishPhone2": {
                            "type": "integer",
                            "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                          },
                          "selfAddress": {
                            "type": "integer",
                            "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                            "readOnly": true
                          },
                          "shippingGeoCode": {
                            "type": "string",
                            "description": "The geographical code that identifies a region for the shipping purposes."
                          },
                          "state": {
                            "type": "string",
                            "description": "The name of the state, province, or equivalent where the user or organization resides."
                          },
                          "status": {
                            "type": "string",
                            "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                            "readOnly": true
                          },
                          "taxGeoCode": {
                            "type": "string",
                            "description": "The geographical tax code that identifies a region for the tax purposes."
                          },
                          "zipCode": {
                            "type": "string",
                            "description": "The ZIP or postal code of the user's address."
                          }
                        }
                      },
                      "age": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The registrant's age."
                      },
                      "approvalState": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The registrant's approval status. Supported values are 0 (pending approval), 1 (approved), 2 (rejected), 3 (pending email activation) and null (approval not applicable, so considered approved).",
                        "readOnly": true
                      },
                      "createdDateTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time that the registrant was registered."
                      },
                      "dateOfBirth": {
                        "type": "string",
                        "format": "date",
                        "description": "The registrant's date of birth."
                      },
                      "departmentNumber": {
                        "type": "string",
                        "description": "The department identifier for the registrant."
                      },
                      "description": {
                        "type": "string",
                        "description": "A description of the registrant."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Name that is used when the name of the registrant displays in a summary list."
                      },
                      "distinguishedName": {
                        "type": "string",
                        "description": "Distinguished name (DN) of the registrant, for LDAP use.",
                        "readOnly": true
                      },
                      "employeeId": {
                        "type": "string",
                        "description": "The registrant's ID with their employer."
                      },
                      "employeeType": {
                        "type": "string",
                        "description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time)."
                      },
                      "gender": {
                        "type": "string",
                        "description": "The registrant's gender."
                      },
                      "updatedDateTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time representing the most recent update to the registrant's information."
                      },
                      "lastSession": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time representing the most recent login time of the user."
                      },
                      "logonId": {
                        "type": "string",
                        "description": "The registrant's logon ID. Leading and trailing spaces are trimmed. When the system is configured with LDAP, the following restrictions apply, since the logonId is part of the distinguished name: Must not begin with a '#'; Must not contain equals sign, comma, plus sign, quotation mark, backslash, angle brackets or semicolon."
                      },
                      "manager": {
                        "type": "string",
                        "description": "The name of the registrant's manager."
                      },
                      "parentOrganizationId": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "description": "The identifier of the registrant's company."
                      },
                      "parentOrganizationName": {
                        "type": "string",
                        "description": "The name of the organization that the registrant represents."
                      },
                      "password": {
                        "type": "string",
                        "description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server. This parameter is only specififed during user creation/update and will never be returned in the response."
                      },
                      "passwordVerify": {
                        "type": "string",
                        "description": "The registrant's password, entered a second time. This parameter is only specififed during user creation/update and will never be returned in the response."
                      },
                      "personTitle": {
                        "type": "string",
                        "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr., or Ms.)."
                      },
                      "preferredCurrency": {
                        "type": "string",
                        "description": "The registrant's preferred currency for transactions."
                      },
                      "preferredLanguageId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The unique numeric ID for identifying registrant's preferred language."
                      },
                      "profileType": {
                        "default": "B",
                        "description": "The registrant's user profile type. Available values: <br>* B - A business user profile.<br>* C - A customer user profile.",
                        "enum": [
                          "B",
                          "C"
                        ],
                        "type": "string",
                        "readOnly": true
                      },
                      "receiveSmsNotification": {
                        "type": "boolean",
                        "description": "Indicates whether the user wants to receive order notification SMS text messages."
                      },
                      "registrationType": {
                        "type": "string",
                        "description": "The registrant's registration type. Supported values are S (Site Administrator), A (Sell-side Administrator), R (Registered Customer) and G (Guest Customer).",
                        "readOnly": true
                      },
                      "secretary": {
                        "type": "string",
                        "description": "The name of the registrant's secretary."
                      },
                      "status": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Whether or not the user's account is enabled. Supported values are 1 (enabled) and 0 (disabled)."
                      },
                      "userAccountPolicyId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The unique numeric ID for identifying a user account policy."
                      }
                    }
                  },
                  "description": "The items."
                },
                "limit": {
                  "description": "The maximum number of records to return.",
                  "format": "int32",
                  "maximum": 500,
                  "type": "integer"
                },
                "offset": {
                  "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. Some of the inputs provided to the request are not valid."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "default": 0,
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "description": "The maximum number of records to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "description": "Limits search results to only include users whose last name matches the value of this parameter.",
            "in": "query",
            "name": "lastName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limits search results to only include users whose first name matches the value of this parameter.",
            "in": "query",
            "name": "firstName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limits search results to only include users whose logon ID matches the value of this parameter.",
            "in": "query",
            "name": "logonId",
            "required": false,
            "type": "string"
          },
          {
            "description": "The comma-separated set of properties that control the order of the listed items. Properties can be prefixed by either (-) to sort in descending order, or (+) to sort in ascending order. By default, properties are sorted in ascending order. For example, sort=name,-id will order the items first based on the name value in ascending order, and then by their ID value in descending order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Get a collection of users the currently logged in administrator user can manage.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a collection of users the currently logged in administrator user can manage.",
        "operationId": "Users-getManageableUsers"
      }
    },
    "/rest/admin/v2/users/{id}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the user."
                },
                "address": {
                  "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the address."
                    },
                    "address1": {
                      "type": "string",
                      "description": "The first address line of the street address."
                    },
                    "address2": {
                      "type": "string",
                      "description": "The second address line of the street address."
                    },
                    "address3": {
                      "type": "string",
                      "description": "The third address line of the street address."
                    },
                    "addressType": {
                      "type": "string",
                      "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                    },
                    "bestCallingTime": {
                      "type": "string",
                      "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                    },
                    "billingCode": {
                      "type": "string",
                      "description": "A code to identify the shipping or billing information."
                    },
                    "billingCodeType": {
                      "type": "string",
                      "description": "The code for identifying the system or method of code structure that is used for billing."
                    },
                    "businessTitle": {
                      "type": "string",
                      "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                    },
                    "city": {
                      "type": "string",
                      "description": "The name of the city where the user or organization resides."
                    },
                    "country": {
                      "type": "string",
                      "description": "The name of the country or region where the user or organization resides."
                    },
                    "createdDateTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time that the address was created."
                    },
                    "email1": {
                      "type": "string",
                      "description": "The primary e-mail."
                    },
                    "email2": {
                      "type": "string",
                      "description": "The secondary e-mail."
                    },
                    "fax1": {
                      "type": "string",
                      "description": "The primary facsimile number."
                    },
                    "fax2": {
                      "type": "string",
                      "description": "The secondary facsimile number."
                    },
                    "field1": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field2": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field3": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "firstName": {
                      "type": "string",
                      "description": "The first name of the user."
                    },
                    "lastName": {
                      "type": "string",
                      "description": "The last name of the user."
                    },
                    "memberId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                    },
                    "middleName": {
                      "type": "string",
                      "description": "The middle name or initial of the user."
                    },
                    "mobilePhone1": {
                      "type": "string",
                      "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                    },
                    "mobilePhone1Country": {
                      "type": "string",
                      "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                    },
                    "nickName": {
                      "type": "string",
                      "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                    },
                    "officeAddress": {
                      "type": "string",
                      "description": "The internal office address line, such as the internal designation for an employee's desk location."
                    },
                    "organizationName": {
                      "type": "string",
                      "description": "The name of the organization to which the address information applies, if this is a business address."
                    },
                    "organizationUnitName": {
                      "type": "string",
                      "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                    },
                    "packageSuppression": {
                      "type": "integer",
                      "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                    },
                    "personTitle": {
                      "type": "string",
                      "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                    },
                    "phone1": {
                      "type": "string",
                      "description": "The primary phone number."
                    },
                    "phone1Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "phone2": {
                      "type": "string",
                      "description": "The secondary phone number."
                    },
                    "phone2Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "primary": {
                      "type": "integer",
                      "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                    },
                    "publishPhone1": {
                      "type": "integer",
                      "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "publishPhone2": {
                      "type": "integer",
                      "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "selfAddress": {
                      "type": "integer",
                      "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                      "readOnly": true
                    },
                    "shippingGeoCode": {
                      "type": "string",
                      "description": "The geographical code that identifies a region for the shipping purposes."
                    },
                    "state": {
                      "type": "string",
                      "description": "The name of the state, province, or equivalent where the user or organization resides."
                    },
                    "status": {
                      "type": "string",
                      "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                      "readOnly": true
                    },
                    "taxGeoCode": {
                      "type": "string",
                      "description": "The geographical tax code that identifies a region for the tax purposes."
                    },
                    "zipCode": {
                      "type": "string",
                      "description": "The ZIP or postal code of the user's address."
                    }
                  }
                },
                "age": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The registrant's age."
                },
                "approvalState": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The registrant's approval status. Supported values are 0 (pending approval), 1 (approved), 2 (rejected), 3 (pending email activation) and null (approval not applicable, so considered approved).",
                  "readOnly": true
                },
                "createdDateTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time that the registrant was registered."
                },
                "dateOfBirth": {
                  "type": "string",
                  "format": "date",
                  "description": "The registrant's date of birth."
                },
                "departmentNumber": {
                  "type": "string",
                  "description": "The department identifier for the registrant."
                },
                "description": {
                  "type": "string",
                  "description": "A description of the registrant."
                },
                "displayName": {
                  "type": "string",
                  "description": "Name that is used when the name of the registrant displays in a summary list."
                },
                "distinguishedName": {
                  "type": "string",
                  "description": "Distinguished name (DN) of the registrant, for LDAP use.",
                  "readOnly": true
                },
                "employeeId": {
                  "type": "string",
                  "description": "The registrant's ID with their employer."
                },
                "employeeType": {
                  "type": "string",
                  "description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time)."
                },
                "gender": {
                  "type": "string",
                  "description": "The registrant's gender."
                },
                "updatedDateTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time representing the most recent update to the registrant's information."
                },
                "lastSession": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time representing the most recent login time of the user."
                },
                "logonId": {
                  "type": "string",
                  "description": "The registrant's logon ID. Leading and trailing spaces are trimmed. When the system is configured with LDAP, the following restrictions apply, since the logonId is part of the distinguished name: Must not begin with a '#'; Must not contain equals sign, comma, plus sign, quotation mark, backslash, angle brackets or semicolon."
                },
                "manager": {
                  "type": "string",
                  "description": "The name of the registrant's manager."
                },
                "parentOrganizationId": {
                  "type": "integer",
                  "format": "int64",
                  "readOnly": true,
                  "description": "The identifier of the registrant's company."
                },
                "parentOrganizationName": {
                  "type": "string",
                  "description": "The name of the organization that the registrant represents."
                },
                "password": {
                  "type": "string",
                  "description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server. This parameter is only specififed during user creation/update and will never be returned in the response."
                },
                "passwordVerify": {
                  "type": "string",
                  "description": "The registrant's password, entered a second time. This parameter is only specififed during user creation/update and will never be returned in the response."
                },
                "personTitle": {
                  "type": "string",
                  "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr., or Ms.)."
                },
                "preferredCurrency": {
                  "type": "string",
                  "description": "The registrant's preferred currency for transactions."
                },
                "preferredLanguageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying registrant's preferred language."
                },
                "profileType": {
                  "default": "B",
                  "description": "The registrant's user profile type. Available values: <br>* B - A business user profile.<br>* C - A customer user profile.",
                  "enum": [
                    "B",
                    "C"
                  ],
                  "type": "string",
                  "readOnly": true
                },
                "receiveSmsNotification": {
                  "type": "boolean",
                  "description": "Indicates whether the user wants to receive order notification SMS text messages."
                },
                "registrationType": {
                  "type": "string",
                  "description": "The registrant's registration type. Supported values are S (Site Administrator), A (Sell-side Administrator), R (Registered Customer) and G (Guest Customer).",
                  "readOnly": true
                },
                "secretary": {
                  "type": "string",
                  "description": "The name of the registrant's secretary."
                },
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Whether or not the user's account is enabled. Supported values are 1 (enabled) and 0 (disabled)."
                },
                "userAccountPolicyId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying a user account policy."
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Get a user by ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a user by ID.",
        "operationId": "Users-findByUserId"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "required": false,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the user."
                },
                "address": {
                  "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the address."
                    },
                    "address1": {
                      "type": "string",
                      "description": "The first address line of the street address."
                    },
                    "address2": {
                      "type": "string",
                      "description": "The second address line of the street address."
                    },
                    "address3": {
                      "type": "string",
                      "description": "The third address line of the street address."
                    },
                    "addressType": {
                      "type": "string",
                      "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                    },
                    "bestCallingTime": {
                      "type": "string",
                      "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                    },
                    "billingCode": {
                      "type": "string",
                      "description": "A code to identify the shipping or billing information."
                    },
                    "billingCodeType": {
                      "type": "string",
                      "description": "The code for identifying the system or method of code structure that is used for billing."
                    },
                    "businessTitle": {
                      "type": "string",
                      "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                    },
                    "city": {
                      "type": "string",
                      "description": "The name of the city where the user or organization resides."
                    },
                    "country": {
                      "type": "string",
                      "description": "The name of the country or region where the user or organization resides."
                    },
                    "createdDateTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time that the address was created."
                    },
                    "email1": {
                      "type": "string",
                      "description": "The primary e-mail."
                    },
                    "email2": {
                      "type": "string",
                      "description": "The secondary e-mail."
                    },
                    "fax1": {
                      "type": "string",
                      "description": "The primary facsimile number."
                    },
                    "fax2": {
                      "type": "string",
                      "description": "The secondary facsimile number."
                    },
                    "field1": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field2": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field3": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "firstName": {
                      "type": "string",
                      "description": "The first name of the user."
                    },
                    "lastName": {
                      "type": "string",
                      "description": "The last name of the user."
                    },
                    "memberId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                    },
                    "middleName": {
                      "type": "string",
                      "description": "The middle name or initial of the user."
                    },
                    "mobilePhone1": {
                      "type": "string",
                      "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                    },
                    "mobilePhone1Country": {
                      "type": "string",
                      "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                    },
                    "nickName": {
                      "type": "string",
                      "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                    },
                    "officeAddress": {
                      "type": "string",
                      "description": "The internal office address line, such as the internal designation for an employee's desk location."
                    },
                    "organizationName": {
                      "type": "string",
                      "description": "The name of the organization to which the address information applies, if this is a business address."
                    },
                    "organizationUnitName": {
                      "type": "string",
                      "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                    },
                    "packageSuppression": {
                      "type": "integer",
                      "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                    },
                    "personTitle": {
                      "type": "string",
                      "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                    },
                    "phone1": {
                      "type": "string",
                      "description": "The primary phone number."
                    },
                    "phone1Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "phone2": {
                      "type": "string",
                      "description": "The secondary phone number."
                    },
                    "phone2Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "primary": {
                      "type": "integer",
                      "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                    },
                    "publishPhone1": {
                      "type": "integer",
                      "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "publishPhone2": {
                      "type": "integer",
                      "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "selfAddress": {
                      "type": "integer",
                      "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                      "readOnly": true
                    },
                    "shippingGeoCode": {
                      "type": "string",
                      "description": "The geographical code that identifies a region for the shipping purposes."
                    },
                    "state": {
                      "type": "string",
                      "description": "The name of the state, province, or equivalent where the user or organization resides."
                    },
                    "status": {
                      "type": "string",
                      "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                      "readOnly": true
                    },
                    "taxGeoCode": {
                      "type": "string",
                      "description": "The geographical tax code that identifies a region for the tax purposes."
                    },
                    "zipCode": {
                      "type": "string",
                      "description": "The ZIP or postal code of the user's address."
                    }
                  }
                },
                "age": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The registrant's age."
                },
                "approvalState": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The registrant's approval status. Supported values are 0 (pending approval), 1 (approved), 2 (rejected), 3 (pending email activation) and null (approval not applicable, so considered approved).",
                  "readOnly": true
                },
                "createdDateTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time that the registrant was registered."
                },
                "dateOfBirth": {
                  "type": "string",
                  "format": "date",
                  "description": "The registrant's date of birth."
                },
                "departmentNumber": {
                  "type": "string",
                  "description": "The department identifier for the registrant."
                },
                "description": {
                  "type": "string",
                  "description": "A description of the registrant."
                },
                "displayName": {
                  "type": "string",
                  "description": "Name that is used when the name of the registrant displays in a summary list."
                },
                "distinguishedName": {
                  "type": "string",
                  "description": "Distinguished name (DN) of the registrant, for LDAP use.",
                  "readOnly": true
                },
                "employeeId": {
                  "type": "string",
                  "description": "The registrant's ID with their employer."
                },
                "employeeType": {
                  "type": "string",
                  "description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time)."
                },
                "gender": {
                  "type": "string",
                  "description": "The registrant's gender."
                },
                "updatedDateTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time representing the most recent update to the registrant's information."
                },
                "lastSession": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time representing the most recent login time of the user."
                },
                "logonId": {
                  "type": "string",
                  "description": "The registrant's logon ID. Leading and trailing spaces are trimmed. When the system is configured with LDAP, the following restrictions apply, since the logonId is part of the distinguished name: Must not begin with a '#'; Must not contain equals sign, comma, plus sign, quotation mark, backslash, angle brackets or semicolon."
                },
                "manager": {
                  "type": "string",
                  "description": "The name of the registrant's manager."
                },
                "parentOrganizationId": {
                  "type": "integer",
                  "format": "int64",
                  "readOnly": true,
                  "description": "The identifier of the registrant's company."
                },
                "parentOrganizationName": {
                  "type": "string",
                  "description": "The name of the organization that the registrant represents."
                },
                "password": {
                  "type": "string",
                  "description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server. This parameter is only specififed during user creation/update and will never be returned in the response."
                },
                "passwordVerify": {
                  "type": "string",
                  "description": "The registrant's password, entered a second time. This parameter is only specififed during user creation/update and will never be returned in the response."
                },
                "personTitle": {
                  "type": "string",
                  "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr., or Ms.)."
                },
                "preferredCurrency": {
                  "type": "string",
                  "description": "The registrant's preferred currency for transactions."
                },
                "preferredLanguageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying registrant's preferred language."
                },
                "profileType": {
                  "default": "B",
                  "description": "The registrant's user profile type. Available values: <br>* B - A business user profile.<br>* C - A customer user profile.",
                  "enum": [
                    "B",
                    "C"
                  ],
                  "type": "string",
                  "readOnly": true
                },
                "receiveSmsNotification": {
                  "type": "boolean",
                  "description": "Indicates whether the user wants to receive order notification SMS text messages."
                },
                "registrationType": {
                  "type": "string",
                  "description": "The registrant's registration type. Supported values are S (Site Administrator), A (Sell-side Administrator), R (Registered Customer) and G (Guest Customer).",
                  "readOnly": true
                },
                "secretary": {
                  "type": "string",
                  "description": "The name of the registrant's secretary."
                },
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Whether or not the user's account is enabled. Supported values are 1 (enabled) and 0 (disabled)."
                },
                "userAccountPolicyId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying a user account policy."
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Update a user.",
        "produces": [
          "application/json"
        ],
        "summary": "Update a user.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Users-updateUser"
      }
    },
    "/rest/admin/v2/users": {
      "post": {
        "responses": {
          "201": {
            "description": "The requested resource has been created.",
            "headers": {
              "Location": {
                "description": "Link to the newly created resource.",
                "type": "string"
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the user."
                },
                "address": {
                  "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the address."
                    },
                    "address1": {
                      "type": "string",
                      "description": "The first address line of the street address."
                    },
                    "address2": {
                      "type": "string",
                      "description": "The second address line of the street address."
                    },
                    "address3": {
                      "type": "string",
                      "description": "The third address line of the street address."
                    },
                    "addressType": {
                      "type": "string",
                      "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                    },
                    "bestCallingTime": {
                      "type": "string",
                      "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                    },
                    "billingCode": {
                      "type": "string",
                      "description": "A code to identify the shipping or billing information."
                    },
                    "billingCodeType": {
                      "type": "string",
                      "description": "The code for identifying the system or method of code structure that is used for billing."
                    },
                    "businessTitle": {
                      "type": "string",
                      "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                    },
                    "city": {
                      "type": "string",
                      "description": "The name of the city where the user or organization resides."
                    },
                    "country": {
                      "type": "string",
                      "description": "The name of the country or region where the user or organization resides."
                    },
                    "createdDateTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time that the address was created."
                    },
                    "email1": {
                      "type": "string",
                      "description": "The primary e-mail."
                    },
                    "email2": {
                      "type": "string",
                      "description": "The secondary e-mail."
                    },
                    "fax1": {
                      "type": "string",
                      "description": "The primary facsimile number."
                    },
                    "fax2": {
                      "type": "string",
                      "description": "The secondary facsimile number."
                    },
                    "field1": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field2": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "field3": {
                      "type": "string",
                      "description": "A customizable field."
                    },
                    "firstName": {
                      "type": "string",
                      "description": "The first name of the user."
                    },
                    "lastName": {
                      "type": "string",
                      "description": "The last name of the user."
                    },
                    "memberId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                    },
                    "middleName": {
                      "type": "string",
                      "description": "The middle name or initial of the user."
                    },
                    "mobilePhone1": {
                      "type": "string",
                      "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                    },
                    "mobilePhone1Country": {
                      "type": "string",
                      "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                    },
                    "nickName": {
                      "type": "string",
                      "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                    },
                    "officeAddress": {
                      "type": "string",
                      "description": "The internal office address line, such as the internal designation for an employee's desk location."
                    },
                    "organizationName": {
                      "type": "string",
                      "description": "The name of the organization to which the address information applies, if this is a business address."
                    },
                    "organizationUnitName": {
                      "type": "string",
                      "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                    },
                    "packageSuppression": {
                      "type": "integer",
                      "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                    },
                    "personTitle": {
                      "type": "string",
                      "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                    },
                    "phone1": {
                      "type": "string",
                      "description": "The primary phone number."
                    },
                    "phone1Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "phone2": {
                      "type": "string",
                      "description": "The secondary phone number."
                    },
                    "phone2Type": {
                      "type": "string",
                      "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                    },
                    "primary": {
                      "type": "integer",
                      "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                    },
                    "publishPhone1": {
                      "type": "integer",
                      "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "publishPhone2": {
                      "type": "integer",
                      "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                    },
                    "selfAddress": {
                      "type": "integer",
                      "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                      "readOnly": true
                    },
                    "shippingGeoCode": {
                      "type": "string",
                      "description": "The geographical code that identifies a region for the shipping purposes."
                    },
                    "state": {
                      "type": "string",
                      "description": "The name of the state, province, or equivalent where the user or organization resides."
                    },
                    "status": {
                      "type": "string",
                      "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                      "readOnly": true
                    },
                    "taxGeoCode": {
                      "type": "string",
                      "description": "The geographical tax code that identifies a region for the tax purposes."
                    },
                    "zipCode": {
                      "type": "string",
                      "description": "The ZIP or postal code of the user's address."
                    }
                  }
                },
                "age": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The registrant's age."
                },
                "approvalState": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The registrant's approval status. Supported values are 0 (pending approval), 1 (approved), 2 (rejected), 3 (pending email activation) and null (approval not applicable, so considered approved).",
                  "readOnly": true
                },
                "createdDateTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time that the registrant was registered."
                },
                "dateOfBirth": {
                  "type": "string",
                  "format": "date",
                  "description": "The registrant's date of birth."
                },
                "departmentNumber": {
                  "type": "string",
                  "description": "The department identifier for the registrant."
                },
                "description": {
                  "type": "string",
                  "description": "A description of the registrant."
                },
                "displayName": {
                  "type": "string",
                  "description": "Name that is used when the name of the registrant displays in a summary list."
                },
                "distinguishedName": {
                  "type": "string",
                  "description": "Distinguished name (DN) of the registrant, for LDAP use.",
                  "readOnly": true
                },
                "employeeId": {
                  "type": "string",
                  "description": "The registrant's ID with their employer."
                },
                "employeeType": {
                  "type": "string",
                  "description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time)."
                },
                "gender": {
                  "type": "string",
                  "description": "The registrant's gender."
                },
                "updatedDateTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time representing the most recent update to the registrant's information."
                },
                "lastSession": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time representing the most recent login time of the user."
                },
                "logonId": {
                  "type": "string",
                  "description": "The registrant's logon ID. Leading and trailing spaces are trimmed. When the system is configured with LDAP, the following restrictions apply, since the logonId is part of the distinguished name: Must not begin with a '#'; Must not contain equals sign, comma, plus sign, quotation mark, backslash, angle brackets or semicolon."
                },
                "manager": {
                  "type": "string",
                  "description": "The name of the registrant's manager."
                },
                "parentOrganizationId": {
                  "type": "integer",
                  "format": "int64",
                  "readOnly": true,
                  "description": "The identifier of the registrant's company."
                },
                "parentOrganizationName": {
                  "type": "string",
                  "description": "The name of the organization that the registrant represents."
                },
                "password": {
                  "type": "string",
                  "description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server. This parameter is only specififed during user creation/update and will never be returned in the response."
                },
                "passwordVerify": {
                  "type": "string",
                  "description": "The registrant's password, entered a second time. This parameter is only specififed during user creation/update and will never be returned in the response."
                },
                "personTitle": {
                  "type": "string",
                  "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr., or Ms.)."
                },
                "preferredCurrency": {
                  "type": "string",
                  "description": "The registrant's preferred currency for transactions."
                },
                "preferredLanguageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying registrant's preferred language."
                },
                "profileType": {
                  "default": "B",
                  "description": "The registrant's user profile type. Available values: <br>* B - A business user profile.<br>* C - A customer user profile.",
                  "enum": [
                    "B",
                    "C"
                  ],
                  "type": "string",
                  "readOnly": true
                },
                "receiveSmsNotification": {
                  "type": "boolean",
                  "description": "Indicates whether the user wants to receive order notification SMS text messages."
                },
                "registrationType": {
                  "type": "string",
                  "description": "The registrant's registration type. Supported values are S (Site Administrator), A (Sell-side Administrator), R (Registered Customer) and G (Guest Customer).",
                  "readOnly": true
                },
                "secretary": {
                  "type": "string",
                  "description": "The name of the registrant's secretary."
                },
                "status": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Whether or not the user's account is enabled. Supported values are 1 (enabled) and 0 (disabled)."
                },
                "userAccountPolicyId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying a user account policy."
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Create a user.",
        "produces": [
          "application/json"
        ],
        "summary": "Create a user.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Users-createUser"
      }
    },
    "/rest/admin/v2/users/{id}/site-attributes": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "description": "A list of custom attributes.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "items": {
                  "type": "array",
                  "items": {
                    "description": "A custom attribute that is associated with a user or organization and that is store-independent.",
                    "properties": {
                      "name": {
                        "description": "The name of the custom attribute.",
                        "type": "string"
                      },
                      "values": {
                        "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "2019-01-11 10:44:30.360000"
                        }
                      }
                    }
                  },
                  "description": "The items."
                },
                "limit": {
                  "description": "The maximum number of records to return.",
                  "format": "int32",
                  "maximum": 500,
                  "type": "integer"
                },
                "offset": {
                  "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "default": 0,
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "default": 100000,
            "description": "The maximum number of records to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Get a user's site-level, store-independent attributes.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a user's site-level, store-independent attributes.",
        "operationId": "Users-findSiteAttributesByUserId"
      },
      "post": {
        "responses": {
          "201": {
            "description": "The requested resource has been created.",
            "headers": {
              "Location": {
                "description": "Link to the newly created resource.",
                "type": "string"
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that is store-independent.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Create a user site-level attribute.",
        "produces": [
          "application/json"
        ],
        "summary": "Create a user site-level attribute.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Users-createUserSiteAttribute"
      }
    },
    "/rest/admin/v2/users/{id}/site-attributes/{name}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that is store-independent.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "name": "name",
            "type": "string",
            "description": "The name of the attribute to use as the search term.",
            "in": "path"
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Get a user's site-level, store-independent attribute by user ID and attribute name.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a user's site-level, store-independent attribute by user ID and attribute name.",
        "operationId": "Users-findSiteAttributeByUserId"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "name": "name",
            "type": "string",
            "description": "The name of the attribute to be updated.",
            "in": "path"
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that is store-independent.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Update a user's site-level attributes. Attribute values are merged at the attribute level, rather than the attribute value level. For example, if an attribute has the following values '[a, b]', after performing an update using values '[c, d, e]', the attribute values would be '[c, d, e]'.",
        "produces": [
          "application/json"
        ],
        "summary": "Update a user's site-level attributes.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Users-updateUserSiteAttribute"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "The requested resource has been deleted."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "name": "name",
            "type": "string",
            "description": "The name of the attribute to be deleted.",
            "in": "path"
          },
          {
            "default": 0,
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "default": 100000,
            "description": "The maximum number of records to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Delete a site-level attribute of a user.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete a site-level attribute of a user.",
        "operationId": "Users-deleteUserSiteAttribute"
      }
    },
    "/rest/admin/v2/users/{id}/store-attributes": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "description": "A list of custom attributes.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "items": {
                  "type": "array",
                  "items": {
                    "description": "A custom attribute that is associated with a user or organization and that applies to a specific store.",
                    "properties": {
                      "name": {
                        "description": "The name of the custom attribute.",
                        "type": "string"
                      },
                      "storeId": {
                        "description": "The unique numeric ID of the store where the attribute applies. This parameter can only be set at attribute creation time.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "values": {
                        "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "2019-01-11 10:44:30.360000"
                        }
                      }
                    }
                  },
                  "description": "The items."
                },
                "limit": {
                  "description": "The maximum number of records to return.",
                  "format": "int32",
                  "maximum": 500,
                  "type": "integer"
                },
                "offset": {
                  "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID of the store where the attribute applies.",
            "in": "query",
            "name": "storeId"
          },
          {
            "default": 0,
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "default": 100000,
            "description": "The maximum number of records to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Get a user's store-specific attributes.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a user's store-specific attributes.",
        "operationId": "Users-findStoreMemberAttributesByUserId"
      },
      "post": {
        "responses": {
          "201": {
            "description": "The requested resource has been created.",
            "headers": {
              "Location": {
                "description": "Link to the newly created resource.",
                "type": "string"
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that applies to a specific store.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "storeId": {
                  "description": "The unique numeric ID of the store where the attribute applies. This parameter can only be set at attribute creation time.",
                  "type": "integer",
                  "format": "int32"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Create a store-specific user attribute.",
        "produces": [
          "application/json"
        ],
        "summary": "Create a store-specific user attribute.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Users-createUserStoreMemberAttribute"
      }
    },
    "/rest/admin/v2/users/{id}/store-attributes/storeId:{storeId},name:{name}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that applies to a specific store.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "storeId": {
                  "description": "The unique numeric ID of the store where the attribute applies. This parameter can only be set at attribute creation time.",
                  "type": "integer",
                  "format": "int32"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID of the store where the attribute applies.",
            "in": "path",
            "name": "storeId"
          },
          {
            "required": true,
            "name": "name",
            "type": "string",
            "description": "The name of the attribute to use as the search term.",
            "in": "path"
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Get a user's store-specific attribute by user ID, store ID and attribute name.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a user's store-specific attribute by user ID, store ID and attribute name.",
        "operationId": "Users-findStoreMemberAttributeByUserId"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID of the store where the attribute applies.",
            "in": "path",
            "name": "storeId"
          },
          {
            "required": true,
            "type": "string",
            "description": "The name of this attribute.",
            "in": "path",
            "name": "name"
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "A custom attribute that is associated with a user or organization and that applies to a specific store.",
              "properties": {
                "name": {
                  "description": "The name of the custom attribute.",
                  "type": "string"
                },
                "storeId": {
                  "description": "The unique numeric ID of the store where the attribute applies. This parameter can only be set at attribute creation time.",
                  "type": "integer",
                  "format": "int32"
                },
                "values": {
                  "description": "The value or values of the custom attribute. The data type of an attribute value can vary depending on the attribute. Ensure that any value specified is a valid string representation of the attribute's data type. The supported data types are INTEGER, STRING, FLOAT and DATETIME.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "2019-01-11 10:44:30.360000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Update a user's store-specific attributes. Attribute values are merged at the attribute level, rather than the attribute value level. For example, if an attribute has the following values '[a, b]', after performing an update using values '[c, d, e]', the attribute values would be '[c, d, e]'.",
        "produces": [
          "application/json"
        ],
        "summary": "Update a user's store-specific attributes.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Users-updateUserStoreMemberAttribute"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "The requested resource has been deleted."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user.",
            "in": "path",
            "name": "id"
          },
          {
            "required": true,
            "name": "storeId",
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID of the store where the attribute applies.",
            "in": "path"
          },
          {
            "required": true,
            "name": "name",
            "type": "string",
            "description": "The name of the attribute to be deleted.",
            "in": "path"
          }
        ],
        "tags": [
          "Users"
        ],
        "description": "Delete a store-specific attribute of a user.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete a store-specific attribute of a user.",
        "operationId": "Users-deleteUserStoreMemberAttribute"
      }
    },
    "/rest/admin/v2/addresses": {
      "get": {
        "responses": {
          "200": {
            "description": "The request completed successfully.",
            "schema": {
              "description": "The model for list of addresses.",
              "properties": {
                "count": {
                  "description": "The total number of item records that match the query parameters.",
                  "type": "integer",
                  "format": "int64",
                  "minimum": 0
                },
                "items": {
                  "type": "array",
                  "items": {
                    "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The unique numeric ID for identifying the address."
                      },
                      "address1": {
                        "type": "string",
                        "description": "The first address line of the street address."
                      },
                      "address2": {
                        "type": "string",
                        "description": "The second address line of the street address."
                      },
                      "address3": {
                        "type": "string",
                        "description": "The third address line of the street address."
                      },
                      "addressType": {
                        "type": "string",
                        "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                      },
                      "bestCallingTime": {
                        "type": "string",
                        "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                      },
                      "billingCode": {
                        "type": "string",
                        "description": "A code to identify the shipping or billing information."
                      },
                      "billingCodeType": {
                        "type": "string",
                        "description": "The code for identifying the system or method of code structure that is used for billing."
                      },
                      "businessTitle": {
                        "type": "string",
                        "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                      },
                      "city": {
                        "type": "string",
                        "description": "The name of the city where the user or organization resides."
                      },
                      "country": {
                        "type": "string",
                        "description": "The name of the country or region where the user or organization resides."
                      },
                      "createdDateTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time that the address was created."
                      },
                      "email1": {
                        "type": "string",
                        "description": "The primary e-mail."
                      },
                      "email2": {
                        "type": "string",
                        "description": "The secondary e-mail."
                      },
                      "fax1": {
                        "type": "string",
                        "description": "The primary facsimile number."
                      },
                      "fax2": {
                        "type": "string",
                        "description": "The secondary facsimile number."
                      },
                      "field1": {
                        "type": "string",
                        "description": "A customizable field."
                      },
                      "field2": {
                        "type": "string",
                        "description": "A customizable field."
                      },
                      "field3": {
                        "type": "string",
                        "description": "A customizable field."
                      },
                      "firstName": {
                        "type": "string",
                        "description": "The first name of the user."
                      },
                      "lastName": {
                        "type": "string",
                        "description": "The last name of the user."
                      },
                      "memberId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                      },
                      "middleName": {
                        "type": "string",
                        "description": "The middle name or initial of the user."
                      },
                      "mobilePhone1": {
                        "type": "string",
                        "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                      },
                      "mobilePhone1Country": {
                        "type": "string",
                        "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                      },
                      "nickName": {
                        "type": "string",
                        "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                      },
                      "officeAddress": {
                        "type": "string",
                        "description": "The internal office address line, such as the internal designation for an employee's desk location."
                      },
                      "organizationName": {
                        "type": "string",
                        "description": "The name of the organization to which the address information applies, if this is a business address."
                      },
                      "organizationUnitName": {
                        "type": "string",
                        "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                      },
                      "packageSuppression": {
                        "type": "integer",
                        "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                      },
                      "personTitle": {
                        "type": "string",
                        "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                      },
                      "phone1": {
                        "type": "string",
                        "description": "The primary phone number."
                      },
                      "phone1Type": {
                        "type": "string",
                        "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                      },
                      "phone2": {
                        "type": "string",
                        "description": "The secondary phone number."
                      },
                      "phone2Type": {
                        "type": "string",
                        "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                      },
                      "primary": {
                        "type": "integer",
                        "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                      },
                      "publishPhone1": {
                        "type": "integer",
                        "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                      },
                      "publishPhone2": {
                        "type": "integer",
                        "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                      },
                      "selfAddress": {
                        "type": "integer",
                        "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                        "readOnly": true
                      },
                      "shippingGeoCode": {
                        "type": "string",
                        "description": "The geographical code that identifies a region for the shipping purposes."
                      },
                      "state": {
                        "type": "string",
                        "description": "The name of the state, province, or equivalent where the user or organization resides."
                      },
                      "status": {
                        "type": "string",
                        "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                        "readOnly": true
                      },
                      "taxGeoCode": {
                        "type": "string",
                        "description": "The geographical tax code that identifies a region for the tax purposes."
                      },
                      "zipCode": {
                        "type": "string",
                        "description": "The ZIP or postal code of the user's address."
                      }
                    }
                  },
                  "description": "The items."
                },
                "limit": {
                  "description": "The maximum number of records to return.",
                  "format": "int32",
                  "maximum": 500,
                  "type": "integer"
                },
                "offset": {
                  "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. Some of the inputs provided to the request are not valid."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned."
          },
          {
            "default": 0,
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "description": "The maximum number of records to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "description": "Limits search results to only include users whose last name matches the value of this parameter.",
            "in": "query",
            "name": "lastName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limits search results to only include users whose first name matches the value of this parameter.",
            "in": "query",
            "name": "firstName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Limits search results to only include users whose member ID matches the value of this parameter.",
            "in": "query",
            "name": "memberId",
            "required": false,
            "type": "string"
          },
          {
            "description": "The comma-separated set of properties that control the order of the listed items. Properties can be prefixed by either (-) to sort in descending order, or (+) to sort in ascending order. By default, properties are sorted in ascending order. For example, sort=name,-id will order the items first based on the name value in ascending order, and then by their ID value in descending order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Get a collection of addresses.",
        "produces": [
          "application/json"
        ],
        "summary": "Get a collection of addresses.",
        "operationId": "Addresses-getAddresses"
      },
      "post": {
        "responses": {
          "201": {
            "description": "The requested resource has been created.",
            "headers": {
              "Location": {
                "description": "Link to the newly created resource.",
                "type": "string"
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "in": "body",
            "description": "Request body. The \"id\" field will be generated and it should not be part of the request body. The \"selfAddress\" and \"status\" fields are managed and it cannot be specified.",
            "name": "body",
            "schema": {
              "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the address."
                },
                "address1": {
                  "type": "string",
                  "description": "The first address line of the street address."
                },
                "address2": {
                  "type": "string",
                  "description": "The second address line of the street address."
                },
                "address3": {
                  "type": "string",
                  "description": "The third address line of the street address."
                },
                "addressType": {
                  "type": "string",
                  "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                },
                "bestCallingTime": {
                  "type": "string",
                  "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                },
                "billingCode": {
                  "type": "string",
                  "description": "A code to identify the shipping or billing information."
                },
                "billingCodeType": {
                  "type": "string",
                  "description": "The code for identifying the system or method of code structure that is used for billing."
                },
                "businessTitle": {
                  "type": "string",
                  "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                },
                "city": {
                  "type": "string",
                  "description": "The name of the city where the user or organization resides."
                },
                "country": {
                  "type": "string",
                  "description": "The name of the country or region where the user or organization resides."
                },
                "createdDateTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time that the address was created."
                },
                "email1": {
                  "type": "string",
                  "description": "The primary e-mail."
                },
                "email2": {
                  "type": "string",
                  "description": "The secondary e-mail."
                },
                "fax1": {
                  "type": "string",
                  "description": "The primary facsimile number."
                },
                "fax2": {
                  "type": "string",
                  "description": "The secondary facsimile number."
                },
                "field1": {
                  "type": "string",
                  "description": "A customizable field."
                },
                "field2": {
                  "type": "string",
                  "description": "A customizable field."
                },
                "field3": {
                  "type": "string",
                  "description": "A customizable field."
                },
                "firstName": {
                  "type": "string",
                  "description": "The first name of the user."
                },
                "lastName": {
                  "type": "string",
                  "description": "The last name of the user."
                },
                "memberId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                },
                "middleName": {
                  "type": "string",
                  "description": "The middle name or initial of the user."
                },
                "mobilePhone1": {
                  "type": "string",
                  "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                },
                "mobilePhone1Country": {
                  "type": "string",
                  "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                },
                "nickName": {
                  "type": "string",
                  "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                },
                "officeAddress": {
                  "type": "string",
                  "description": "The internal office address line, such as the internal designation for an employee's desk location."
                },
                "organizationName": {
                  "type": "string",
                  "description": "The name of the organization to which the address information applies, if this is a business address."
                },
                "organizationUnitName": {
                  "type": "string",
                  "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                },
                "packageSuppression": {
                  "type": "integer",
                  "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                },
                "personTitle": {
                  "type": "string",
                  "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                },
                "phone1": {
                  "type": "string",
                  "description": "The primary phone number."
                },
                "phone1Type": {
                  "type": "string",
                  "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                },
                "phone2": {
                  "type": "string",
                  "description": "The secondary phone number."
                },
                "phone2Type": {
                  "type": "string",
                  "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                },
                "primary": {
                  "type": "integer",
                  "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                },
                "publishPhone1": {
                  "type": "integer",
                  "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                },
                "publishPhone2": {
                  "type": "integer",
                  "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                },
                "selfAddress": {
                  "type": "integer",
                  "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                  "readOnly": true
                },
                "shippingGeoCode": {
                  "type": "string",
                  "description": "The geographical code that identifies a region for the shipping purposes."
                },
                "state": {
                  "type": "string",
                  "description": "The name of the state, province, or equivalent where the user or organization resides."
                },
                "status": {
                  "type": "string",
                  "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                  "readOnly": true
                },
                "taxGeoCode": {
                  "type": "string",
                  "description": "The geographical tax code that identifies a region for the tax purposes."
                },
                "zipCode": {
                  "type": "string",
                  "description": "The ZIP or postal code of the user's address."
                }
              }
            }
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Create an address.",
        "produces": [
          "application/json"
        ],
        "summary": "Create an address.",
        "consumes": [
          "application/json"
        ],
        "operationId": "Addresses-createAddress"
      }
    },
    "/rest/admin/v2/addresses/{id}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the address."
                },
                "address1": {
                  "type": "string",
                  "description": "The first address line of the street address."
                },
                "address2": {
                  "type": "string",
                  "description": "The second address line of the street address."
                },
                "address3": {
                  "type": "string",
                  "description": "The third address line of the street address."
                },
                "addressType": {
                  "type": "string",
                  "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                },
                "bestCallingTime": {
                  "type": "string",
                  "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                },
                "billingCode": {
                  "type": "string",
                  "description": "A code to identify the shipping or billing information."
                },
                "billingCodeType": {
                  "type": "string",
                  "description": "The code for identifying the system or method of code structure that is used for billing."
                },
                "businessTitle": {
                  "type": "string",
                  "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                },
                "city": {
                  "type": "string",
                  "description": "The name of the city where the user or organization resides."
                },
                "country": {
                  "type": "string",
                  "description": "The name of the country or region where the user or organization resides."
                },
                "createdDateTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time that the address was created."
                },
                "email1": {
                  "type": "string",
                  "description": "The primary e-mail."
                },
                "email2": {
                  "type": "string",
                  "description": "The secondary e-mail."
                },
                "fax1": {
                  "type": "string",
                  "description": "The primary facsimile number."
                },
                "fax2": {
                  "type": "string",
                  "description": "The secondary facsimile number."
                },
                "field1": {
                  "type": "string",
                  "description": "A customizable field."
                },
                "field2": {
                  "type": "string",
                  "description": "A customizable field."
                },
                "field3": {
                  "type": "string",
                  "description": "A customizable field."
                },
                "firstName": {
                  "type": "string",
                  "description": "The first name of the user."
                },
                "lastName": {
                  "type": "string",
                  "description": "The last name of the user."
                },
                "memberId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                },
                "middleName": {
                  "type": "string",
                  "description": "The middle name or initial of the user."
                },
                "mobilePhone1": {
                  "type": "string",
                  "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                },
                "mobilePhone1Country": {
                  "type": "string",
                  "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                },
                "nickName": {
                  "type": "string",
                  "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                },
                "officeAddress": {
                  "type": "string",
                  "description": "The internal office address line, such as the internal designation for an employee's desk location."
                },
                "organizationName": {
                  "type": "string",
                  "description": "The name of the organization to which the address information applies, if this is a business address."
                },
                "organizationUnitName": {
                  "type": "string",
                  "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                },
                "packageSuppression": {
                  "type": "integer",
                  "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                },
                "personTitle": {
                  "type": "string",
                  "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                },
                "phone1": {
                  "type": "string",
                  "description": "The primary phone number."
                },
                "phone1Type": {
                  "type": "string",
                  "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                },
                "phone2": {
                  "type": "string",
                  "description": "The secondary phone number."
                },
                "phone2Type": {
                  "type": "string",
                  "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                },
                "primary": {
                  "type": "integer",
                  "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                },
                "publishPhone1": {
                  "type": "integer",
                  "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                },
                "publishPhone2": {
                  "type": "integer",
                  "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                },
                "selfAddress": {
                  "type": "integer",
                  "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                  "readOnly": true
                },
                "shippingGeoCode": {
                  "type": "string",
                  "description": "The geographical code that identifies a region for the shipping purposes."
                },
                "state": {
                  "type": "string",
                  "description": "The name of the state, province, or equivalent where the user or organization resides."
                },
                "status": {
                  "type": "string",
                  "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                  "readOnly": true
                },
                "taxGeoCode": {
                  "type": "string",
                  "description": "The geographical tax code that identifies a region for the tax purposes."
                },
                "zipCode": {
                  "type": "string",
                  "description": "The ZIP or postal code of the user's address."
                }
              }
            },
            "description": "The requested completed successfully."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned."
          },
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the address.",
            "in": "path",
            "name": "id"
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Get an address by ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Get an address by ID.",
        "operationId": "Addresses-findByAddressId"
      },
      "delete": {
        "responses": {
          "204": {
            "description": "The requested resource has been deleted."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the address.",
            "in": "path",
            "name": "id"
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Delete an address  by ID.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete an address by ID.",
        "operationId": "Addresses-deleteByAddressId"
      }
    },
    "/rest/admin/v2/addresses/{id}/new-version": {
      "post": {
        "responses": {
          "201": {
            "description": "The requested resource has been created.",
            "headers": {
              "Location": {
                "description": "Link to the newly created resource.",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "401": {
            "description": "Not authenticated. The user session is not valid.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "403": {
            "description": "The user is not authorized to perform the specified request.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error. For details, see the server log files.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "integer",
            "format": "int64",
            "name": "id",
            "description": "The unique numeric ID for identifying the address.",
            "in": "path"
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body. The \"selfAddress\" and \"status\" fields are managed and it cannot be specified.",
            "name": "body",
            "schema": {
              "description": "The addresses of users and organizations. An address can be the a user's own address or alternative address that is used for billing or shipping purposes.",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the address."
                },
                "address1": {
                  "type": "string",
                  "description": "The first address line of the street address."
                },
                "address2": {
                  "type": "string",
                  "description": "The second address line of the street address."
                },
                "address3": {
                  "type": "string",
                  "description": "The third address line of the street address."
                },
                "addressType": {
                  "type": "string",
                  "description": "The usage of the address. Available values:<br>  SB - The address is used both as a shipping and a billing address.<br>  S - The address is used as a shipping address.<br>  B - The address is used as a billing address."
                },
                "bestCallingTime": {
                  "type": "string",
                  "description": "Indicates the preferred time of day when the user is to be contacted. Available values:<br>  D - Daytime.<br>  E - Evening."
                },
                "billingCode": {
                  "type": "string",
                  "description": "A code to identify the shipping or billing information."
                },
                "billingCodeType": {
                  "type": "string",
                  "description": "The code for identifying the system or method of code structure that is used for billing."
                },
                "businessTitle": {
                  "type": "string",
                  "description": "The business title for the user, such as a Manager or Chief Executive Officer."
                },
                "city": {
                  "type": "string",
                  "description": "The name of the city where the user or organization resides."
                },
                "country": {
                  "type": "string",
                  "description": "The name of the country or region where the user or organization resides."
                },
                "createdDateTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date and time that the address was created."
                },
                "email1": {
                  "type": "string",
                  "description": "The primary e-mail."
                },
                "email2": {
                  "type": "string",
                  "description": "The secondary e-mail."
                },
                "fax1": {
                  "type": "string",
                  "description": "The primary facsimile number."
                },
                "fax2": {
                  "type": "string",
                  "description": "The secondary facsimile number."
                },
                "field1": {
                  "type": "string",
                  "description": "A customizable field."
                },
                "field2": {
                  "type": "string",
                  "description": "A customizable field."
                },
                "field3": {
                  "type": "string",
                  "description": "A customizable field."
                },
                "firstName": {
                  "type": "string",
                  "description": "The first name of the user."
                },
                "lastName": {
                  "type": "string",
                  "description": "The last name of the user."
                },
                "memberId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the member that this address belongs to. A member can be can be an organization or a user. If memberId is not specified, then the default is the current user (the user who is logging on)."
                },
                "middleName": {
                  "type": "string",
                  "description": "The middle name or initial of the user."
                },
                "mobilePhone1": {
                  "type": "string",
                  "description": "The primary mobile device number of the user, used for text messaging. The number should be specified without the country code. The country code is specified as the mobilePhone1Country value."
                },
                "mobilePhone1Country": {
                  "type": "string",
                  "description": "The country code of the mobile device phone number. This country is used for country code resolution when sending text messages. This data is required when the mobilePhone1 column is used."
                },
                "nickName": {
                  "type": "string",
                  "description": "The unique name or identifier for the address. A nickname must be unique among the addresses for a specific user or organization. The nickname for a user's address must also be different than the logon ID for a user so that the address does not conflict with the user's self-address. The self-address is created when the account for the user is first created. Multiple users or organizations can each have an address with the same nickname."
                },
                "officeAddress": {
                  "type": "string",
                  "description": "The internal office address line, such as the internal designation for an employee's desk location."
                },
                "organizationName": {
                  "type": "string",
                  "description": "The name of the organization to which the address information applies, if this is a business address."
                },
                "organizationUnitName": {
                  "type": "string",
                  "description": "The name of the organizational unit to which the address information applies, if this is a business address."
                },
                "packageSuppression": {
                  "type": "integer",
                  "description": "Specifies whether or not to include package inserts. Available values:<br>  1 - Include.<br>  0 - Do not include."
                },
                "personTitle": {
                  "type": "string",
                  "description": "The personal title of the user that is associated with the address. For example, Dr., Rev., Mr. or Ms."
                },
                "phone1": {
                  "type": "string",
                  "description": "The primary phone number."
                },
                "phone1Type": {
                  "type": "string",
                  "description": "The type of phone that is used for the primary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                },
                "phone2": {
                  "type": "string",
                  "description": "The secondary phone number."
                },
                "phone2Type": {
                  "type": "string",
                  "description": "The type of phone that is used for the secondary phone number. For example, TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile."
                },
                "primary": {
                  "type": "integer",
                  "description": "Indicates that the address is the primary address for the user or organization when the user or organization has multiple addresses associated, such as when a user or organization has multiple shipping addresses. Available values:<br>  1 - The address is the primary address.<br>  0 - (Default value) The address is an alternate address."
                },
                "publishPhone1": {
                  "type": "integer",
                  "description": "Whether to list the primary phone number. Available values: 1 - Yes, 0 - No."
                },
                "publishPhone2": {
                  "type": "integer",
                  "description": "Whether to list the secondary phone number. Available values: 1 - Yes, 0 - No."
                },
                "selfAddress": {
                  "type": "integer",
                  "description": "Indicates whether the address is associated with the registration of the user or organization. This value cannot be edited after address creation. Available values: 1 - Yes, 0 - No.",
                  "readOnly": true
                },
                "shippingGeoCode": {
                  "type": "string",
                  "description": "The geographical code that identifies a region for the shipping purposes."
                },
                "state": {
                  "type": "string",
                  "description": "The name of the state, province, or equivalent where the user or organization resides."
                },
                "status": {
                  "type": "string",
                  "description": "Indicates the status of the address. When an address is created, its status is marked with a \"P\", meaning \"permanent\", and indicates that the address is the current address. When an address is updated, a new record of the address is created with the updates. The new record is marked with a \"P\" and the earlier record is marked with a \"T\", meaning \"temporary\", and indicates that the address is the historical address. This value cannot be edited.",
                  "readOnly": true
                },
                "taxGeoCode": {
                  "type": "string",
                  "description": "The geographical tax code that identifies a region for the tax purposes."
                },
                "zipCode": {
                  "type": "string",
                  "description": "The ZIP or postal code of the user's address."
                }
              }
            }
          }
        ],
        "tags": [
          "Addresses"
        ],
        "description": "Updates an address by creating a new updated version. After the update, the new address will have status \"P\" (permanent) and the old address will have status \"T\" (historical).",
        "produces": [
          "application/json"
        ],
        "summary": "Creates a new version of an address.",
        "operationId": "Addresses-updateByAddressId"
      }
    },
    "/rest/admin/v2/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "description": "Get a collection of roles.",
        "summary": "Get a collection of roles.",
        "operationId": "getRoles",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique numeric ID for identifying the role.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the role.",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of the role.",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of roles.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The unique numeric ID for identifying the role."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the role."
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the role."
                      },
                      "links": {
                        "type": "object",
                        "description": "Links to related resources.",
                        "properties": {
                          "descriptions": {
                            "type": "object",
                            "description": "The role description relationships of a role.",
                            "properties": {
                              "href": {
                                "type": "string",
                                "description": "The URL of the link."
                              }
                            }
                          }
                        }
                      }
                    },
                    "description": "The role."
                  }
                }
              },
              "description": "A collection of roles."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "post": {
        "tags": [
          "roles"
        ],
        "description": "Create a role.",
        "summary": "Create a role.",
        "operationId": "createRole",
        "parameters": [
          {
            "in": "body",
            "name": "Role",
            "description": "The role.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying the role."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the role."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the role."
                },
                "links": {
                  "type": "object",
                  "description": "Links to related resources.",
                  "properties": {
                    "descriptions": {
                      "type": "object",
                      "description": "The role description relationships of a role.",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The URL of the link."
                        }
                      }
                    }
                  }
                }
              },
              "description": "The role."
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      }
    },
    "/rest/admin/v2/roles/{id}": {
      "get": {
        "tags": [
          "roles"
        ],
        "description": "Get a role.",
        "summary": "Get a role.",
        "operationId": "getRoleById",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The role.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying the role."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the role."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the role."
                },
                "links": {
                  "type": "object",
                  "description": "Links to related resources.",
                  "properties": {
                    "descriptions": {
                      "type": "object",
                      "description": "The role description relationships of a role.",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The URL of the link."
                        }
                      }
                    }
                  }
                }
              },
              "description": "The role."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "description": "Delete a role.",
        "summary": "Delete a role.",
        "operationId": "deleteRoleById",
        "parameters": [],
        "responses": {
          "204": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "patch": {
        "tags": [
          "roles"
        ],
        "description": "Update a role.",
        "summary": "Update a role.",
        "operationId": "updateRoleById",
        "parameters": [
          {
            "in": "body",
            "name": "Role",
            "description": "The role.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying the role."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the role."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the role."
                },
                "links": {
                  "type": "object",
                  "description": "Links to related resources.",
                  "properties": {
                    "descriptions": {
                      "type": "object",
                      "description": "The role description relationships of a role.",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The URL of the link."
                        }
                      }
                    }
                  }
                }
              },
              "description": "The role."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The unique numeric ID for identifying the role.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    },
    "/rest/admin/v2/roles/{id}/role-descriptions": {
      "get": {
        "tags": [
          "roles"
        ],
        "description": "Get the role descriptions for a role.",
        "summary": "Get the role descriptions for a role.",
        "operationId": "getRoleDescriptionsOfRole",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of role descriptions.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "roleId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The unique numeric ID for identifying the role."
                      },
                      "languageId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The language of the description. For a list of integer language identifiers, refer to the Knowledge Center."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "The name of the role."
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the role."
                      }
                    },
                    "description": "The role description."
                  }
                }
              },
              "description": "A collection of role descriptions."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The unique numeric ID for identifying the role.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    },
    "/rest/admin/v2/roles/assignable": {
      "get": {
        "description": "Gets the roles that the current user can assign in the specified organization.",
        "summary": "Gets the roles that the current user can assign in the specified organization.",
        "operationId": "getAssignableRoles",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The unique numeric ID for identifying the organization.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of roles.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The unique numeric ID for identifying the role."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the role."
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the role."
                      },
                      "links": {
                        "type": "object",
                        "description": "Links to related resources.",
                        "properties": {
                          "descriptions": {
                            "type": "object",
                            "description": "The role description relationships of a role.",
                            "properties": {
                              "href": {
                                "type": "string",
                                "description": "The URL of the link."
                              }
                            }
                          }
                        }
                      }
                    },
                    "description": "The role."
                  }
                }
              },
              "description": "A collection of roles."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        },
        "tags": [
          "roles"
        ]
      }
    },
    "/rest/admin/v2/user-account-policies": {
      "get": {
        "tags": [
          "user-account-policies"
        ],
        "description": "Get a collection of user account policy records.",
        "operationId": "getUserAccountPolicies",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique numeric ID for identifying a user account policy.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userAccountLockoutPolicyId",
            "in": "query",
            "description": "The unique numeric ID for identifying a user account lockout policy.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "passwordPolicyId",
            "in": "query",
            "description": "The unique numeric ID for identifying a password policy.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of user account policies records.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The unique numeric ID for identifying a user account policy."
                      },
                      "userAccountLockoutPolicyId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The unique numeric ID for identifying a user account lockout policy."
                      },
                      "passwordPolicyId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The unique numeric ID for identifying a password policy."
                      },
                      "links": {
                        "type": "object",
                        "description": "Links to related resources.",
                        "properties": {
                          "descriptions": {
                            "type": "object",
                            "description": "",
                            "properties": {
                              "href": {
                                "type": "string",
                                "description": "The URL of the link."
                              }
                            }
                          }
                        }
                      }
                    },
                    "description": "The user account policy."
                  }
                }
              },
              "description": "A collection of user account policies records."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-account-policies"
        ],
        "description": "Create a user account policy record.",
        "operationId": "createUserAccountPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "UserAccountPolicy",
            "description": "The user account policy.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying a user account policy."
                },
                "userAccountLockoutPolicyId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying a user account lockout policy."
                },
                "passwordPolicyId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying a password policy."
                },
                "links": {
                  "type": "object",
                  "description": "Links to related resources.",
                  "properties": {
                    "descriptions": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The URL of the link."
                        }
                      }
                    }
                  }
                }
              },
              "description": "The user account policy."
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      }
    },
    "/rest/admin/v2/user-account-policies/{id}": {
      "get": {
        "tags": [
          "user-account-policies"
        ],
        "description": "Get a user account policy record.",
        "operationId": "getUserAccountPolicyById",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user account policy.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying a user account policy."
                },
                "userAccountLockoutPolicyId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying a user account lockout policy."
                },
                "passwordPolicyId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying a password policy."
                },
                "links": {
                  "type": "object",
                  "description": "Links to related resources.",
                  "properties": {
                    "descriptions": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The URL of the link."
                        }
                      }
                    }
                  }
                }
              },
              "description": "The user account policy."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-account-policies"
        ],
        "description": "Delete a user account policy record.",
        "operationId": "deleteUserAccountPolicyById",
        "parameters": [],
        "responses": {
          "204": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user-account-policies"
        ],
        "description": "Update a user account policy record.",
        "operationId": "updateUserAccountPolicyById",
        "parameters": [
          {
            "in": "body",
            "name": "UserAccountPolicy",
            "description": "The user account policy.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying a user account policy."
                },
                "userAccountLockoutPolicyId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying a user account lockout policy."
                },
                "passwordPolicyId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying a password policy."
                },
                "links": {
                  "type": "object",
                  "description": "Links to related resources.",
                  "properties": {
                    "descriptions": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The URL of the link."
                        }
                      }
                    }
                  }
                }
              },
              "description": "The user account policy."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The unique numeric ID for identifying a user account policy.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    },
    "/rest/admin/v2/user-account-policies/{id}/descriptions": {
      "get": {
        "tags": [
          "user-account-policies"
        ],
        "description": "",
        "operationId": "getDescriptionsOfUserAccountPolicy",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of user account policy descriptions.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "userAccountPolicyId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The unique numeric ID for identifying the user account policy."
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the user account policy."
                      },
                      "languageId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The language of the description. For a list of integer language identifiers, please refer to the Knowledge Center."
                      }
                    },
                    "description": "The description of a user account policy."
                  }
                }
              },
              "description": "A collection of user account policy descriptions."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The unique numeric ID for identifying a user account policy.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    },
    "/rest/admin/v2/languages": {
      "get": {
        "tags": [
          "languages"
        ],
        "description": "Get a collection of languages.",
        "operationId": "getLanguages",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The language ID. When creating new languages, use negative values less than -999.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "localeName",
            "in": "query",
            "description": "A Java locale used to represent a political, geographical, or cultural region that has a distinct language and customs. This is a mandatory field.",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language component of the locale.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Country or region component of the locale.",
            "required": false,
            "type": "string"
          },
          {
            "name": "variant",
            "in": "query",
            "description": "Variant component of the locale. Used to specify the locale encoding character set or to further segregate a distinct formatting custom for a political, geographical, or cultural region.",
            "required": false,
            "type": "string"
          },
          {
            "name": "encoding",
            "in": "query",
            "description": "The character encoding value that the browser uses to display the page in the selected language.",
            "required": false,
            "type": "string"
          },
          {
            "name": "mimeCharSet",
            "in": "query",
            "description": "The MIME character encoding value that the notification system uses to encode a message for the selected language.",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of languages.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The language ID. When creating new languages, use negative values less than -999."
                      },
                      "localeName": {
                        "type": "string",
                        "description": "A Java locale used to represent a political, geographical, or cultural region that has a distinct language and customs. This is a mandatory field."
                      },
                      "language": {
                        "type": "string",
                        "description": "Language component of the locale."
                      },
                      "country": {
                        "type": "string",
                        "description": "Country or region component of the locale."
                      },
                      "variant": {
                        "type": "string",
                        "description": "Variant component of the locale. Used to specify the locale encoding character set or to further segregate a distinct formatting custom for a political, geographical, or cultural region."
                      },
                      "encoding": {
                        "type": "string",
                        "description": "The character encoding value that the browser uses to display the page in the selected language."
                      },
                      "mimeCharSet": {
                        "type": "string",
                        "description": "The MIME character encoding value that the notification system uses to encode a message for the selected language."
                      },
                      "links": {
                        "type": "object",
                        "description": "Links to related resources.",
                        "properties": {
                          "descriptions": {
                            "type": "object",
                            "description": "The language description relationships of a language.",
                            "properties": {
                              "href": {
                                "type": "string",
                                "description": "The URL of the link."
                              }
                            }
                          }
                        }
                      }
                    },
                    "description": "The language."
                  }
                }
              },
              "description": "A collection of languages."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "post": {
        "tags": [
          "languages"
        ],
        "description": "Create a language.",
        "operationId": "createLanguage",
        "parameters": [
          {
            "in": "body",
            "name": "Language",
            "description": "The language.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The language ID. When creating new languages, use negative values less than -999."
                },
                "localeName": {
                  "type": "string",
                  "description": "A Java locale used to represent a political, geographical, or cultural region that has a distinct language and customs. This is a mandatory field."
                },
                "language": {
                  "type": "string",
                  "description": "Language component of the locale."
                },
                "country": {
                  "type": "string",
                  "description": "Country or region component of the locale."
                },
                "variant": {
                  "type": "string",
                  "description": "Variant component of the locale. Used to specify the locale encoding character set or to further segregate a distinct formatting custom for a political, geographical, or cultural region."
                },
                "encoding": {
                  "type": "string",
                  "description": "The character encoding value that the browser uses to display the page in the selected language."
                },
                "mimeCharSet": {
                  "type": "string",
                  "description": "The MIME character encoding value that the notification system uses to encode a message for the selected language."
                },
                "links": {
                  "type": "object",
                  "description": "Links to related resources.",
                  "properties": {
                    "descriptions": {
                      "type": "object",
                      "description": "The language description relationships of a language.",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The URL of the link."
                        }
                      }
                    }
                  }
                }
              },
              "description": "The language."
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      }
    },
    "/rest/admin/v2/languages/{id}": {
      "get": {
        "tags": [
          "languages"
        ],
        "description": "Get a language.",
        "operationId": "getLanguageById",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The language.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The language ID. When creating new languages, use negative values less than -999."
                },
                "localeName": {
                  "type": "string",
                  "description": "A Java locale used to represent a political, geographical, or cultural region that has a distinct language and customs. This is a mandatory field."
                },
                "language": {
                  "type": "string",
                  "description": "Language component of the locale."
                },
                "country": {
                  "type": "string",
                  "description": "Country or region component of the locale."
                },
                "variant": {
                  "type": "string",
                  "description": "Variant component of the locale. Used to specify the locale encoding character set or to further segregate a distinct formatting custom for a political, geographical, or cultural region."
                },
                "encoding": {
                  "type": "string",
                  "description": "The character encoding value that the browser uses to display the page in the selected language."
                },
                "mimeCharSet": {
                  "type": "string",
                  "description": "The MIME character encoding value that the notification system uses to encode a message for the selected language."
                },
                "links": {
                  "type": "object",
                  "description": "Links to related resources.",
                  "properties": {
                    "descriptions": {
                      "type": "object",
                      "description": "The language description relationships of a language.",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The URL of the link."
                        }
                      }
                    }
                  }
                }
              },
              "description": "The language."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "delete": {
        "tags": [
          "languages"
        ],
        "description": "Delete a language.",
        "operationId": "deleteLanguageById",
        "parameters": [],
        "responses": {
          "204": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "patch": {
        "tags": [
          "languages"
        ],
        "description": "Update a language.",
        "operationId": "updateLanguageById",
        "parameters": [
          {
            "in": "body",
            "name": "Language",
            "description": "The language.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The language ID. When creating new languages, use negative values less than -999."
                },
                "localeName": {
                  "type": "string",
                  "description": "A Java locale used to represent a political, geographical, or cultural region that has a distinct language and customs. This is a mandatory field."
                },
                "language": {
                  "type": "string",
                  "description": "Language component of the locale."
                },
                "country": {
                  "type": "string",
                  "description": "Country or region component of the locale."
                },
                "variant": {
                  "type": "string",
                  "description": "Variant component of the locale. Used to specify the locale encoding character set or to further segregate a distinct formatting custom for a political, geographical, or cultural region."
                },
                "encoding": {
                  "type": "string",
                  "description": "The character encoding value that the browser uses to display the page in the selected language."
                },
                "mimeCharSet": {
                  "type": "string",
                  "description": "The MIME character encoding value that the notification system uses to encode a message for the selected language."
                },
                "links": {
                  "type": "object",
                  "description": "Links to related resources.",
                  "properties": {
                    "descriptions": {
                      "type": "object",
                      "description": "The language description relationships of a language.",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "The URL of the link."
                        }
                      }
                    }
                  }
                }
              },
              "description": "The language."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The language ID. When creating new languages, use negative values less than -999.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    },
    "/rest/admin/v2/languages/{id}/descriptions": {
      "get": {
        "tags": [
          "languages"
        ],
        "description": "",
        "operationId": "getDescriptionsOfLanguage",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of languages descriptions.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "descriptionLanguageId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The language ID of the language that is being described."
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the language that is displayed in a graphical user interface, which manages supported languages for a StoreEntity."
                      },
                      "languageId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The language ID."
                      }
                    },
                    "description": "Language Description"
                  }
                }
              },
              "description": "A collection of languages descriptions."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "The language ID. When creating new languages, use negative values less than -999.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    },
    "/rest/admin/v2/language-descriptions": {
      "get": {
        "tags": [
          "language-descriptions"
        ],
        "description": "Get a collection of languages descriptions.",
        "operationId": "getLanguageDescriptions",
        "parameters": [
          {
            "name": "descriptionLanguageId",
            "in": "query",
            "description": "The language ID of the language that is being described.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of the language that is displayed in a graphical user interface, which manages supported languages for a StoreEntity.",
            "required": false,
            "type": "string"
          },
          {
            "name": "languageId",
            "in": "query",
            "description": "The language ID.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of languages descriptions.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "descriptionLanguageId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The language ID of the language that is being described."
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of the language that is displayed in a graphical user interface, which manages supported languages for a StoreEntity."
                      },
                      "languageId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The language ID."
                      }
                    },
                    "description": "Language Description"
                  }
                }
              },
              "description": "A collection of languages descriptions."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "post": {
        "tags": [
          "language-descriptions"
        ],
        "description": "Create a language descriptions.",
        "operationId": "createLanguageDescription",
        "parameters": [
          {
            "in": "body",
            "name": "LanguageDescription",
            "description": "Language Description",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "descriptionLanguageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The language ID of the language that is being described."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the language that is displayed in a graphical user interface, which manages supported languages for a StoreEntity."
                },
                "languageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The language ID."
                }
              },
              "description": "Language Description"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      }
    },
    "/rest/admin/v2/language-descriptions/descriptionLanguageId:{descriptionLanguageId},languageId:{languageId}": {
      "get": {
        "tags": [
          "language-descriptions"
        ],
        "description": "Get a language descriptions.",
        "operationId": "getLanguageDescriptionById",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Language Description",
            "schema": {
              "type": "object",
              "properties": {
                "descriptionLanguageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The language ID of the language that is being described."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the language that is displayed in a graphical user interface, which manages supported languages for a StoreEntity."
                },
                "languageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The language ID."
                }
              },
              "description": "Language Description"
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "delete": {
        "tags": [
          "language-descriptions"
        ],
        "description": "Delete a language descriptions.",
        "operationId": "deleteLanguageDescriptionById",
        "parameters": [],
        "responses": {
          "204": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "patch": {
        "tags": [
          "language-descriptions"
        ],
        "description": "Update a language descriptions.",
        "operationId": "updateLanguageDescriptionById",
        "parameters": [
          {
            "in": "body",
            "name": "LanguageDescription",
            "description": "Language Description",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "descriptionLanguageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The language ID of the language that is being described."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the language that is displayed in a graphical user interface, which manages supported languages for a StoreEntity."
                },
                "languageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The language ID."
                }
              },
              "description": "Language Description"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "parameters": [
        {
          "name": "descriptionLanguageId",
          "in": "path",
          "description": "The language ID of the language that is being described.",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "languageId",
          "in": "path",
          "description": "The language ID.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    },
    "/rest/admin/v2/states": {
      "get": {
        "tags": [
          "states"
        ],
        "description": "Get a collection of states and provinces.",
        "operationId": "getStates",
        "parameters": [
          {
            "name": "stateAbbr",
            "in": "query",
            "description": "The unique abbreviation for identifying the state or province.",
            "required": false,
            "type": "string"
          },
          {
            "name": "languageId",
            "in": "query",
            "description": "The integer for identifying the language of the description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the state or province.",
            "required": false,
            "type": "string"
          },
          {
            "name": "countryAbbr",
            "in": "query",
            "description": "The country or region abbreviation code for the state or province.",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of states and provinces.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "stateAbbr": {
                        "type": "string",
                        "description": "The unique abbreviation for identifying the state or province."
                      },
                      "languageId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The integer for identifying the language of the description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the state or province."
                      },
                      "countryAbbr": {
                        "type": "string",
                        "description": "The country or region abbreviation code for the state or province."
                      }
                    },
                    "description": "The state or province of a user or organization address."
                  }
                }
              },
              "description": "A collection of states and provinces."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      }
    },
    "/rest/admin/v2/states/stateAbbr:{stateAbbr},languageId:{languageId}": {
      "get": {
        "tags": [
          "states"
        ],
        "description": "Get a state or province by ID.",
        "operationId": "getStateById",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The state or province of a user or organization address.",
            "schema": {
              "type": "object",
              "properties": {
                "stateAbbr": {
                  "type": "string",
                  "description": "The unique abbreviation for identifying the state or province."
                },
                "languageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The integer for identifying the language of the description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the state or province."
                },
                "countryAbbr": {
                  "type": "string",
                  "description": "The country or region abbreviation code for the state or province."
                }
              },
              "description": "The state or province of a user or organization address."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "parameters": [
        {
          "name": "stateAbbr",
          "in": "path",
          "description": "The unique abbreviation for identifying the state or province.",
          "required": true,
          "type": "string"
        },
        {
          "name": "languageId",
          "in": "path",
          "description": "The integer for identifying the language of the description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    },
    "/rest/admin/v2/countries": {
      "get": {
        "tags": [
          "countries"
        ],
        "description": "Get a collection of countries and regions.",
        "operationId": "getCountries",
        "parameters": [
          {
            "name": "countryAbbr",
            "in": "query",
            "description": "The unique abbreviation for identifying the country or region.",
            "required": false,
            "type": "string"
          },
          {
            "name": "languageId",
            "in": "query",
            "description": "The integer for identifying the language of the description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the country or region.",
            "required": false,
            "type": "string"
          },
          {
            "name": "callingCode",
            "in": "query",
            "description": "The designated calling code of the country or region for placing international calls.",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of countries and regions.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "countryAbbr": {
                        "type": "string",
                        "description": "The unique abbreviation for identifying the country or region."
                      },
                      "languageId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The integer for identifying the language of the description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the country or region."
                      },
                      "callingCode": {
                        "type": "string",
                        "description": "The designated calling code of the country or region for placing international calls."
                      }
                    },
                    "description": "The country or region of a user or organization address."
                  }
                }
              },
              "description": "A collection of countries and regions."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      }
    },
    "/rest/admin/v2/countries/countryAbbr:{countryAbbr},languageId:{languageId}": {
      "get": {
        "tags": [
          "countries"
        ],
        "description": "Get a country or region by ID.",
        "operationId": "getCountryById",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The comma-separated set of properties which controls the order of the items being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the items based on the name value in ascending order, then by the id value in descending order.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The country or region of a user or organization address.",
            "schema": {
              "type": "object",
              "properties": {
                "countryAbbr": {
                  "type": "string",
                  "description": "The unique abbreviation for identifying the country or region."
                },
                "languageId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The integer for identifying the language of the description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the country or region."
                },
                "callingCode": {
                  "type": "string",
                  "description": "The designated calling code of the country or region for placing international calls."
                }
              },
              "description": "The country or region of a user or organization address."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "parameters": [
        {
          "name": "countryAbbr",
          "in": "path",
          "description": "The unique abbreviation for identifying the country or region.",
          "required": true,
          "type": "string"
        },
        {
          "name": "languageId",
          "in": "path",
          "description": "The integer for identifying the language of the description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
          "required": true,
          "type": "integer",
          "format": "int32"
        }
      ]
    },
    "/rest/admin/v2/role-assignments": {
      "get": {
        "tags": [
          "Role Assignments"
        ],
        "description": "Get a collection of role assignments.",
        "operationId": "getRoleAssignments",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "The unique numeric ID for identifying the user or organization of the member that has a role.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "The unique numeric ID for identifying the role.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "The unique numeric ID for identifying the organization where the role is being played.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of role assignments.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "description": "A role assigned to a user or to an organization.",
                    "properties": {
                      "memberId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The unique numeric ID for identifying the user or organization of the member that has a role."
                      },
                      "organizationId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The unique numeric ID for identifying the organization where the role is being played."
                      },
                      "roleId": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The unique numeric ID for identifying the role."
                      }
                    }
                  }
                }
              },
              "description": "A collection of role assignments."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Get a collection of role assignments."
      },
      "post": {
        "responses": {
          "201": {
            "description": "The requested resource has been created.",
            "headers": {
              "Location": {
                "description": "Link to the newly created resource.",
                "type": "string"
              }
            }
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "description": "Request body.",
            "schema": {
              "description": "A role assigned to a user or to an organization.",
              "properties": {
                "memberId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the user or organization of the member that has a role."
                },
                "organizationId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the organization where the role is being played."
                },
                "roleId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying the role."
                }
              }
            }
          }
        ],
        "tags": [
          "Role Assignments"
        ],
        "description": "Create a role assignment.",
        "produces": [
          "application/json"
        ],
        "summary": "Create a role assignment.",
        "consumes": [
          "application/json"
        ],
        "operationId": "RoleAssignment-createRoleAssignment"
      }
    },
    "/rest/admin/v2/role-assignments/memberId:{memberId},roleId:{roleId},organizationId:{organizationId}": {
      "get": {
        "tags": [
          "Role Assignments"
        ],
        "description": "Get a role assignment.",
        "operationId": "getRoleAssignmentById",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "The unique numeric ID for identifying the user or organization of the member that has a role.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "The unique numeric ID for identifying the role.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique numeric ID for identifying the organization where the role is being played.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The role assignment.",
            "schema": {
              "description": "A role assigned to a user or to an organization.",
              "properties": {
                "memberId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the user or organization of the member that has a role."
                },
                "organizationId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique numeric ID for identifying the organization where the role is being played."
                },
                "roleId": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The unique numeric ID for identifying the role."
                }
              }
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Get a role assignment."
      },
      "delete": {
        "responses": {
          "204": {
            "description": "The requested resource has been deleted."
          },
          "400": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            },
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            },
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            },
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "schema": {
              "description": "The error message model.",
              "properties": {
                "errors": {
                  "items": {
                    "description": "The error message item model.",
                    "properties": {
                      "code": {
                        "description": "The error message code.",
                        "type": "string"
                      },
                      "correlationId": {
                        "description": "The unique identifier for the request.",
                        "type": "string"
                      },
                      "locale": {
                        "description": "The locale of the error message.",
                        "type": "string"
                      },
                      "message": {
                        "description": "The error message.",
                        "type": "string"
                      },
                      "messageArguments": {
                        "description": "The arguments used to construct the error message.",
                        "items": {},
                        "type": "array"
                      },
                      "messageKey": {
                        "description": "The error message key.",
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "requestId": {
                  "description": "The request identifier.",
                  "type": "string"
                }
              }
            },
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "memberId",
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the user or organization of the member that has a role.",
            "in": "path"
          },
          {
            "required": true,
            "name": "organizationId",
            "type": "integer",
            "format": "int64",
            "description": "The unique numeric ID for identifying the organization where the role is being played.",
            "in": "path"
          },
          {
            "required": true,
            "name": "roleId",
            "type": "integer",
            "format": "int32",
            "description": "The unique numeric ID for identifying the role.",
            "in": "path"
          }
        ],
        "tags": [
          "Role Assignments"
        ],
        "description": "Delete a role assignment.",
        "produces": [
          "application/json"
        ],
        "summary": "Delete a role assignment.",
        "operationId": "RoleAssignment-deleteRoleAssignment"
      }
    },
    "/rest/admin/v2/member-groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          },
          {
            "description": "The member group's usage. Available values:\n* GeneralPurpose - A general grouping of persons and/or organizations.\n* AccessControl - A group of persons specified as part of an access control policy.\n* CustomerTerritory - A group of customers, typically by territory.\n* CustomerServiceRepresentative - A group of customer service representatives, which in turn can have customer territory groups or customer accounts assigned to them.\n* RegisteredCustomer - A group of buyer organizations that have registered to a seller organization.\n* CustomerPrice - A group of customers that are entitled to get a contract's terms and conditions; often used to enforce custom pricing for the group. Customer price groups can comprise any user, who can be included and excluded explicitly.\n* CustomerSegment - A group of persons based on common attributes, for example demographics or purchase history. This group is used in marketing campaigns.\n* RFQResponseApproval - An organization that wants request for quote (RFQ) response approvals owns a member group of this usage. The group contains persons that are able to approve RFQ responses.\n* DisableInheritedRFQResponseApproval - An organization that does not want request for quote (RFQ) response approvals owns a member group of this usage.\n* OrderProcessApproval - An organization that wants order approvals owns a member group of this usage. The group contains persons that are able to approve orders.\n* DisableInheritedOrderProcessApproval - An organization that does not want order approvals owns a member group of this usage.\n* ContractSubmitApproval - An organization that wants contract approvals owns a member group of this usage. The group contains persons that are able to approve contracts.\n* DisableInheritedContractSubmitApproval - An organization that does not want contract approvals owns a member group of this usage.\n* UserRegistrationApproval - An organization that wants user registration approvals owns a member group of this usage. The group contains persons that are able to approve user registration requests.\n* DisableInheritedUserRegistrationApproval - An organization that does not want user registration approvals owns a member group of this usage.\n* ResellerRegistrationApproval - An organization that wants reseller registration approvals owns a member group of this usage. The group contains persons that are able to approve reseller registration requests.\n* DisableInheritedResellerRegistrationApproval - An organization that does not want reseller registration approvals owns a member group of this usage.\n",
            "in": "query",
            "name": "usage",
            "required": true,
            "type": "string"
          },
          {
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer",
            "x-entity-path": "dataArea/get/recordSetStartNumber"
          },
          {
            "description": "The maximum number of records to return.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "x-entity-path": "dataArea/get/maxItems"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of member groups.",
              "properties": {
                "count": {
                  "description": "The number of member groups found.",
                  "format": "int64",
                  "type": "integer"
                },
                "items": {
                  "items": {
                    "description": "A member group.",
                    "properties": {
                      "allowExport": {
                        "description": "Allow information about the users in the member group, for example their email addresses and names, to be exported to external applications using the \"Export customer segment\" feature.",
                        "type": "boolean"
                      },
                      "exportAll": {
                        "description": "When exporting a member group to external applications, if exportAll is true, then all customers in the member group are exported, including customers that have opted out from marketing communications. If exportAll is false, then only customers that have opted in to receive marketing communications will be exported.",
                        "type": "boolean"
                      },
                      "id": {
                        "description": "The unique numeric ID for identifying the member group.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "memberGroupIdentifier/uniqueID"
                      },
                      "name": {
                        "description": "The member group name.",
                        "type": "string",
                        "x-entity-path": "memberGroupIdentifier/externalIdentifier/name"
                      },
                      "ownerId": {
                        "description": "Identifier of the organization that owns the member group. Can only be set when the member group is created.",
                        "type": "string",
                        "x-entity-path": "memberGroupIdentifier/externalIdentifier/ownerID"
                      },
                      "storeId": {
                        "description": "The unique numeric ID for identifying the store.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "memberGroupIdentifier/externalIdentifier/storeIdentifier/uniqueID"
                      },
                      "updatedBy": {
                        "description": "Individual who performed the most recent update to the member group.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "lastUpdatedBy"
                      },
                      "updatedDateTime": {
                        "description": "Date and time of the most recent update to the member group.",
                        "format": "date-time",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "lastUpdate"
                      },
                      "usage": {
                        "description": "Member group's usage. Can only be set when member group is created. If multiple usages are specified, only the first one will be applied. Available values:\n* GeneralPurpose - A general grouping of persons and/or organizations.\n* AccessControl - A group of persons specified as part of an access control policy.\n* CustomerTerritory - A group of customers, typically by territory.\n* CustomerServiceRepresentative - A group of customer service representatives, which in turn can have customer territory groups or customer accounts assigned to them.\n* RegisteredCustomer - A group of buyer organizations that have registered to a seller organization.\n* CustomerPrice - A group of customers that are entitled to get a contract's terms and conditions; often used to enforce custom pricing for the group. Customer price groups can comprise any user, who can be included and excluded explicitly.\n* CustomerSegment - A group of persons based on common attributes, for example demographics or purchase history. This group is used in marketing campaigns.\n* RFQResponseApproval - An organization that wants request for quote (RFQ) response approvals owns a member group of this usage. The group contains persons that are able to approve RFQ responses.\n* DisableInheritedRFQResponseApproval - An organization that does not want request for quote (RFQ) response approvals owns a member group of this usage.\n* OrderProcessApproval - An organization that wants order approvals owns a member group of this usage. The group contains persons that are able to approve orders.\n* DisableInheritedOrderProcessApproval - An organization that does not want order approvals owns a member group of this usage.\n* ContractSubmitApproval - An organization that wants contract approvals owns a member group of this usage. The group contains persons that are able to approve contracts.\n* DisableInheritedContractSubmitApproval - An organization that does not want contract approvals owns a member group of this usage.\n* UserRegistrationApproval - An organization that wants user registration approvals owns a member group of this usage. The group contains persons that are able to approve user registration requests.\n* DisableInheritedUserRegistrationApproval - An organization that does not want user registration approvals owns a member group of this usage.\n* ResellerRegistrationApproval - An organization that wants reseller registration approvals owns a member group of this usage. The group contains persons that are able to approve reseller registration requests.\n* DisableInheritedResellerRegistrationApproval - An organization that does not want reseller registration approvals owns a member group of this usage.\n",
                        "items": {
                          "enum": [
                            "GeneralPurpose",
                            "AccessControl",
                            "CustomerTerritory",
                            "CustomerServiceRepresentative",
                            "RegisteredCustomer",
                            "CustomerPrice",
                            "CustomerSegment",
                            "RFQResponseApproval",
                            "DisableInheritedRFQResponseApproval",
                            "OrderProcessApproval",
                            "DisableInheritedOrderProcessApproval",
                            "ContractSubmitApproval",
                            "DisableInheritedContractSubmitApproval",
                            "UserRegistrationApproval",
                            "DisableInheritedUserRegistrationApproval",
                            "ResellerRegistrationApproval",
                            "DisableInheritedResellerRegistrationApproval"
                          ],
                          "type": "string",
                          "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupUsageEnumerationType"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/memberGroup"
          }
        },
        "summary": "Get member groups by store and usage.",
        "x-expression-template": "{_wcf.ap='IBM_Admin_Details'}/MemberGroup[Usage='{usage}']",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "getMemberGroup",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.GetMemberGroupType"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/externalIdentifier/storeIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "A member group.",
              "properties": {
                "allowExport": {
                  "description": "Allow information about the users in the member group, for example their email addresses and names, to be exported to external applications using the \"Export customer segment\" feature.",
                  "type": "boolean"
                },
                "exportAll": {
                  "description": "When exporting a member group to external applications, if exportAll is true, then all customers in the member group are exported, including customers that have opted out from marketing communications. If exportAll is false, then only customers that have opted in to receive marketing communications will be exported.",
                  "type": "boolean"
                },
                "id": {
                  "description": "The unique numeric ID for identifying the member group.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "memberGroupIdentifier/uniqueID"
                },
                "name": {
                  "description": "The member group name.",
                  "type": "string",
                  "x-entity-path": "memberGroupIdentifier/externalIdentifier/name"
                },
                "ownerId": {
                  "description": "Identifier of the organization that owns the member group. Can only be set when the member group is created.",
                  "type": "string",
                  "x-entity-path": "memberGroupIdentifier/externalIdentifier/ownerID"
                },
                "storeId": {
                  "description": "The unique numeric ID for identifying the store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "memberGroupIdentifier/externalIdentifier/storeIdentifier/uniqueID"
                },
                "updatedBy": {
                  "description": "Individual who performed the most recent update to the member group.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "lastUpdatedBy"
                },
                "updatedDateTime": {
                  "description": "Date and time of the most recent update to the member group.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "lastUpdate"
                },
                "usage": {
                  "description": "Member group's usage. Can only be set when member group is created. If multiple usages are specified, only the first one will be applied. Available values:\n* GeneralPurpose - A general grouping of persons and/or organizations.\n* AccessControl - A group of persons specified as part of an access control policy.\n* CustomerTerritory - A group of customers, typically by territory.\n* CustomerServiceRepresentative - A group of customer service representatives, which in turn can have customer territory groups or customer accounts assigned to them.\n* RegisteredCustomer - A group of buyer organizations that have registered to a seller organization.\n* CustomerPrice - A group of customers that are entitled to get a contract's terms and conditions; often used to enforce custom pricing for the group. Customer price groups can comprise any user, who can be included and excluded explicitly.\n* CustomerSegment - A group of persons based on common attributes, for example demographics or purchase history. This group is used in marketing campaigns.\n* RFQResponseApproval - An organization that wants request for quote (RFQ) response approvals owns a member group of this usage. The group contains persons that are able to approve RFQ responses.\n* DisableInheritedRFQResponseApproval - An organization that does not want request for quote (RFQ) response approvals owns a member group of this usage.\n* OrderProcessApproval - An organization that wants order approvals owns a member group of this usage. The group contains persons that are able to approve orders.\n* DisableInheritedOrderProcessApproval - An organization that does not want order approvals owns a member group of this usage.\n* ContractSubmitApproval - An organization that wants contract approvals owns a member group of this usage. The group contains persons that are able to approve contracts.\n* DisableInheritedContractSubmitApproval - An organization that does not want contract approvals owns a member group of this usage.\n* UserRegistrationApproval - An organization that wants user registration approvals owns a member group of this usage. The group contains persons that are able to approve user registration requests.\n* DisableInheritedUserRegistrationApproval - An organization that does not want user registration approvals owns a member group of this usage.\n* ResellerRegistrationApproval - An organization that wants reseller registration approvals owns a member group of this usage. The group contains persons that are able to approve reseller registration requests.\n* DisableInheritedResellerRegistrationApproval - An organization that does not want reseller registration approvals owns a member group of this usage.\n",
                  "items": {
                    "enum": [
                      "GeneralPurpose",
                      "AccessControl",
                      "CustomerTerritory",
                      "CustomerServiceRepresentative",
                      "RegisteredCustomer",
                      "CustomerPrice",
                      "CustomerSegment",
                      "RFQResponseApproval",
                      "DisableInheritedRFQResponseApproval",
                      "OrderProcessApproval",
                      "DisableInheritedOrderProcessApproval",
                      "ContractSubmitApproval",
                      "DisableInheritedContractSubmitApproval",
                      "UserRegistrationApproval",
                      "DisableInheritedUserRegistrationApproval",
                      "ResellerRegistrationApproval",
                      "DisableInheritedResellerRegistrationApproval"
                    ],
                    "type": "string",
                    "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupUsageEnumerationType"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupType"
            },
            "x-entity-path": "dataArea/memberGroup[1]"
          }
        ],
        "responses": {
          "201": {
            "description": "The operation is successful.",
            "headers": {
              "Location": {
                "description": "The URI of the member group.",
                "type": "string"
              }
            },
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          }
        },
        "summary": "Create a member group.",
        "x-action-code": "Add",
        "x-expression-template": "/MemberGroup[1]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "processMemberGroup",
        "x-flow-class": "com.ibm.commerce.rest.bod.PostBodMappingFlow",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.ProcessMemberGroupType"
      }
    },
    "/rest/admin/v2/member-groups/by-name-and-usage": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          },
          {
            "description": "The member group usage type.",
            "in": "query",
            "name": "usage",
            "required": true,
            "type": "string"
          },
          {
            "description": "The member group name.",
            "enum": [
              "GeneralPurpose",
              "AccessControl",
              "CustomerTerritory",
              "CustomerServiceRepresentative",
              "RegisteredCustomer",
              "CustomerPrice",
              "CustomerSegment",
              "RFQResponseApproval",
              "DisableInheritedRFQResponseApproval",
              "OrderProcessApproval",
              "DisableInheritedOrderProcessApproval",
              "ContractSubmitApproval",
              "DisableInheritedContractSubmitApproval",
              "UserRegistrationApproval",
              "DisableInheritedUserRegistrationApproval",
              "ResellerRegistrationApproval",
              "DisableInheritedResellerRegistrationApproval"
            ],
            "in": "query",
            "name": "memberGroupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of member groups.",
              "properties": {
                "count": {
                  "description": "The number of member groups found.",
                  "format": "int64",
                  "type": "integer"
                },
                "items": {
                  "items": {
                    "description": "A member group.",
                    "properties": {
                      "allowExport": {
                        "description": "Allow information about the users in the member group, for example their email addresses and names, to be exported to external applications using the \"Export customer segment\" feature.",
                        "type": "boolean"
                      },
                      "exportAll": {
                        "description": "When exporting a member group to external applications, if exportAll is true, then all customers in the member group are exported, including customers that have opted out from marketing communications. If exportAll is false, then only customers that have opted in to receive marketing communications will be exported.",
                        "type": "boolean"
                      },
                      "id": {
                        "description": "The unique numeric ID for identifying the member group.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "memberGroupIdentifier/uniqueID"
                      },
                      "name": {
                        "description": "The member group name.",
                        "type": "string",
                        "x-entity-path": "memberGroupIdentifier/externalIdentifier/name"
                      },
                      "ownerId": {
                        "description": "Identifier of the organization that owns the member group. Can only be set when the member group is created.",
                        "type": "string",
                        "x-entity-path": "memberGroupIdentifier/externalIdentifier/ownerID"
                      },
                      "storeId": {
                        "description": "The unique numeric ID for identifying the store.",
                        "format": "int32",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "memberGroupIdentifier/externalIdentifier/storeIdentifier/uniqueID"
                      },
                      "updatedBy": {
                        "description": "Individual who performed the most recent update to the member group.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "lastUpdatedBy"
                      },
                      "updatedDateTime": {
                        "description": "Date and time of the most recent update to the member group.",
                        "format": "date-time",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "lastUpdate"
                      },
                      "usage": {
                        "description": "Member group's usage. Can only be set when member group is created. If multiple usages are specified, only the first one will be applied. Available values:\n* GeneralPurpose - A general grouping of persons and/or organizations.\n* AccessControl - A group of persons specified as part of an access control policy.\n* CustomerTerritory - A group of customers, typically by territory.\n* CustomerServiceRepresentative - A group of customer service representatives, which in turn can have customer territory groups or customer accounts assigned to them.\n* RegisteredCustomer - A group of buyer organizations that have registered to a seller organization.\n* CustomerPrice - A group of customers that are entitled to get a contract's terms and conditions; often used to enforce custom pricing for the group. Customer price groups can comprise any user, who can be included and excluded explicitly.\n* CustomerSegment - A group of persons based on common attributes, for example demographics or purchase history. This group is used in marketing campaigns.\n* RFQResponseApproval - An organization that wants request for quote (RFQ) response approvals owns a member group of this usage. The group contains persons that are able to approve RFQ responses.\n* DisableInheritedRFQResponseApproval - An organization that does not want request for quote (RFQ) response approvals owns a member group of this usage.\n* OrderProcessApproval - An organization that wants order approvals owns a member group of this usage. The group contains persons that are able to approve orders.\n* DisableInheritedOrderProcessApproval - An organization that does not want order approvals owns a member group of this usage.\n* ContractSubmitApproval - An organization that wants contract approvals owns a member group of this usage. The group contains persons that are able to approve contracts.\n* DisableInheritedContractSubmitApproval - An organization that does not want contract approvals owns a member group of this usage.\n* UserRegistrationApproval - An organization that wants user registration approvals owns a member group of this usage. The group contains persons that are able to approve user registration requests.\n* DisableInheritedUserRegistrationApproval - An organization that does not want user registration approvals owns a member group of this usage.\n* ResellerRegistrationApproval - An organization that wants reseller registration approvals owns a member group of this usage. The group contains persons that are able to approve reseller registration requests.\n* DisableInheritedResellerRegistrationApproval - An organization that does not want reseller registration approvals owns a member group of this usage.\n",
                        "items": {
                          "enum": [
                            "GeneralPurpose",
                            "AccessControl",
                            "CustomerTerritory",
                            "CustomerServiceRepresentative",
                            "RegisteredCustomer",
                            "CustomerPrice",
                            "CustomerSegment",
                            "RFQResponseApproval",
                            "DisableInheritedRFQResponseApproval",
                            "OrderProcessApproval",
                            "DisableInheritedOrderProcessApproval",
                            "ContractSubmitApproval",
                            "DisableInheritedContractSubmitApproval",
                            "UserRegistrationApproval",
                            "DisableInheritedUserRegistrationApproval",
                            "ResellerRegistrationApproval",
                            "DisableInheritedResellerRegistrationApproval"
                          ],
                          "type": "string",
                          "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupUsageEnumerationType"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/memberGroup"
          }
        },
        "summary": "Find the member groups in a store by member group name and usage.",
        "x-expression-template": "{_wcf.ap='IBM_Admin_Details'}/MemberGroup[Usage='{usage}' and search(MemberGroupIdentifier/ExternalIdentifier/Name='{memberGroupName}')]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "getMemberGroup",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.GetMemberGroupType"
      }
    },
    "/rest/admin/v2/member-groups/{id}": {
      "delete": {
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/externalIdentifier/storeIdentifier/uniqueID"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation is successful."
          }
        },
        "summary": "Delete a member group by unique identifier.",
        "x-action-code": "Delete",
        "x-expression-template": "/MemberGroup[1]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "processMemberGroup",
        "x-flow-class": "com.ibm.commerce.rest.bod.DeleteBodMappingFlow",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.ProcessMemberGroupType"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A member group.",
              "properties": {
                "allowExport": {
                  "description": "Allow information about the users in the member group, for example their email addresses and names, to be exported to external applications using the \"Export customer segment\" feature.",
                  "type": "boolean"
                },
                "exportAll": {
                  "description": "When exporting a member group to external applications, if exportAll is true, then all customers in the member group are exported, including customers that have opted out from marketing communications. If exportAll is false, then only customers that have opted in to receive marketing communications will be exported.",
                  "type": "boolean"
                },
                "id": {
                  "description": "The unique numeric ID for identifying the member group.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "memberGroupIdentifier/uniqueID"
                },
                "name": {
                  "description": "The member group name.",
                  "type": "string",
                  "x-entity-path": "memberGroupIdentifier/externalIdentifier/name"
                },
                "ownerId": {
                  "description": "Identifier of the organization that owns the member group. Can only be set when the member group is created.",
                  "type": "string",
                  "x-entity-path": "memberGroupIdentifier/externalIdentifier/ownerID"
                },
                "storeId": {
                  "description": "The unique numeric ID for identifying the store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "memberGroupIdentifier/externalIdentifier/storeIdentifier/uniqueID"
                },
                "updatedBy": {
                  "description": "Individual who performed the most recent update to the member group.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "lastUpdatedBy"
                },
                "updatedDateTime": {
                  "description": "Date and time of the most recent update to the member group.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "lastUpdate"
                },
                "usage": {
                  "description": "Member group's usage. Can only be set when member group is created. If multiple usages are specified, only the first one will be applied. Available values:\n* GeneralPurpose - A general grouping of persons and/or organizations.\n* AccessControl - A group of persons specified as part of an access control policy.\n* CustomerTerritory - A group of customers, typically by territory.\n* CustomerServiceRepresentative - A group of customer service representatives, which in turn can have customer territory groups or customer accounts assigned to them.\n* RegisteredCustomer - A group of buyer organizations that have registered to a seller organization.\n* CustomerPrice - A group of customers that are entitled to get a contract's terms and conditions; often used to enforce custom pricing for the group. Customer price groups can comprise any user, who can be included and excluded explicitly.\n* CustomerSegment - A group of persons based on common attributes, for example demographics or purchase history. This group is used in marketing campaigns.\n* RFQResponseApproval - An organization that wants request for quote (RFQ) response approvals owns a member group of this usage. The group contains persons that are able to approve RFQ responses.\n* DisableInheritedRFQResponseApproval - An organization that does not want request for quote (RFQ) response approvals owns a member group of this usage.\n* OrderProcessApproval - An organization that wants order approvals owns a member group of this usage. The group contains persons that are able to approve orders.\n* DisableInheritedOrderProcessApproval - An organization that does not want order approvals owns a member group of this usage.\n* ContractSubmitApproval - An organization that wants contract approvals owns a member group of this usage. The group contains persons that are able to approve contracts.\n* DisableInheritedContractSubmitApproval - An organization that does not want contract approvals owns a member group of this usage.\n* UserRegistrationApproval - An organization that wants user registration approvals owns a member group of this usage. The group contains persons that are able to approve user registration requests.\n* DisableInheritedUserRegistrationApproval - An organization that does not want user registration approvals owns a member group of this usage.\n* ResellerRegistrationApproval - An organization that wants reseller registration approvals owns a member group of this usage. The group contains persons that are able to approve reseller registration requests.\n* DisableInheritedResellerRegistrationApproval - An organization that does not want reseller registration approvals owns a member group of this usage.\n",
                  "items": {
                    "enum": [
                      "GeneralPurpose",
                      "AccessControl",
                      "CustomerTerritory",
                      "CustomerServiceRepresentative",
                      "RegisteredCustomer",
                      "CustomerPrice",
                      "CustomerSegment",
                      "RFQResponseApproval",
                      "DisableInheritedRFQResponseApproval",
                      "OrderProcessApproval",
                      "DisableInheritedOrderProcessApproval",
                      "ContractSubmitApproval",
                      "DisableInheritedContractSubmitApproval",
                      "UserRegistrationApproval",
                      "DisableInheritedUserRegistrationApproval",
                      "ResellerRegistrationApproval",
                      "DisableInheritedResellerRegistrationApproval"
                    ],
                    "type": "string",
                    "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupUsageEnumerationType"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupType"
            },
            "x-entity-path": "dataArea/memberGroup[1]"
          }
        },
        "summary": "Get a member group by unique identifier.",
        "x-expression-template": "{_wcf.ap='IBM_Admin_Details'}/MemberGroup[MemberGroupIdentifier[(UniqueID='{id}')]]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "getMemberGroup",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.GetMemberGroupType"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/externalIdentifier/storeIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "A member group.",
              "properties": {
                "allowExport": {
                  "description": "Allow information about the users in the member group, for example their email addresses and names, to be exported to external applications using the \"Export customer segment\" feature.",
                  "type": "boolean"
                },
                "exportAll": {
                  "description": "When exporting a member group to external applications, if exportAll is true, then all customers in the member group are exported, including customers that have opted out from marketing communications. If exportAll is false, then only customers that have opted in to receive marketing communications will be exported.",
                  "type": "boolean"
                },
                "id": {
                  "description": "The unique numeric ID for identifying the member group.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "memberGroupIdentifier/uniqueID"
                },
                "name": {
                  "description": "The member group name.",
                  "type": "string",
                  "x-entity-path": "memberGroupIdentifier/externalIdentifier/name"
                },
                "ownerId": {
                  "description": "Identifier of the organization that owns the member group. Can only be set when the member group is created.",
                  "type": "string",
                  "x-entity-path": "memberGroupIdentifier/externalIdentifier/ownerID"
                },
                "storeId": {
                  "description": "The unique numeric ID for identifying the store.",
                  "format": "int32",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "memberGroupIdentifier/externalIdentifier/storeIdentifier/uniqueID"
                },
                "updatedBy": {
                  "description": "Individual who performed the most recent update to the member group.",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "lastUpdatedBy"
                },
                "updatedDateTime": {
                  "description": "Date and time of the most recent update to the member group.",
                  "format": "date-time",
                  "readOnly": true,
                  "type": "string",
                  "x-entity-path": "lastUpdate"
                },
                "usage": {
                  "description": "Member group's usage. Can only be set when member group is created. If multiple usages are specified, only the first one will be applied. Available values:\n* GeneralPurpose - A general grouping of persons and/or organizations.\n* AccessControl - A group of persons specified as part of an access control policy.\n* CustomerTerritory - A group of customers, typically by territory.\n* CustomerServiceRepresentative - A group of customer service representatives, which in turn can have customer territory groups or customer accounts assigned to them.\n* RegisteredCustomer - A group of buyer organizations that have registered to a seller organization.\n* CustomerPrice - A group of customers that are entitled to get a contract's terms and conditions; often used to enforce custom pricing for the group. Customer price groups can comprise any user, who can be included and excluded explicitly.\n* CustomerSegment - A group of persons based on common attributes, for example demographics or purchase history. This group is used in marketing campaigns.\n* RFQResponseApproval - An organization that wants request for quote (RFQ) response approvals owns a member group of this usage. The group contains persons that are able to approve RFQ responses.\n* DisableInheritedRFQResponseApproval - An organization that does not want request for quote (RFQ) response approvals owns a member group of this usage.\n* OrderProcessApproval - An organization that wants order approvals owns a member group of this usage. The group contains persons that are able to approve orders.\n* DisableInheritedOrderProcessApproval - An organization that does not want order approvals owns a member group of this usage.\n* ContractSubmitApproval - An organization that wants contract approvals owns a member group of this usage. The group contains persons that are able to approve contracts.\n* DisableInheritedContractSubmitApproval - An organization that does not want contract approvals owns a member group of this usage.\n* UserRegistrationApproval - An organization that wants user registration approvals owns a member group of this usage. The group contains persons that are able to approve user registration requests.\n* DisableInheritedUserRegistrationApproval - An organization that does not want user registration approvals owns a member group of this usage.\n* ResellerRegistrationApproval - An organization that wants reseller registration approvals owns a member group of this usage. The group contains persons that are able to approve reseller registration requests.\n* DisableInheritedResellerRegistrationApproval - An organization that does not want reseller registration approvals owns a member group of this usage.\n",
                  "items": {
                    "enum": [
                      "GeneralPurpose",
                      "AccessControl",
                      "CustomerTerritory",
                      "CustomerServiceRepresentative",
                      "RegisteredCustomer",
                      "CustomerPrice",
                      "CustomerSegment",
                      "RFQResponseApproval",
                      "DisableInheritedRFQResponseApproval",
                      "OrderProcessApproval",
                      "DisableInheritedOrderProcessApproval",
                      "ContractSubmitApproval",
                      "DisableInheritedContractSubmitApproval",
                      "UserRegistrationApproval",
                      "DisableInheritedUserRegistrationApproval",
                      "ResellerRegistrationApproval",
                      "DisableInheritedResellerRegistrationApproval"
                    ],
                    "type": "string",
                    "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupUsageEnumerationType"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupType"
            },
            "x-entity-path": "dataArea/memberGroup[1]"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "summary": "Update a member group by unique identifier.",
        "x-action-code": "Change",
        "x-expression-template": "/MemberGroup[1]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "changeMemberGroup",
        "x-flow-class": "com.ibm.commerce.rest.bod.PatchBodMappingFlow",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.ChangeMemberGroupType"
      }
    },
    "/rest/admin/v2/member-groups/{id}/activate": {
      "post": {
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/externalIdentifier/storeIdentifier/uniqueID"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "summary": "Activates a member group by assembling the information for the group that is within the member group condition element authoring database tables. The information is transformed and persisted to the runtime database tables for use in evaluating whether a user implicitly belongs to a member group.",
        "x-action-code": "Activate",
        "x-expression-template": "/MemberGroup[1]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "processMemberGroup",
        "x-flow-class": "com.ibm.commerce.rest.bod.PostBodMappingFlow",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.ProcessMemberGroupType"
      }
    },
    "/rest/admin/v2/member-groups/{id}/condition-elements": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "uniqueId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of member group condition elements.",
              "properties": {
                "count": {
                  "description": "The number of condition elements found.",
                  "format": "int64",
                  "type": "integer"
                },
                "items": {
                  "items": {
                    "description": "A member group condition element.",
                    "properties": {
                      "id": {
                        "description": "The unique numeric ID for identifying the condition element.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer",
                        "x-entity-path": "memberGroupConditionElementIdentifier/uniqueID"
                      },
                      "name": {
                        "description": "The name of the condition element. Can only be set when the member group condition element is created.",
                        "type": "string",
                        "x-entity-path": "memberGroupConditionElementIdentifier/name"
                      },
                      "nameValuePairVariable": {
                        "description": "The name-value pair variables associated with a member group condition element. Applicable to condition elements of type simpleCondition only. Name-value pairs can only be set when the member group condition element is created. To change a name-value pair, delete the condition element and create it again with the desired name-value pairs.",
                        "items": {
                          "description": "A mapping of variable names to values as qualifiers within the context of a condition element.",
                          "properties": {
                            "id": {
                              "description": "The unique numeric ID for the condition element variable.",
                              "readOnly": true,
                              "type": "string",
                              "x-entity-path": "uniqueID"
                            },
                            "name": {
                              "description": "The name of the condition element variable.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value of the condition element variable.",
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupConditionNameValuePairVariableType"
                        },
                        "type": "array"
                      },
                      "negate": {
                        "description": "Whether or not to negate the condition element. Available values:\n* true - The condition element result is negated.\n* false - The condition element result is not negated.\n",
                        "type": "boolean"
                      },
                      "parentElementName": {
                        "description": "The name of the condition element's parent element.",
                        "type": "string",
                        "x-entity-path": "parentElementIdentifier/name"
                      },
                      "simpleConditionOperator": {
                        "description": "For simple condition elements, the relational operator between the simpleConditionVariable and simpleConditionValue.",
                        "type": "string"
                      },
                      "simpleConditionValue": {
                        "description": "For simple condition elements, the value that simpleConditionVariable will be compared to for determining membership of a member group.",
                        "type": "string"
                      },
                      "simpleConditionVariable": {
                        "description": "For simple condition elements, the variable to assess to determine membership of a member group.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The usage of the member group condition element. Available values:\n* andListCondition - A boolean expression that consists of a list of boolean expressions joined by the boolean AND operator.\n* orListCondition - A boolean expression that consists of a list of boolean expressions joined by the boolean OR operator.\n* simpleCondition - A simple condition boolean expression.  A simple condition consists of a variable, an operator, and a value with optional qualifiers.\n* trueCondition - A boolean expression that always evaluates as true.\n",
                        "enum": [
                          "andListCondition",
                          "orListCondition",
                          "simpleCondition",
                          "trueCondition"
                        ],
                        "type": "string",
                        "x-entity-path": "conditionUsage"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupConditionElementType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/memberGroup[1]/conditionElement"
          }
        },
        "summary": "Get the condition elements that are part of a member group.",
        "x-expression-template": "{_wcf.ap='IBM_Admin_Details'}/MemberGroup[MemberGroupIdentifier[(UniqueID='{id}')]]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "getMemberGroup",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.GetMemberGroupType"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "uniqueId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "A member group condition element.",
              "properties": {
                "id": {
                  "description": "The unique numeric ID for identifying the condition element.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "memberGroupConditionElementIdentifier/uniqueID"
                },
                "name": {
                  "description": "The name of the condition element. Can only be set when the member group condition element is created.",
                  "type": "string",
                  "x-entity-path": "memberGroupConditionElementIdentifier/name"
                },
                "nameValuePairVariable": {
                  "description": "The name-value pair variables associated with a member group condition element. Applicable to condition elements of type simpleCondition only. Name-value pairs can only be set when the member group condition element is created. To change a name-value pair, delete the condition element and create it again with the desired name-value pairs.",
                  "items": {
                    "description": "A mapping of variable names to values as qualifiers within the context of a condition element.",
                    "properties": {
                      "id": {
                        "description": "The unique numeric ID for the condition element variable.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "uniqueID"
                      },
                      "name": {
                        "description": "The name of the condition element variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value of the condition element variable.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupConditionNameValuePairVariableType"
                  },
                  "type": "array"
                },
                "negate": {
                  "description": "Whether or not to negate the condition element. Available values:\n* true - The condition element result is negated.\n* false - The condition element result is not negated.\n",
                  "type": "boolean"
                },
                "parentElementName": {
                  "description": "The name of the condition element's parent element.",
                  "type": "string",
                  "x-entity-path": "parentElementIdentifier/name"
                },
                "simpleConditionOperator": {
                  "description": "For simple condition elements, the relational operator between the simpleConditionVariable and simpleConditionValue.",
                  "type": "string"
                },
                "simpleConditionValue": {
                  "description": "For simple condition elements, the value that simpleConditionVariable will be compared to for determining membership of a member group.",
                  "type": "string"
                },
                "simpleConditionVariable": {
                  "description": "For simple condition elements, the variable to assess to determine membership of a member group.",
                  "type": "string"
                },
                "type": {
                  "description": "The usage of the member group condition element. Available values:\n* andListCondition - A boolean expression that consists of a list of boolean expressions joined by the boolean AND operator.\n* orListCondition - A boolean expression that consists of a list of boolean expressions joined by the boolean OR operator.\n* simpleCondition - A simple condition boolean expression.  A simple condition consists of a variable, an operator, and a value with optional qualifiers.\n* trueCondition - A boolean expression that always evaluates as true.\n",
                  "enum": [
                    "andListCondition",
                    "orListCondition",
                    "simpleCondition",
                    "trueCondition"
                  ],
                  "type": "string",
                  "x-entity-path": "conditionUsage"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupConditionElementType"
            },
            "x-entity-path": "dataArea/memberGroup[1]/conditionElement[1]"
          }
        ],
        "responses": {
          "201": {
            "description": "The operation is successful.",
            "headers": {
              "Location": {
                "description": "The URI of the member group condition element.",
                "type": "string"
              }
            },
            "x-entity-path": "dataArea/memberGroup[1]/conditionElement[1]/memberGroupConditionElementIdentifier/uniqueID"
          }
        },
        "summary": "Create a condition element within a member group.",
        "x-action-code": "Add",
        "x-expression-template": "/MemberGroup[1]/ConditionElement[1]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "changeMemberGroup",
        "x-flow-class": "com.ibm.commerce.rest.bod.PostBodMappingFlow",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.ChangeMemberGroupType",
        "x-request-verb": "change",
        "x-response-verb": "respond"
      }
    },
    "/rest/admin/v2/member-groups/{id}/condition-elements/{elementId}": {
      "delete": {
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "uniqueId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          },
          {
            "description": "The unique numeric ID for identifying the condition element.",
            "format": "int32",
            "in": "path",
            "name": "elementId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/memberGroup[1]/conditionElement[1]/memberGroupConditionElementIdentifier/uniqueID"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation is successful."
          }
        },
        "summary": "Delete a condition element within a member group.",
        "x-action-code": "Delete",
        "x-expression-template": "/MemberGroup[1]/ConditionElement[1]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "changeMemberGroup",
        "x-flow-class": "com.ibm.commerce.rest.bod.DeleteBodMappingFlow",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.ChangeMemberGroupType",
        "x-request-verb": "change",
        "x-response-verb": "respond"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "uniqueId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          },
          {
            "description": "The unique numeric ID for identifying the condition element.",
            "format": "int32",
            "in": "path",
            "name": "elementId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/memberGroup[1]/conditionElement[1]/memberGroupConditionElementIdentifier/uniqueID"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "A member group condition element.",
              "properties": {
                "id": {
                  "description": "The unique numeric ID for identifying the condition element.",
                  "format": "int64",
                  "readOnly": true,
                  "type": "integer",
                  "x-entity-path": "memberGroupConditionElementIdentifier/uniqueID"
                },
                "name": {
                  "description": "The name of the condition element. Can only be set when the member group condition element is created.",
                  "type": "string",
                  "x-entity-path": "memberGroupConditionElementIdentifier/name"
                },
                "nameValuePairVariable": {
                  "description": "The name-value pair variables associated with a member group condition element. Applicable to condition elements of type simpleCondition only. Name-value pairs can only be set when the member group condition element is created. To change a name-value pair, delete the condition element and create it again with the desired name-value pairs.",
                  "items": {
                    "description": "A mapping of variable names to values as qualifiers within the context of a condition element.",
                    "properties": {
                      "id": {
                        "description": "The unique numeric ID for the condition element variable.",
                        "readOnly": true,
                        "type": "string",
                        "x-entity-path": "uniqueID"
                      },
                      "name": {
                        "description": "The name of the condition element variable.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value of the condition element variable.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupConditionNameValuePairVariableType"
                  },
                  "type": "array"
                },
                "negate": {
                  "description": "Whether or not to negate the condition element. Available values:\n* true - The condition element result is negated.\n* false - The condition element result is not negated.\n",
                  "type": "boolean"
                },
                "parentElementName": {
                  "description": "The name of the condition element's parent element.",
                  "type": "string",
                  "x-entity-path": "parentElementIdentifier/name"
                },
                "simpleConditionOperator": {
                  "description": "For simple condition elements, the relational operator between the simpleConditionVariable and simpleConditionValue.",
                  "type": "string"
                },
                "simpleConditionValue": {
                  "description": "For simple condition elements, the value that simpleConditionVariable will be compared to for determining membership of a member group.",
                  "type": "string"
                },
                "simpleConditionVariable": {
                  "description": "For simple condition elements, the variable to assess to determine membership of a member group.",
                  "type": "string"
                },
                "type": {
                  "description": "The usage of the member group condition element. Available values:\n* andListCondition - A boolean expression that consists of a list of boolean expressions joined by the boolean AND operator.\n* orListCondition - A boolean expression that consists of a list of boolean expressions joined by the boolean OR operator.\n* simpleCondition - A simple condition boolean expression.  A simple condition consists of a variable, an operator, and a value with optional qualifiers.\n* trueCondition - A boolean expression that always evaluates as true.\n",
                  "enum": [
                    "andListCondition",
                    "orListCondition",
                    "simpleCondition",
                    "trueCondition"
                  ],
                  "type": "string",
                  "x-entity-path": "conditionUsage"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupConditionElementType"
            },
            "x-entity-path": "dataArea/memberGroup[1]/conditionElement[1]"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "summary": "Update a condition element within a member group.",
        "x-action-code": "Change",
        "x-expression-template": "/MemberGroup[1]/ConditionElement[1]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "changeMemberGroup",
        "x-flow-class": "com.ibm.commerce.rest.bod.PatchBodMappingFlow",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.ChangeMemberGroupType"
      }
    },
    "/rest/admin/v2/member-groups/{id}/descriptions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "uniqueId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          },
          {
            "description": "The integer(s) for identifying the language of the member group description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center. Multiple identifiers should be specified as a comma-separated list.",
            "in": "query",
            "name": "dataLanguageIds",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A collection of member group descriptors.",
              "properties": {
                "count": {
                  "description": "The number of descriptions found.",
                  "format": "int64",
                  "type": "integer"
                },
                "items": {
                  "items": {
                    "description": "A member group descriptor.",
                    "properties": {
                      "languageId": {
                        "description": "The integer for identifying the language of the member group description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                        "format": "int32",
                        "type": "integer",
                        "x-entity-path": "language"
                      },
                      "longDescription": {
                        "description": "Detailed description of a member group.",
                        "type": "string"
                      },
                      "shortDescription": {
                        "description": "Brief description of a member group.",
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupDescriptionType"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupDescription"
          }
        },
        "summary": "Get the descriptions that are part of a member group.",
        "x-expression-template": "{_wcf.ap='IBM_Admin_Details';_wcf.dataLanguageIds='{dataLanguageIds}'}/MemberGroup[MemberGroupIdentifier[(UniqueID='{id}')]]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "getMemberGroup",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.GetMemberGroupType"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "uniqueId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "A member group descriptor.",
              "properties": {
                "languageId": {
                  "description": "The integer for identifying the language of the member group description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "language"
                },
                "longDescription": {
                  "description": "Detailed description of a member group.",
                  "type": "string"
                },
                "shortDescription": {
                  "description": "Brief description of a member group.",
                  "type": "string"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupDescriptionType"
            },
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupDescription[1]"
          }
        ],
        "responses": {
          "201": {
            "description": "The operation is successful.",
            "headers": {
              "Location": {
                "description": "The URI of the member group condition element.",
                "type": "string"
              }
            },
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupDescription[1]/language"
          }
        },
        "summary": "Create a description within a member group.",
        "x-action-code": "Add",
        "x-expression-template": "/MemberGroup[1]/MemberGroupDescription[1]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "changeMemberGroup",
        "x-flow-class": "com.ibm.commerce.rest.bod.PostBodMappingFlow",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.ChangeMemberGroupType",
        "x-request-verb": "change",
        "x-response-verb": "respond"
      }
    },
    "/rest/admin/v2/member-groups/{id}/descriptions/{languageId}": {
      "delete": {
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "uniqueId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          },
          {
            "description": "The integer for identifying the language of the member group description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
            "format": "int32",
            "in": "path",
            "name": "languageId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupDescription[1]/language"
          }
        ],
        "responses": {
          "204": {
            "description": "The operation is successful."
          }
        },
        "summary": "Delete a description within a member group.",
        "x-action-code": "Delete",
        "x-expression-template": "/MemberGroup[1]/MemberGroupDescription[1]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "changeMemberGroup",
        "x-flow-class": "com.ibm.commerce.rest.bod.DeleteBodMappingFlow",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.ChangeMemberGroupType",
        "x-request-verb": "change",
        "x-response-verb": "respond"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "uniqueId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          },
          {
            "description": "The integer for identifying the language of the member group description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
            "format": "int32",
            "in": "path",
            "name": "languageId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful.",
            "schema": {
              "description": "A member group descriptor.",
              "properties": {
                "languageId": {
                  "description": "The integer for identifying the language of the member group description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "language"
                },
                "longDescription": {
                  "description": "Detailed description of a member group.",
                  "type": "string"
                },
                "shortDescription": {
                  "description": "Brief description of a member group.",
                  "type": "string"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupDescriptionType"
            },
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupDescription[1]"
          }
        },
        "summary": "Get the descriptions that are part of a member group for a specific language.",
        "x-expression-template": "{_wcf.ap='IBM_Admin_Details';_wcf.dataLanguageIds='{languageId}'}/MemberGroup[MemberGroupIdentifier[(UniqueID='{id}')]]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "getMemberGroup",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.GetMemberGroupType"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The unique numeric ID for identifying the member group.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer",
            "x-context-data": "uniqueId",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupIdentifier/uniqueID"
          },
          {
            "description": "The integer for identifying the language of the member group description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
            "format": "int32",
            "in": "path",
            "name": "languageId",
            "required": true,
            "type": "integer",
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupDescription[1]/language"
          },
          {
            "description": "The unique numeric ID for identifying the store.",
            "format": "int32",
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "integer",
            "x-context-data": "storeId"
          },
          {
            "description": "The request body.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "description": "A member group descriptor.",
              "properties": {
                "languageId": {
                  "description": "The integer for identifying the language of the member group description. For a list of the integers that map to the supported default languages, refer to the Knowledge Center.",
                  "format": "int32",
                  "type": "integer",
                  "x-entity-path": "language"
                },
                "longDescription": {
                  "description": "Detailed description of a member group.",
                  "type": "string"
                },
                "shortDescription": {
                  "description": "Brief description of a member group.",
                  "type": "string"
                }
              },
              "type": "object",
              "x-entity-class": "com.ibm.commerce.member.facade.datatypes.MemberGroupDescriptionType"
            },
            "x-entity-path": "dataArea/memberGroup[1]/memberGroupDescription[1]"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation is successful."
          }
        },
        "summary": "Update a description within a member group.",
        "x-action-code": "Change",
        "x-expression-template": "/MemberGroup[1]/MemberGroupDescription[1]",
        "x-facade-client-class": "com.ibm.commerce.member.facade.client.MemberFacadeClient",
        "x-facade-client-method": "changeMemberGroup",
        "x-flow-class": "com.ibm.commerce.rest.bod.PatchBodMappingFlow",
        "x-request-bod-class": "com.ibm.commerce.member.facade.datatypes.ChangeMemberGroupType"
      }
    },
    "/rest/admin/v2/member-group-memberships": {
      "get": {
        "tags": [
          "member-group-memberships"
        ],
        "description": "Get a collection of member group memberships.",
        "operationId": "getMemberGroupMemberships",
        "parameters": [
          {
            "name": "memberId",
            "in": "query",
            "description": "The user ID or organization ID that is associated to the member group.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "memberGroupId",
            "in": "query",
            "description": "The member group ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "field1",
            "in": "query",
            "description": "The customizable field.",
            "required": false,
            "type": "string"
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "The member excluded indicator that specifies if the member (user or organization) is to be explicitly included or excluded from the member group. Valid values are 1 to exclude the member from the member group, and 0 to include the member in the member group. A member can belong to a member group implicitly by the conditions of the member group. When evaluating if a member belongs to a member group, explicit exclusion takes precedence, then explicit inclusion, and then finally implicit inclusion.",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of member group memberships.",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The total number of items."
                },
                "items": {
                  "type": "array",
                  "description": "The items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "memberId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The user ID or organization ID that is associated to the member group."
                      },
                      "memberGroupId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The member group ID."
                      },
                      "field1": {
                        "type": "string",
                        "description": "The customizable field."
                      },
                      "exclude": {
                        "type": "string",
                        "description": "The member excluded indicator that specifies if the member (user or organization) is to be explicitly included or excluded from the member group. Valid values are 1 to exclude the member from the member group, and 0 to include the member in the member group. A member can belong to a member group implicitly by the conditions of the member group. When evaluating if a member belongs to a member group, explicit exclusion takes precedence, then explicit inclusion, and then finally implicit inclusion."
                      }
                    },
                    "description": "A member group membership, which is an association of a member (user or organization) to a member group."
                  }
                }
              },
              "description": "A collection of member group memberships."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "post": {
        "tags": [
          "member-group-memberships"
        ],
        "description": "Create a member group membership.",
        "operationId": "createMemberGroupMembership",
        "parameters": [
          {
            "in": "body",
            "name": "MemberGroupMembership",
            "description": "A member group membership, which is an association of a member (user or organization) to a member group.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "memberId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The user ID or organization ID that is associated to the member group."
                },
                "memberGroupId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The member group ID."
                },
                "field1": {
                  "type": "string",
                  "description": "The customizable field."
                },
                "exclude": {
                  "type": "string",
                  "description": "The member excluded indicator that specifies if the member (user or organization) is to be explicitly included or excluded from the member group. Valid values are 1 to exclude the member from the member group, and 0 to include the member in the member group. A member can belong to a member group implicitly by the conditions of the member group. When evaluating if a member belongs to a member group, explicit exclusion takes precedence, then explicit inclusion, and then finally implicit inclusion."
                }
              },
              "description": "A member group membership, which is an association of a member (user or organization) to a member group."
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      }
    },
    "/rest/admin/v2/member-group-memberships/memberId:{memberId},memberGroupId:{memberGroupId}": {
      "get": {
        "tags": [
          "member-group-memberships"
        ],
        "description": "Get a member group membership.",
        "operationId": "getMemberGroupMembershipById",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A member group membership, which is an association of a member (user or organization) to a member group.",
            "schema": {
              "type": "object",
              "properties": {
                "memberId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The user ID or organization ID that is associated to the member group."
                },
                "memberGroupId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The member group ID."
                },
                "field1": {
                  "type": "string",
                  "description": "The customizable field."
                },
                "exclude": {
                  "type": "string",
                  "description": "The member excluded indicator that specifies if the member (user or organization) is to be explicitly included or excluded from the member group. Valid values are 1 to exclude the member from the member group, and 0 to include the member in the member group. A member can belong to a member group implicitly by the conditions of the member group. When evaluating if a member belongs to a member group, explicit exclusion takes precedence, then explicit inclusion, and then finally implicit inclusion."
                }
              },
              "description": "A member group membership, which is an association of a member (user or organization) to a member group."
            }
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "delete": {
        "tags": [
          "member-group-memberships"
        ],
        "description": "Delete a member group membership.",
        "operationId": "deleteMemberGroupMembershipById",
        "parameters": [],
        "responses": {
          "204": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "patch": {
        "tags": [
          "member-group-memberships"
        ],
        "description": "",
        "operationId": "updateMemberGroupMembershipById",
        "parameters": [
          {
            "in": "body",
            "name": "MemberGroupMembership",
            "description": "A member group membership, which is an association of a member (user or organization) to a member group.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "memberId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The user ID or organization ID that is associated to the member group."
                },
                "memberGroupId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The member group ID."
                },
                "field1": {
                  "type": "string",
                  "description": "The customizable field."
                },
                "exclude": {
                  "type": "string",
                  "description": "The member excluded indicator that specifies if the member (user or organization) is to be explicitly included or excluded from the member group. Valid values are 1 to exclude the member from the member group, and 0 to include the member in the member group. A member can belong to a member group implicitly by the conditions of the member group. When evaluating if a member belongs to a member group, explicit exclusion takes precedence, then explicit inclusion, and then finally implicit inclusion."
                }
              },
              "description": "A member group membership, which is an association of a member (user or organization) to a member group."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation was successful."
          },
          "400": {
            "description": "There was a client error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          },
          "404": {
            "description": "The resource was not found."
          },
          "500": {
            "description": "There was a server error.",
            "schema": {
              "type": "object",
              "properties": {
                "requestId": {
                  "type": "string",
                  "description": "The request identifier."
                },
                "errors": {
                  "type": "array",
                  "description": "The errors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "The error message code."
                      },
                      "message": {
                        "type": "string",
                        "description": "The error message."
                      },
                      "messageKey": {
                        "type": "string",
                        "description": "The error message key."
                      },
                      "messageArguments": {
                        "type": "array",
                        "description": "The arguments used to construct the error message.",
                        "items": {
                          "type": "object"
                        }
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "locale": {
                        "type": "string",
                        "description": "The locale of the error message."
                      }
                    },
                    "description": "The error message item model."
                  }
                }
              },
              "description": "The error message model."
            }
          }
        }
      },
      "parameters": [
        {
          "name": "memberId",
          "in": "path",
          "description": "The user ID or organization ID that is associated to the member group.",
          "required": true,
          "type": "integer",
          "format": "int64"
        },
        {
          "name": "memberGroupId",
          "in": "path",
          "description": "The member group ID.",
          "required": true,
          "type": "integer",
          "format": "int64"
        }
      ]
    },
    "/wcs/resources/store/{storeId}/person/updateMemberPassword": {
      "post": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {}
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": false,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "required": [
                "logonId"
              ],
              "description": "Request of ResetPasswordAdministratorCmd.",
              "properties": {
                "URL": {
                  "type": "string",
                  "description": "The URL to call when the command completes successfully."
                },
                "administratorPassword": {
                  "type": "string",
                  "description": "The administrator password."
                },
                "logonId": {
                  "type": "string",
                  "description": "The logonId of shopper to reset the password for."
                }
              }
            }
          },
          {
            "enum": [
              "resetPasswordAdmin",
              "resetPasswordOnBehalf"
            ],
            "name": "mode",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The mode in which resetPassword is run. ResetPassword can be executed in an administrator session or in an on-behalf session for a user. Default value is 'resetPasswordAdmin' if no valid value was supplied."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Allows a CSR or CSS to reset the password for a registered user. It also allows resetting password when the CSR / CSS has established a session to act on behalf of a user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Reset password",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "operationId": "Person-resetPasswordByAdmin"
      }
    },
    "/wcs/resources/store/{storeId}/person/@self/contact": {
      "post": {
        "responses": {
          "200": {
            "description": "No response was specified.",
            "schema": {
              "required": [
                "userId"
              ],
              "description": "User identifier.",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "The user identifier."
                }
              }
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "required": false,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {}
          }
        ],
        "tags": [
          "Contact"
        ],
        "description": "Creates a new contact in a person's address book.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Create contact in address book",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "operationId": "Contact-addPersonContact"
      },
      "get": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {}
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": false,
            "type": "string",
            "description": "The addressType to filter contacts by. All contacts will be returned if a valid value is not supplied for this parameter.",
            "in": "query",
            "name": "addressType",
            "enum": [
              "Shipping",
              "Billing",
              "ShippingAndBilling"
            ]
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Contact"
        ],
        "description": "Gets the contacts in a person's address book. If the addressType optional query parameter is passed in, the returned contacts are filtered by addressType.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get contact from address book",
        "operationId": "Contact-getAllPersonContact"
      }
    },
    "/wcs/resources/store/{storeId}/person/@self/contextattributes/{attributeName}/{value}": {
      "delete": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "addressId": [
                  "12344"
                ],
                "userId": [
                  "4054"
                ]
              }
            },
            "schema": {
              "required": [
                "addressId",
                "userId"
              ],
              "description": "Delete context attribute response.",
              "properties": {
                "userId": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "description": "The user identifier list."
                },
                "addressId": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "description": "The address identifier list."
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "Name of the context attribute as listed in MBRATTR.",
            "in": "path",
            "name": "attributeName"
          },
          {
            "required": true,
            "type": "string",
            "description": "Value of the context attribute you want to delete as listed in MBRATTRVAL.",
            "in": "path",
            "name": "value"
          },
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Deletes one or more values of a context attribute for a registered user by removing associated entry in the MBRATTRVAL table.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Delete context attribute values",
        "operationId": "Person-deleteContextAttributeForPerson"
      }
    },
    "/wcs/resources/store/{storeId}/person": {
      "post": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "required": [
                "addressId",
                "logonId",
                "userId"
              ],
              "description": "Response of UserRegistrationAdminAddCmd.",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "The user unique identifier."
                },
                "logonId": {
                  "type": "string",
                  "description": "The logon ID of the user."
                },
                "addressId": {
                  "type": "string",
                  "description": "The address identifier of the user."
                }
              }
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "required": false,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "required": [
                "logonId",
                "logonPassword"
              ],
              "description": "Request of UserRegistrationAdminAdd.",
              "properties": {
                "address1": {
                  "description": "The registrant's street address, to a maximum of three lines of information.",
                  "type": "string"
                },
                "address2": {
                  "description": "The registrant's street address, to a maximum of three lines of information.",
                  "type": "string"
                },
                "address3": {
                  "description": "The registrant's street address, to a maximum of three lines of information.",
                  "type": "string"
                },
                "addressField1": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "addressField2": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "addressField3": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "addressType": {
                  "description": "The purpose of the address. Valid values are: S - shipto, B - billto, SB - shipto and billto (The default value.).",
                  "type": "string"
                },
                "age": {
                  "description": "The registrant's age.",
                  "type": "string"
                },
                "alternateId": {
                  "description": "A special ID assigned by the registrant's business organization or organizational unit to this particular registrant..",
                  "type": "string"
                },
                "attributeName_storeId_action_sequence": {
                  "description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: {attributeName}_{storeId}_{action}_{sequence}: string. The curly braced values must be replaced as follows: attributeName is any attribute specified in MBRATTRVAL table, storeId is the numerical id of the store (or null to indicate all stores), action is either 'r' (for replace) or 'd' (for delete), and sequence to indicate the sequence of this value in relation to other values for this attribute. Some examples. 'JobFunction_10001_r_1' : 'ProductManager' is specifying that the user has a JobFunction attribute value of ProductManager for the store 10001, this is for replacing the first (r_1) JobFunction attribute value for the user. JobFunction_null_d deletes all job functions for the user in all stores. ",
                  "type": "string"
                },
                "bestCallingTime": {
                  "description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant.",
                  "type": "string"
                },
                "billingCode": {
                  "description": "The registrant's organization's code to identify the shipping or billing addresses and cost center.",
                  "type": "string"
                },
                "billingCodeType": {
                  "description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer.",
                  "type": "string"
                },
                "challengeAnswer": {
                  "description": "Answer to the challenge question.",
                  "type": "string"
                },
                "challengeQuestion": {
                  "description": "Challenge question for verbal confirmation of the customer's identity.",
                  "type": "string"
                },
                "children": {
                  "description": "The number of children the registrant has.",
                  "type": "string"
                },
                "city": {
                  "description": "The name of the city where the registrant resides.",
                  "type": "string"
                },
                "companyName": {
                  "description": "The company name of the organization that the registrant represents, obtained when filling in demographic information.",
                  "type": "string"
                },
                "country": {
                  "description": "The name of the country or region where the registrant resides.",
                  "type": "string"
                },
                "dateOfBirth": {
                  "description": "Date of birth. The format is yyyy-mm-dd, for example: 1980-01-01.",
                  "type": "string"
                },
                "departmentNumber": {
                  "description": "The department identifier for the registrant.",
                  "type": "string"
                },
                "description": {
                  "description": "A description of the registrant.",
                  "type": "string"
                },
                "email1": {
                  "description": "The registrant's primary e-mail or Web address.",
                  "type": "string"
                },
                "email2": {
                  "description": "The registrant's secondary e-mail or Web address.",
                  "type": "string"
                },
                "employeeId": {
                  "description": "The registrant's ID with his or her employer.",
                  "type": "string"
                },
                "employeeType": {
                  "description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time).",
                  "type": "string"
                },
                "fax1": {
                  "description": "The registrant's primary facsimile number.",
                  "type": "string"
                },
                "fax2": {
                  "description": "The registrant's secondary facsimile number.",
                  "type": "string"
                },
                "firstName": {
                  "description": "The first name of the registrant.",
                  "type": "string"
                },
                "gender": {
                  "description": "The registrant's gender.",
                  "type": "string"
                },
                "hobbies": {
                  "description": "The registrant's hobbies.",
                  "type": "string"
                },
                "household": {
                  "description": "The number of people in the registrant's household; the default is 1.",
                  "type": "string"
                },
                "income": {
                  "description": "The registrant's annual income.",
                  "type": "string"
                },
                "incomeCurrency": {
                  "description": "The currency in which the registrant's income is paid.",
                  "type": "string"
                },
                "lastName": {
                  "description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory.",
                  "type": "string"
                },
                "logonId": {
                  "description": "The registrant's logon ID. If you are using LDAP, changing a user's logonID is not supported because it would require deleting and recreating the user in LDAP. This process would cause all non-WebSphere Commerce user attributes, such as the password, to be lost. If you are not using LDAP, changing the user's logon ID is not recommended, because the promotion subsystem stores the logon ID of the creator of the promotion in the XMLPARAM column of the PX_PROMOTION table. Note: When the UserRegistrationUpdate command is used to change the logonID, the command will automatically update the USERS.DN database column. Do not assume that ADDRESS.NICKNAME will also change. Instead, the following finder should be used to get the single self address of a user: AddressAccessBean.findSelfAddressByMember(Long memberID).",
                  "type": "string"
                },
                "logonPassword": {
                  "description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server.",
                  "type": "string"
                },
                "logonPasswordVerify": {
                  "description": "Required if the logonPassword is used: The registrant's password, entered a second time.",
                  "type": "string"
                },
                "manager": {
                  "description": "The name of the registrant's manager.",
                  "type": "string"
                },
                "maritalStatus": {
                  "description": "The registrant's marital status.",
                  "type": "string"
                },
                "marketingTrackingConsent": {
                  "description": "The marketing tracking consent. 0 means opt-out, 1 means opt-in.",
                  "type": "string"
                },
                "middleName": {
                  "description": "The middle name of the registrant.",
                  "type": "string"
                },
                "mobilePhone1": {
                  "description": "The registrant's mobile phone number used for SMS, for example, 4161235555.",
                  "type": "string"
                },
                "mobilePhone1Country": {
                  "description": "The country code used for the registrant's mobile phone number, for example, CA for Canada.",
                  "type": "string"
                },
                "officeAddress": {
                  "description": "The internal address (for example, mail stop).",
                  "type": "string"
                },
                "orderBefore": {
                  "description": "Whether the registrant has previously placed an order. This value is supplied by the registrant.",
                  "type": "string"
                },
                "organizationDistinguishedName": {
                  "description": "The fully qualified DN of the organization to register under. Required for B2B user registration. ",
                  "type": "string"
                },
                "organizationId": {
                  "description": "The identifier of the registrant's company.",
                  "type": "string"
                },
                "organizationName": {
                  "description": "The name of the organization that the registrant represents.",
                  "type": "string"
                },
                "organizationUnitId": {
                  "description": "The identifier of the registrant's organizational unit.",
                  "type": "string"
                },
                "organizationUnitName": {
                  "description": "The name of the unit within the organization that the registrant represents.",
                  "type": "string"
                },
                "packageSuppression": {
                  "description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database.",
                  "type": "string"
                },
                "parentMemberId": {
                  "description": "The parent member identifier of the user.",
                  "type": "string"
                },
                "personTitle": {
                  "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.).",
                  "type": "string"
                },
                "phone1": {
                  "description": "The registrant's primary phone number.",
                  "type": "string"
                },
                "phone1Type": {
                  "description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters.",
                  "type": "string"
                },
                "phone2": {
                  "description": "The registrant's secondary phone number.",
                  "type": "string"
                },
                "phone2Type": {
                  "description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters.",
                  "type": "string"
                },
                "photo": {
                  "description": "URL or path to a photo of the registrant.",
                  "type": "string"
                },
                "policyAccountId": {
                  "description": "The account policy for this user.",
                  "type": "string"
                },
                "preferredCommunication": {
                  "description": "The preferred phone for the registrant (stored in the ADDRESS table), for example: P1=phone 1 P2=phone 2.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "preferredCurrency": {
                  "description": "The registrant's preferred currency for transactions.",
                  "type": "string"
                },
                "preferredDelivery": {
                  "description": "The registrant's preferred mode of delivery.",
                  "type": "string"
                },
                "preferredLanguage": {
                  "description": "The registrant's preferred language.",
                  "type": "string"
                },
                "preferredMeasure": {
                  "description": "The registrant's preferred unit of measure.",
                  "type": "string"
                },
                "privacyNoticeVersion": {
                  "description": "The version of the privacy notice. For example '1.0'.",
                  "type": "string"
                },
                "profileType": {
                  "description": "The user's profile type. If profileType is not specified, by default, the profileType is set to 'C' and a consumer user will be created; A business user can be by setting profileType to 'B'.",
                  "enum": [
                    "B",
                    "C"
                  ],
                  "type": "string"
                },
                "publishPhone1": {
                  "description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database.",
                  "type": "string"
                },
                "publishPhone2": {
                  "description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted.",
                  "type": "string"
                },
                "receiveEmail": {
                  "description": "Determines whether the registrant wants to receive marketing e-mail activities for the current store (or all stores if no stores have been visited during the session): true - The user wants to receive marketing e-mail activities; false - The user does not want to receive e-mail activities (the default).",
                  "type": "string"
                },
                "receiveSMS": {
                  "description": "Specifies whether the registrant wants to receive marketing SMS messages for the current store (or all stores if no stores have been visited during the session). Valid values are true or false (default).",
                  "type": "string"
                },
                "receiveSMSNotification": {
                  "description": "Indicates whether the user wants to receive order notification SMS text messages. Valid values are true or false (default).",
                  "type": "string"
                },
                "secretary": {
                  "description": "The name of the registrant's secretary or administrative assistant.",
                  "type": "string"
                },
                "shippingGeoCode": {
                  "description": "A shipping code based on geographical region, especially useful with tax software.",
                  "type": "string"
                },
                "state": {
                  "description": "The name of the state, province, or equivalent where the registrant resides.",
                  "type": "string"
                },
                "taxGeoCode": {
                  "description": "A tax code based on geographical region, especially useful with tax software.",
                  "type": "string"
                },
                "timeZone": {
                  "description": "The time zone in which the registrant does business (report as GMT +/- hours).",
                  "type": "string"
                },
                "URL": {
                  "description": "The URL to call when the command completes successfully.",
                  "type": "string"
                },
                "userField1": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userField2": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userField3": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userProfileField1": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userProfileField2": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userStatus": {
                  "description": "The user account status. A status of 1 indicates the account is enabled, and a status of 0 indicates the account is disabled.",
                  "type": "string"
                },
                "x_demographicField1": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField2": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField3": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField4": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField5": {
                  "description": "Customizable field for demographic information; a field of 254 characters.",
                  "type": "string"
                },
                "x_demographicField6": {
                  "description": "Customizable field for demographic information; an integer field.",
                  "type": "string"
                },
                "x_demographicField7": {
                  "description": "Customizable field for demographic information; a field var char, length 6.",
                  "type": "string"
                },
                "x_taxPayerId": {
                  "description": "A string used to identify the user for taxation purposes.",
                  "type": "string"
                },
                "zipCode": {
                  "description": "The ZIP or postal code of the registrant's address.",
                  "type": "string"
                }
              }
            }
          },
          {
            "enum": [
              "self",
              "admin"
            ],
            "name": "mode",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The mode of the rest service."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Registers a user. When the mode is set to admin, the registration is done by an administrator.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Register user",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "operationId": "Person-registerPersonOnUserRegistrationAdminAdd"
      },
      "get": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "pageNumber": 1,
                "pageSize": "3",
                "recordSetCompleteIndicator": false,
                "recordSetCount": 3,
                "recordSetTotal": 25,
                "userDataBeans": [
                  {
                    "businessProfile": {
                      "employeeId": null,
                      "organizationId": "7000000000000000904"
                    },
                    "demographics": null,
                    "displayName": "admin5020",
                    "firstName": null,
                    "lastName": null,
                    "logonId": "admin5020",
                    "memberId": "4037",
                    "personalizationId": null,
                    "preferredCurrency": "USD",
                    "preferredLanguageId": "",
                    "state": "0",
                    "userId": "4037",
                    "userProfile": null
                  },
                  {
                    "businessProfile": {
                      "employeeId": null,
                      "organizationId": "7000000000000000905"
                    },
                    "demographics": null,
                    "displayName": "admin5021",
                    "firstName": null,
                    "lastName": null,
                    "logonId": "admin5021",
                    "memberId": "4038",
                    "personalizationId": null,
                    "preferredCurrency": "USD",
                    "preferredLanguageId": "",
                    "state": "0",
                    "userId": "4038",
                    "userProfile": null
                  },
                  {
                    "businessProfile": {
                      "employeeId": null,
                      "organizationId": "7000000000000000914"
                    },
                    "demographics": null,
                    "displayName": "admin50210",
                    "firstName": null,
                    "lastName": null,
                    "logonId": "admin50210",
                    "memberId": "4047",
                    "personalizationId": null,
                    "preferredCurrency": "USD",
                    "preferredLanguageId": "",
                    "state": "0",
                    "userId": "4047",
                    "userProfile": null
                  }
                ]
              }
            },
            "schema": {
              "properties": {
                "recordSetCount": {
                  "type": "integer",
                  "format": "int32"
                },
                "pageNumber": {
                  "type": "integer",
                  "format": "int32"
                },
                "userDataBeans": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "businessProfile": {
                        "properties": {
                          "organizationId": {
                            "type": "string"
                          },
                          "employeeType": {
                            "type": "string"
                          },
                          "departmentNumber": {
                            "type": "string"
                          },
                          "employeeId": {
                            "type": "string"
                          },
                          "organizationUnitId": {
                            "type": "string"
                          },
                          "requistionerId": {
                            "type": "string"
                          }
                        }
                      },
                      "demographics": {
                        "properties": {
                          "income": {
                            "type": "string"
                          },
                          "numberOfChildren": {
                            "type": "string"
                          },
                          "numberOfHouseholds": {
                            "type": "string"
                          },
                          "gender": {
                            "type": "string"
                          },
                          "hobbies": {
                            "type": "string"
                          },
                          "incomeCurrency": {
                            "type": "string"
                          },
                          "timezone": {
                            "type": "string"
                          },
                          "companyName": {
                            "type": "string"
                          },
                          "orderBefore": {
                            "type": "string"
                          },
                          "dateOfBirth": {
                            "type": "string"
                          },
                          "age": {
                            "type": "string"
                          },
                          "maritalStatus": {
                            "type": "string"
                          }
                        }
                      },
                      "displayName": {
                        "type": "string"
                      },
                      "distinguishedName": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "logonId": {
                        "type": "string"
                      },
                      "memberAttributeValues": {
                        "items": {
                          "properties": {
                            "storeEntityId": {
                              "type": "string"
                            },
                            "memberAttributeValueId": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            },
                            "memberAttribute": {
                              "properties": {
                                "getName": {
                                  "type": "string"
                                },
                                "getDescription": {
                                  "type": "string"
                                },
                                "getMemberAttributeId": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "type": "array"
                      },
                      "memberId": {
                        "type": "string"
                      },
                      "parentMemberId": {
                        "type": "string"
                      },
                      "personalizationId": {
                        "type": "string"
                      },
                      "preferredCurrency": {
                        "type": "string"
                      },
                      "preferredLanguageId": {
                        "type": "string"
                      },
                      "profileType": {
                        "type": "string"
                      },
                      "registerType": {
                        "type": "string"
                      },
                      "roles": {
                        "items": {
                          "format": "int32",
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "state": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "userProfile": {
                        "properties": {
                          "preferredCommunication": {
                            "type": "string"
                          },
                          "preferredMeasure": {
                            "type": "string"
                          },
                          "displayName": {
                            "type": "string"
                          },
                          "taxPayerId": {
                            "type": "string",
                            "description": "A string used to identify the user for taxation purposes."
                          },
                          "description": {
                            "type": "string"
                          },
                          "preferredDelivery": {
                            "type": "string"
                          },
                          "receiveSMSNotification": {
                            "type": "string"
                          }
                        }
                      },
                      "userRegistry": {
                        "properties": {
                          "logonId": {
                            "type": "string"
                          },
                          "policyAccountId": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "pageSize ": {
                  "type": "string"
                },
                "recordSetTotal": {
                  "type": "integer",
                  "format": "int32"
                },
                "recordSetCompleteIndicator": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "usersICanAdmin",
              "registeredUsersICanManage"
            ],
            "name": "q",
            "required": true,
            "in": "query",
            "type": "string",
            "description": "The query name."
          },
          {
            "name": "startIndex",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The starting index of the result."
          },
          {
            "name": "maxResults",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Allows administrators to find users based on a query name. See each query for details on input and output.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get user by query",
        "operationId": "Person-findByQuery"
      }
    },
    "/wcs/resources/store/{storeId}/person/@self/contact/byAddressId/{addressId}": {
      "get": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "required": [
                "email1",
                "email2",
                "fax1",
                "fax2",
                "mobilePhone1",
                "mobilePhone1Country",
                "nickName",
                "phone1",
                "phone2"
              ],
              "properties": {
                "addressType": {
                  "type": "string"
                },
                "addressLine": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "addressId": {
                  "type": "string"
                },
                "personTitle": {
                  "type": "string"
                },
                "primary": {
                  "type": "string"
                },
                "email2": {
                  "type": "string"
                },
                "email1": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "middleName": {
                  "type": "string"
                },
                "geographicalTaxCode": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "internalOfficeAddress": {
                  "type": "string"
                },
                "fax2": {
                  "type": "string"
                },
                "fax1": {
                  "type": "string"
                },
                "organizationIdentifier": {
                  "properties": {
                    "distinguishedName": {
                      "type": "string"
                    },
                    "uniqueID": {
                      "type": "string"
                    }
                  }
                },
                "phone1Type": {
                  "type": "string"
                },
                "nickName": {
                  "type": "string"
                },
                "phone2Type": {
                  "type": "string"
                },
                "phone2": {
                  "type": "string"
                },
                "businessTitle": {
                  "type": "string"
                },
                "phone1": {
                  "type": "string"
                },
                "zipCode": {
                  "type": "string"
                },
                "bestCallingTime": {
                  "type": "string"
                },
                "mobilePhone1Country": {
                  "type": "string"
                },
                "phone2Publish": {
                  "type": "string"
                },
                "mobilePhone1": {
                  "type": "string"
                },
                "personIdentifier": {
                  "properties": {
                    "distinguishedName": {
                      "type": "string"
                    },
                    "uniqueID": {
                      "type": "string"
                    },
                    "externalIdentifier": {
                      "properties": {
                        "identifier": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "organizationUnitName": {
                  "type": "string"
                },
                "organizationName": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "geographicalShippingCode": {
                  "type": "string"
                },
                "phone1Publish": {
                  "type": "string"
                },
                "attributes": {
                  "items": {
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "value": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "country": {
                  "type": "string"
                },
                "userDataField": {
                  "items": {
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "value": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource could not be found."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The address identifier.",
            "in": "path",
            "name": "addressId"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Contact"
        ],
        "description": "Gets a person contact by address ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get contact by address ID",
        "operationId": "Contact-findPersonContactById"
      }
    },
    "/wcs/resources/store/{storeId}/person/{userId}": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "required": [
                "userId"
              ],
              "description": "User identifier.",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "The user identifier."
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "userId": "4053",
                "viewTaskName": "RedirectView",
                "addressId": "15805"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The user identifier.",
            "in": "path",
            "name": "userId"
          },
          {
            "required": false,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "Request of UserRegistrationAdminUpdateCmd.",
              "properties": {
                "address1": {
                  "description": "The registrant's street address, to a maximum of three lines of information.",
                  "type": "string"
                },
                "address2": {
                  "description": "The registrant's street address, to a maximum of three lines of information.",
                  "type": "string"
                },
                "address3": {
                  "description": "The registrant's street address, to a maximum of three lines of information.",
                  "type": "string"
                },
                "addressField1": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "addressField2": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "addressField3": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "addressType": {
                  "description": "The purpose of the address. Valid values are: S - shipto, B - billto, SB - shipto and billto (The default value.).",
                  "type": "string"
                },
                "age": {
                  "description": "The registrant's age.",
                  "type": "string"
                },
                "alternateId": {
                  "description": "A special ID assigned by the registrant's business organization or organizational unit to this particular registrant..",
                  "type": "string"
                },
                "attributeName_storeId_action_sequence": {
                  "description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: {attributeName}_{storeId}_{action}_{sequence}: string. The curly braced values must be replaced as follows: attributeName is any attribute specified in MBRATTRVAL table, storeId is the numerical id of the store (or null to indicate all stores), action is either 'r' (for replace) or 'd' (for delete), and sequence to indicate the sequence of this value in relation to other values for this attribute. Some examples. 'JobFunction_10001_r_1' : 'ProductManager' is specifying that the user has a JobFunction attribute value of ProductManager for the store 10001, this is for replacing the first (r_1) JobFunction attribute value for the user. JobFunction_null_d deletes all job functions for the user in all stores. ",
                  "type": "string"
                },
                "bestCallingTime": {
                  "description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant.",
                  "type": "string"
                },
                "billingCode": {
                  "description": "The registrant's organization's code to identify the shipping or billing addresses and cost center.",
                  "type": "string"
                },
                "billingCodeType": {
                  "description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer.",
                  "type": "string"
                },
                "challengeAnswer": {
                  "description": "Answer to the challenge question.",
                  "type": "string"
                },
                "challengeQuestion": {
                  "description": "Challenge question for verbal confirmation of the customer's identity.",
                  "type": "string"
                },
                "children": {
                  "description": "The number of children the registrant has.",
                  "type": "string"
                },
                "city": {
                  "description": "The name of the city where the registrant resides.",
                  "type": "string"
                },
                "companyName": {
                  "description": "The company name of the organization that the registrant represents, obtained when filling in demographic information.",
                  "type": "string"
                },
                "country": {
                  "description": "The name of the country or region where the registrant resides.",
                  "type": "string"
                },
                "dateOfBirth": {
                  "description": "Date of birth. The format is yyyy-mm-dd, for example: 1980-01-01.",
                  "type": "string"
                },
                "departmentNumber": {
                  "description": "The department identifier for the registrant.",
                  "type": "string"
                },
                "description": {
                  "description": "A description of the registrant.",
                  "type": "string"
                },
                "email1": {
                  "description": "The registrant's primary e-mail or Web address.",
                  "type": "string"
                },
                "email2": {
                  "description": "The registrant's secondary e-mail or Web address.",
                  "type": "string"
                },
                "employeeId": {
                  "description": "The registrant's ID with his or her employer.",
                  "type": "string"
                },
                "employeeType": {
                  "description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time).",
                  "type": "string"
                },
                "fax1": {
                  "description": "The registrant's primary facsimile number.",
                  "type": "string"
                },
                "fax2": {
                  "description": "The registrant's secondary facsimile number.",
                  "type": "string"
                },
                "firstName": {
                  "description": "The first name of the registrant.",
                  "type": "string"
                },
                "gender": {
                  "description": "The registrant's gender.",
                  "type": "string"
                },
                "hobbies": {
                  "description": "The registrant's hobbies.",
                  "type": "string"
                },
                "household": {
                  "description": "The number of people in the registrant's household; the default is 1.",
                  "type": "string"
                },
                "income": {
                  "description": "The registrant's annual income.",
                  "type": "string"
                },
                "incomeCurrency": {
                  "description": "The currency in which the registrant's income is paid.",
                  "type": "string"
                },
                "lastName": {
                  "description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory.",
                  "type": "string"
                },
                "logonId": {
                  "description": "The registrant's logon ID. If you are using LDAP, changing a user's logonID is not supported because it would require deleting and recreating the user in LDAP. This process would cause all non-WebSphere Commerce user attributes, such as the password, to be lost. If you are not using LDAP, changing the user's logon ID is not recommended, because the promotion subsystem stores the logon ID of the creator of the promotion in the XMLPARAM column of the PX_PROMOTION table. Note: When the UserRegistrationUpdate command is used to change the logonID, the command will automatically update the USERS.DN database column. Do not assume that ADDRESS.NICKNAME will also change. Instead, the following finder should be used to get the single self address of a user: AddressAccessBean.findSelfAddressByMember(Long memberID).",
                  "type": "string"
                },
                "logonPassword": {
                  "description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server.",
                  "type": "string"
                },
                "logonPasswordVerify": {
                  "description": "Required if the logonPassword is used: The registrant's password, entered a second time.",
                  "type": "string"
                },
                "manager": {
                  "description": "The name of the registrant's manager.",
                  "type": "string"
                },
                "maritalStatus": {
                  "description": "The registrant's marital status.",
                  "type": "string"
                },
                "middleName": {
                  "description": "The middle name of the registrant.",
                  "type": "string"
                },
                "mobilePhone1": {
                  "description": "The registrant's mobile phone number used for SMS, for example, 4161235555.",
                  "type": "string"
                },
                "mobilePhone1Country": {
                  "description": "The country code used for the registrant's mobile phone number, for example, CA for Canada.",
                  "type": "string"
                },
                "officeAddress": {
                  "description": "The internal address (for example, mail stop).",
                  "type": "string"
                },
                "orderBefore": {
                  "description": "Whether the registrant has previously placed an order. This value is supplied by the registrant.",
                  "type": "string"
                },
                "organizationId": {
                  "description": "The identifier of the registrant's company.",
                  "type": "string"
                },
                "organizationName": {
                  "description": "The name of the organization that the registrant represents.",
                  "type": "string"
                },
                "organizationUnitId": {
                  "description": "The identifier of the registrant's organizational unit.",
                  "type": "string"
                },
                "organizationUnitName": {
                  "description": "The name of the unit within the organization that the registrant represents.",
                  "type": "string"
                },
                "packageSuppression": {
                  "description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database.",
                  "type": "string"
                },
                "personTitle": {
                  "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.).",
                  "type": "string"
                },
                "phone1": {
                  "description": "The registrant's primary phone number.",
                  "type": "string"
                },
                "phone1Type": {
                  "description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters.",
                  "type": "string"
                },
                "phone2": {
                  "description": "The registrant's secondary phone number.",
                  "type": "string"
                },
                "phone2Type": {
                  "description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters.",
                  "type": "string"
                },
                "photo": {
                  "description": "URL or path to a photo of the registrant.",
                  "type": "string"
                },
                "policyAccountId": {
                  "description": "The account policy for this user.",
                  "type": "string"
                },
                "preferredCommunication": {
                  "description": "The preferred phone for the registrant (stored in the ADDRESS table), for example: P1=phone 1 P2=phone 2.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "preferredCurrency": {
                  "description": "The registrant's preferred currency for transactions.",
                  "type": "string"
                },
                "preferredDelivery": {
                  "description": "The registrant's preferred mode of delivery.",
                  "type": "string"
                },
                "preferredLanguage": {
                  "description": "The registrant's preferred language.",
                  "type": "string"
                },
                "preferredMeasure": {
                  "description": "The registrant's preferred unit of measure.",
                  "type": "string"
                },
                "publishPhone1": {
                  "description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database.",
                  "type": "string"
                },
                "publishPhone2": {
                  "description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted.",
                  "type": "string"
                },
                "receiveEmail": {
                  "description": "Determines whether the registrant wants to receive marketing e-mail activities for the current store (or all stores if no stores have been visited during the session): true - The user wants to receive marketing e-mail activities; false - The user does not want to receive e-mail activities (the default).",
                  "type": "string"
                },
                "receiveSMS": {
                  "description": "Specifies whether the registrant wants to receive marketing SMS messages for the current store (or all stores if no stores have been visited during the session). Valid values are true or false (default).",
                  "type": "string"
                },
                "receiveSMSNotification": {
                  "description": "Indicates whether the user wants to receive order notification SMS text messages. Valid values are true or false (default).",
                  "type": "string"
                },
                "secretary": {
                  "description": "The name of the registrant's secretary or administrative assistant.",
                  "type": "string"
                },
                "shippingGeoCode": {
                  "description": "A shipping code based on geographical region, especially useful with tax software.",
                  "type": "string"
                },
                "state": {
                  "description": "The name of the state, province, or equivalent where the registrant resides.",
                  "type": "string"
                },
                "taxGeoCode": {
                  "description": "A tax code based on geographical region, especially useful with tax software.",
                  "type": "string"
                },
                "timeZone": {
                  "description": "The time zone in which the registrant does business (report as GMT +/- hours).",
                  "type": "string"
                },
                "URL": {
                  "description": "The URL to call when the command completes successfully.",
                  "type": "string"
                },
                "userField1": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userField2": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userField3": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userId": {
                  "description": "The user the administrator will update.",
                  "type": "string"
                },
                "userProfileField1": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userProfileField2": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userStatus": {
                  "description": "The user account status. A status of 1 indicates the account is enabled, and a status of 0 indicates the account is disabled.",
                  "type": "string"
                },
                "x_demographicField1": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField2": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField3": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField4": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField5": {
                  "description": "Customizable field for demographic information; a field of 254 characters.",
                  "type": "string"
                },
                "x_demographicField6": {
                  "description": "Customizable field for demographic information; an integer field.",
                  "type": "string"
                },
                "x_demographicField7": {
                  "description": "Customizable field for demographic information; a field var char, length 6.",
                  "type": "string"
                },
                "x_taxPayerId": {
                  "description": "A string used to identify the user for taxation purposes.",
                  "type": "string"
                },
                "zipCode": {
                  "description": "The ZIP or postal code of the registrant's address.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Allows administrators to update account data for a registered user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Update account data",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "operationId": "Person-updatePersonByAdmin"
      },
      "post": {
        "responses": {
          "200": {
            "description": "The requested completed successfully."
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The user identifier.",
            "in": "path",
            "name": "userId"
          },
          {
            "enum": [
              "assignRole",
              "unassignRole"
            ],
            "name": "action",
            "required": true,
            "in": "query",
            "type": "string",
            "description": "The action of the rest service. The assignRole action allows an administrator to assign role(s) to a registered user, while unassignRole allos an administrator to unassign role(s) from a registered user."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Performs an action on a user by an administrator. See each action for details on input and output.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Performs an action on a user by an administrator. See each action for details on input and output.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "operationId": "Person-performActionByAdmin"
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "orgIdRoleDataBeans": {}
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "address": {
                  "address1": null,
                  "address2": null,
                  "address3": null,
                  "addressId": "-1000",
                  "addressType": null,
                  "city": null,
                  "country": null,
                  "email1": null,
                  "email2": null,
                  "fax1": null,
                  "fax2": null,
                  "firstName": null,
                  "lastName": "wcsadmin",
                  "memberId": "-1000",
                  "middleName": null,
                  "mobilePhone1": null,
                  "mobilePhone1Country": null,
                  "nickName": "wcsadmin",
                  "phone1": null,
                  "phone2": null,
                  "state": null,
                  "zipCode": null
                },
                "demographics": {
                  "age": "",
                  "dateOfBirth": "",
                  "gender": null
                },
                "logonId": "wcsadmin",
                "organizationId": "-2001",
                "organizationName": "",
                "parentMemberId": "-2001",
                "personTitle": "",
                "preferredCurrency": "",
                "preferredLanguage": "",
                "registerType": "S",
                "userId": "-1000",
                "userProfile": {
                  "description": "Internal use only.",
                  "displayName": null,
                  "receiveSMSNotification": "0"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The user identifier.",
            "in": "path",
            "name": "userId"
          },
          {
            "enum": [
              "IBM_User_Display_Details",
              "IBM_User_Registration_Details",
              "IBM_User_Top_Level_Org_Administered",
              "IBM_Assigned_Roles_Details",
              "IBM_Roles_Of_User_All",
              "IBM_Roles_Of_User_In_Orgs_I_Can_Admin"
            ],
            "name": "profileName",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Profile name. Profiles determine the subset of data returned by a query. The default profile name is IBM_User_Display_Details."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Allows administrators to find user information by user identifier.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get user information by identifier",
        "operationId": "Person-findByUserIdWRolesOfUserInOrgsICanAdminProfileName"
      },
      "delete": {
        "responses": {
          "200": {
            "schema": {
              "required": [
                "userId"
              ],
              "description": "User identifier.",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "The user identifier."
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "userId": "4053"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The user identifier.",
            "in": "path",
            "name": "userId"
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Allows administrators to delete user",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Delete user (by administrator)",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "operationId": "Person-deletePersonByAdmin"
      }
    },
    "/wcs/resources/store/{storeId}/person/@self/checkoutProfile": {
      "put": {
        "responses": {
          "200": {
            "schema": {
              "required": [
                "userId"
              ],
              "description": "User identification container.",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "User identification."
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "userId": "11051"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource could not be found."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "required": false,
            "in": "body",
            "description": "Update checkout profile body.",
            "name": "body",
            "schema": {}
          }
        ],
        "tags": [
          "Checkout Profile"
        ],
        "description": "Updates the CheckOutProfile for the logged in user using the Member service. The shopper must log in before invoking this method.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Update check out profile",
        "operationId": "CheckoutProfile-updateCheckoutProfile"
      },
      "get": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {}
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource could not be found."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Checkout Profile"
        ],
        "description": "Gets the Check Out Profile for the logged in user using the Member service. The shopper must log in before invoking this method.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get check out profile",
        "operationId": "CheckoutProfile-getCheckoutProfile"
      }
    },
    "/wcs/resources/store/{storeId}/person/updateMemberUser/{userId}": {
      "post": {
        "responses": {
          "200": {
            "schema": {
              "description": "response of MemberGroupMemberUpdateCmd.",
              "properties": {
                "storeId": {
                  "type": "string",
                  "description": "The current store identifier."
                },
                "addAsExplicitExclusionToMemberGroupId": {
                  "type": "string",
                  "description": "MemberGroup Identifiers to explicitly exclude the user from."
                },
                "URL": {
                  "type": "string",
                  "description": "The URL to call when the command completes successfully."
                },
                "addAsExplicitInclusionToMemberGroupId": {
                  "type": "string",
                  "description": "MemberGroup Identifiers to explicitly add the user to."
                },
                "userId": {
                  "type": "string",
                  "description": "The user identifier."
                },
                "catalogId": {
                  "type": "string",
                  "description": "The catalog identifier."
                },
                "requesttype": {
                  "type": "string",
                  "description": "The request type for example, ajax."
                },
                "removeFromMemberGroupId": {
                  "type": "string",
                  "description": "MemberGroup Identifiers to remove the user from."
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The user identifier.",
            "in": "path",
            "name": "userId"
          },
          {
            "required": false,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "Body of MemberGroupMemberUpdateCmd.",
              "properties": {
                "addAsExplicitInclusionToMemberGroupId": {
                  "type": "string",
                  "description": "MemberGroup Identifiers to explicitly add the user too ."
                },
                "addAsExplicitExclusionToMemberGroupId": {
                  "type": "string",
                  "description": "MemberGroup Identifiers to explicitly exclude the user from."
                },
                "removeFromMemberGroupId": {
                  "type": "string",
                  "description": "MemberGroup Identifiers to remove the user from."
                }
              }
            }
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Updates the user to include, exclude, or unassign the user from a member group.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Update member group assignment",
        "operationId": "Person-updateMemberUser"
      }
    },
    "/wcs/resources/store/{storeId}/person/@self": {
      "put": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "required": [
                "challengeQuestion",
                "email1",
                "email2",
                "fax1",
                "fax2",
                "logonId",
                "mobilePhone1",
                "mobilePhone1Country",
                "nickName",
                "phone1",
                "phone2"
              ],
              "properties": {
                "accountStatus": {
                  "type": "string",
                  "enum": [
                    "Enabled",
                    "Disabled"
                  ]
                },
                "addressId": {
                  "type": "string"
                },
                "addressLine": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "addressType": {
                  "type": "string"
                },
                "attributes": {
                  "type": "array",
                  "items": {
                    "required": [
                      "bProfileAttrKey",
                      "contactInfoAttrKey",
                      "pProfileAttrKey"
                    ],
                    "properties": {
                      "bProfileAttrKey": {
                        "type": "string"
                      },
                      "bProfileAttrValue": {
                        "type": "string"
                      },
                      "contactInfoAttrKey": {
                        "type": "string"
                      },
                      "contactInfoAttrValue": {
                        "type": "string"
                      },
                      "pProfileAttrKey": {
                        "type": "string"
                      },
                      "pProfileAttrValue": {
                        "type": "string"
                      }
                    }
                  }
                },
                "bestCallingTime": {
                  "type": "string"
                },
                "businessTitle": {
                  "type": "string"
                },
                "challengeQuestion": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "companyName": {
                  "type": "string"
                },
                "contact": {
                  "type": "array",
                  "items": {
                    "required": [
                      "email1",
                      "email2",
                      "fax1",
                      "fax2",
                      "mobilePhone1",
                      "mobilePhone1Country",
                      "nickName",
                      "phone1",
                      "phone2"
                    ],
                    "properties": {
                      "addressId": {
                        "type": "string"
                      },
                      "addressLine": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "addressType": {
                        "type": "string"
                      },
                      "attributes": {
                        "type": "array",
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "bestCallingTime": {
                        "type": "string"
                      },
                      "businessTitle": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "email1": {
                        "type": "string"
                      },
                      "email2": {
                        "type": "string"
                      },
                      "fax1": {
                        "type": "string"
                      },
                      "fax2": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "geographicalShippingCode": {
                        "type": "string"
                      },
                      "geographicalTaxCode": {
                        "type": "string"
                      },
                      "internalOfficeAddress": {
                        "type": "string"
                      },
                      "language": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "middleName": {
                        "type": "string"
                      },
                      "mobilePhone1": {
                        "type": "string"
                      },
                      "mobilePhone1Country": {
                        "type": "string"
                      },
                      "nickName": {
                        "type": "string"
                      },
                      "organizationIdentifier": {
                        "properties": {
                          "distinguishedName": {
                            "type": "string"
                          },
                          "uniqueID": {
                            "type": "string"
                          }
                        }
                      },
                      "organizationName": {
                        "type": "string"
                      },
                      "organizationUnitName": {
                        "type": "string"
                      },
                      "personIdentifier": {
                        "properties": {
                          "distinguishedName": {
                            "type": "string"
                          },
                          "uniqueID": {
                            "type": "string"
                          },
                          "externalIdentifier": {
                            "properties": {
                              "identifier": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "personTitle": {
                        "type": "string"
                      },
                      "phone1": {
                        "type": "string"
                      },
                      "phone1Publish": {
                        "type": "string"
                      },
                      "phone1Type": {
                        "type": "string"
                      },
                      "phone2": {
                        "type": "string"
                      },
                      "phone2Publish": {
                        "type": "string"
                      },
                      "phone2Type": {
                        "type": "string"
                      },
                      "primary": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "userDataField": {
                        "type": "array",
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "zipCode": {
                        "type": "string"
                      }
                    }
                  }
                },
                "contextAttribute": {
                  "type": "array",
                  "items": {
                    "required": [
                      "attributeName",
                      "attributeValue"
                    ],
                    "properties": {
                      "attributeName": {
                        "type": "string"
                      },
                      "attributeValue": {
                        "type": "array",
                        "items": {
                          "required": [
                            "value"
                          ],
                          "properties": {
                            "storeId": {
                              "type": "string"
                            },
                            "value": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "country": {
                  "type": "string"
                },
                "dateOfBirth": {
                  "type": "string"
                },
                "departmentNumber": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                },
                "distinguishedName": {
                  "type": "string"
                },
                "email1": {
                  "type": "string"
                },
                "email2": {
                  "type": "string"
                },
                "employeeID": {
                  "type": "string"
                },
                "employeeType": {
                  "type": "string"
                },
                "fax1": {
                  "type": "string"
                },
                "fax2": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "gender": {
                  "type": "string",
                  "enum": [
                    "Male",
                    "Female",
                    "Unspecified"
                  ]
                },
                "geographicalShippingCode": {
                  "type": "string"
                },
                "geographicalTaxCode": {
                  "type": "string"
                },
                "hobbies": {
                  "type": "string"
                },
                "householdSize": {
                  "type": "string",
                  "format": "int32"
                },
                "income": {
                  "properties": {
                    "currency": {
                      "type": "string"
                    },
                    "value": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "internalOfficeAddress": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "string"
                },
                "logonId": {
                  "type": "string"
                },
                "manager": {
                  "type": "string"
                },
                "maritalStatus": {
                  "type": "string"
                },
                "middleName": {
                  "type": "string"
                },
                "mobilePhone1": {
                  "type": "string"
                },
                "mobilePhone1Country": {
                  "type": "string"
                },
                "nickName": {
                  "type": "string"
                },
                "numberOfChildren": {
                  "type": "string",
                  "format": "int32"
                },
                "organizationDistinguishedName": {
                  "type": "string"
                },
                "organizationIdentifier": {
                  "properties": {
                    "distinguishedName": {
                      "type": "string"
                    },
                    "uniqueID": {
                      "type": "string"
                    }
                  }
                },
                "organizationName": {
                  "type": "string"
                },
                "organizationUnitName": {
                  "type": "string"
                },
                "orgizationId": {
                  "type": "string"
                },
                "passwordExpired": {
                  "type": "string"
                },
                "personIdentifier": {
                  "properties": {
                    "distinguishedName": {
                      "type": "string"
                    },
                    "uniqueID": {
                      "type": "string"
                    },
                    "externalIdentifier": {
                      "properties": {
                        "identifier": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "personTitle": {
                  "type": "string"
                },
                "phone1": {
                  "type": "string"
                },
                "phone1Publish": {
                  "type": "string"
                },
                "phone1Type": {
                  "type": "string"
                },
                "phone2": {
                  "type": "string"
                },
                "phone2Publish": {
                  "type": "string"
                },
                "phone2Type": {
                  "type": "string"
                },
                "photoURI": {
                  "type": "string"
                },
                "preferredCommunication": {
                  "type": "string"
                },
                "preferredCurrency": {
                  "type": "string"
                },
                "preferredDelivery": {
                  "type": "string"
                },
                "preferredLanguage": {
                  "type": "string"
                },
                "primary": {
                  "type": "string"
                },
                "profileType": {
                  "type": "string",
                  "enum": [
                    "C",
                    "B"
                  ]
                },
                "receiveEmailPreference": {
                  "type": "array",
                  "items": {
                    "required": [
                      "value"
                    ],
                    "properties": {
                      "storeID": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "receiveSMSNotification": {
                  "type": "string"
                },
                "receiveSMSPreference": {
                  "type": "array",
                  "items": {
                    "required": [
                      "value"
                    ],
                    "properties": {
                      "storeID": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "registrationApprovalStatus": {
                  "type": "string"
                },
                "registrationDateTime": {
                  "type": "string"
                },
                "registrationStatus": {
                  "type": "string",
                  "enum": [
                    "Guest",
                    "RegisteredPerson"
                  ]
                },
                "secretary": {
                  "type": "string",
                  "description": "The name of the registrant's secretary or administrative assistant."
                },
                "state": {
                  "type": "string"
                },
                "userDataField": {
                  "type": "array",
                  "items": {
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "userId": {
                  "type": "string"
                },
                "zipCode": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "required": false,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "description": "Request of UserRegistrationUpdateCmd.",
              "properties": {
                "address1": {
                  "description": "The registrant's street address, to a maximum of three lines of information.",
                  "type": "string"
                },
                "address2": {
                  "description": "The registrant's street address, to a maximum of three lines of information.",
                  "type": "string"
                },
                "address3": {
                  "description": "The registrant's street address, to a maximum of three lines of information.",
                  "type": "string"
                },
                "addressField1": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "addressField2": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "addressField3": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "addressType": {
                  "description": "The purpose of the address. Valid values are: S - shipto, B - billto, SB - shipto and billto (The default value.).",
                  "type": "string"
                },
                "age": {
                  "description": "The registrant's age.",
                  "type": "string"
                },
                "alternateId": {
                  "description": "A special ID assigned by the registrant's business organization or organizational unit to this particular registrant..",
                  "type": "string"
                },
                "attributeName_storeId_action_sequence": {
                  "description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: {attributeName}_{storeId}_{action}_{sequence}: string. The curly braced values must be replaced as follows: attributeName is any attribute specified in MBRATTRVAL table, storeId is the numerical id of the store (or null to indicate all stores), action is either 'r' (for replace) or 'd' (for delete), and sequence to indicate the sequence of this value in relation to other values for this attribute. Some examples. 'JobFunction_10001_r_1' : 'ProductManager' is specifying that the user has a JobFunction attribute value of ProductManager for the store 10001, this is for replacing the first (r_1) JobFunction attribute value for the user. JobFunction_null_d deletes all job functions for the user in all stores. ",
                  "type": "string"
                },
                "bestCallingTime": {
                  "description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant.",
                  "type": "string"
                },
                "billingCode": {
                  "description": "The registrant's organization's code to identify the shipping or billing addresses and cost center.",
                  "type": "string"
                },
                "billingCodeType": {
                  "description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer.",
                  "type": "string"
                },
                "challengeAnswer": {
                  "description": "Answer to the challenge question.",
                  "type": "string"
                },
                "challengeQuestion": {
                  "description": "Challenge question for verbal confirmation of the customer's identity.",
                  "type": "string"
                },
                "children": {
                  "description": "The number of children the registrant has.",
                  "type": "string"
                },
                "city": {
                  "description": "The name of the city where the registrant resides.",
                  "type": "string"
                },
                "companyName": {
                  "description": "The company name of the organization that the registrant represents, obtained when filling in demographic information.",
                  "type": "string"
                },
                "country": {
                  "description": "The name of the country or region where the registrant resides.",
                  "type": "string"
                },
                "dateOfBirth": {
                  "description": "Date of birth. The format is yyyy-mm-dd, for example: 1980-01-01.",
                  "type": "string"
                },
                "departmentNumber": {
                  "description": "The department identifier for the registrant.",
                  "type": "string"
                },
                "description": {
                  "description": "A description of the registrant.",
                  "type": "string"
                },
                "email1": {
                  "description": "The registrant's primary e-mail or Web address.",
                  "type": "string"
                },
                "email2": {
                  "description": "The registrant's secondary e-mail or Web address.",
                  "type": "string"
                },
                "employeeId": {
                  "description": "The registrant's ID with his or her employer.",
                  "type": "string"
                },
                "employeeType": {
                  "description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time).",
                  "type": "string"
                },
                "fax1": {
                  "description": "The registrant's primary facsimile number.",
                  "type": "string"
                },
                "fax2": {
                  "description": "The registrant's secondary facsimile number.",
                  "type": "string"
                },
                "firstName": {
                  "description": "The first name of the registrant.",
                  "type": "string"
                },
                "gender": {
                  "description": "The registrant's gender.",
                  "type": "string"
                },
                "hobbies": {
                  "description": "The registrant's hobbies.",
                  "type": "string"
                },
                "household": {
                  "description": "The number of people in the registrant's household; the default is 1.",
                  "type": "string"
                },
                "income": {
                  "description": "The registrant's annual income.",
                  "type": "string"
                },
                "incomeCurrency": {
                  "description": "The currency in which the registrant's income is paid.",
                  "type": "string"
                },
                "lastName": {
                  "description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory.",
                  "type": "string"
                },
                "logonId": {
                  "description": "The registrant's logon ID. If you are using LDAP, changing a user's logonID is not supported because it would require deleting and recreating the user in LDAP. This process would cause all non-WebSphere Commerce user attributes, such as the password, to be lost. If you are not using LDAP, changing the user's logon ID is not recommended, because the promotion subsystem stores the logon ID of the creator of the promotion in the XMLPARAM column of the PX_PROMOTION table. Note: When the UserRegistrationUpdate command is used to change the logonID, the command will automatically update the USERS.DN database column. Do not assume that ADDRESS.NICKNAME will also change. Instead, the following finder should be used to get the single self address of a user: AddressAccessBean.findSelfAddressByMember(Long memberID).",
                  "type": "string"
                },
                "logonPassword": {
                  "description": "The registrant's password. During password reset, this value also acts as the new password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server.",
                  "type": "string"
                },
                "logonPasswordVerify": {
                  "description": "Required if the logonPassword is used: The registrant's password, entered a second time.",
                  "type": "string"
                },
                "manager": {
                  "description": "The name of the registrant's manager.",
                  "type": "string"
                },
                "maritalStatus": {
                  "description": "The registrant's marital status.",
                  "type": "string"
                },
                "marketingTrackingConsent": {
                  "description": "The marketing tracking consent. 0 means opt-out, 1 means opt-in.",
                  "type": "string"
                },
                "middleName": {
                  "description": "The middle name of the registrant.",
                  "type": "string"
                },
                "mobilePhone1": {
                  "description": "The registrant's mobile phone number used for SMS, for example, 4161235555.",
                  "type": "string"
                },
                "mobilePhone1Country": {
                  "description": "The country code used for the registrant's mobile phone number, for example, CA for Canada.",
                  "type": "string"
                },
                "officeAddress": {
                  "description": "The internal address (for example, mail stop).",
                  "type": "string"
                },
                "orderBefore": {
                  "description": "Whether the registrant has previously placed an order. This value is supplied by the registrant.",
                  "type": "string"
                },
                "organizationId": {
                  "description": "The identifier of the registrant's company.",
                  "type": "string"
                },
                "organizationName": {
                  "description": "The name of the organization that the registrant represents.",
                  "type": "string"
                },
                "organizationUnitId": {
                  "description": "The identifier of the registrant's organizational unit.",
                  "type": "string"
                },
                "organizationUnitName": {
                  "description": "The name of the unit within the organization that the registrant represents.",
                  "type": "string"
                },
                "packageSuppression": {
                  "description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database.",
                  "type": "string"
                },
                "personTitle": {
                  "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.).",
                  "type": "string"
                },
                "phone1": {
                  "description": "The registrant's primary phone number.",
                  "type": "string"
                },
                "phone1Type": {
                  "description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters.",
                  "type": "string"
                },
                "phone2": {
                  "description": "The registrant's secondary phone number.",
                  "type": "string"
                },
                "phone2Type": {
                  "description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters.",
                  "type": "string"
                },
                "photo": {
                  "description": "URL or path to a photo of the registrant.",
                  "type": "string"
                },
                "preferredCommunication": {
                  "description": "The preferred phone for the registrant (stored in the ADDRESS table), for example: P1=phone 1 P2=phone 2.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "preferredCurrency": {
                  "description": "The registrant's preferred currency for transactions.",
                  "type": "string"
                },
                "preferredDelivery": {
                  "description": "The registrant's preferred mode of delivery.",
                  "type": "string"
                },
                "preferredLanguage": {
                  "description": "The registrant's preferred language.",
                  "type": "string"
                },
                "preferredMeasure": {
                  "description": "The registrant's preferred unit of measure.",
                  "type": "string"
                },
                "privacyNoticeVersion": {
                  "description": "The version of the privacy notice. For example '1.0'.",
                  "type": "string"
                },
                "publishPhone1": {
                  "description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database.",
                  "type": "string"
                },
                "publishPhone2": {
                  "description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted.",
                  "type": "string"
                },
                "receiveEmail": {
                  "description": "Determines whether the registrant wants to receive marketing e-mail activities for the current store (or all stores if no stores have been visited during the session): true - The user wants to receive marketing e-mail activities; false - The user does not want to receive e-mail activities (the default).",
                  "type": "string"
                },
                "receiveSMS": {
                  "description": "Specifies whether the registrant wants to receive marketing SMS messages for the current store (or all stores if no stores have been visited during the session). Valid values are true or false (default).",
                  "type": "string"
                },
                "receiveSMSNotification": {
                  "description": "Indicates whether the user wants to receive order notification SMS text messages. Valid values are true or false (default).",
                  "type": "string"
                },
                "resetPassword": {
                  "description": "During password reset, this value must be set to 'true'.",
                  "type": "boolean"
                },
                "secretary": {
                  "description": "The name of the registrant's secretary or administrative assistant.",
                  "type": "string"
                },
                "shippingGeoCode": {
                  "description": "A shipping code based on geographical region, especially useful with tax software.",
                  "type": "string"
                },
                "state": {
                  "description": "The name of the state, province, or equivalent where the registrant resides.",
                  "type": "string"
                },
                "taxGeoCode": {
                  "description": "A tax code based on geographical region, especially useful with tax software.",
                  "type": "string"
                },
                "timeZone": {
                  "description": "The time zone in which the registrant does business (report as GMT +/- hours).",
                  "type": "string"
                },
                "URL": {
                  "description": "The URL to call when the command completes successfully.",
                  "type": "string"
                },
                "userField1": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userField2": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userField3": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userProfileField1": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "userProfileField2": {
                  "description": "Customizable field.",
                  "type": "string"
                },
                "xcred_logonPasswordOld": {
                  "description": "During password reset, the registrant must enter the old password.",
                  "type": "string"
                },
                "xcred_logonPasswordVerify": {
                  "description": "During password reset, the registrant must enter the new password a second time.",
                  "type": "string"
                },
                "x_demographicField1": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField2": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField3": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField4": {
                  "description": "Customizable field for demographic information; this is single-character field.",
                  "type": "string"
                },
                "x_demographicField5": {
                  "description": "Customizable field for demographic information; a field of 254 characters.",
                  "type": "string"
                },
                "x_demographicField6": {
                  "description": "Customizable field for demographic information; an integer field.",
                  "type": "string"
                },
                "x_demographicField7": {
                  "description": "Customizable field for demographic information; a field var char, length 6.",
                  "type": "string"
                },
                "x_taxPayerId": {
                  "description": "A string used to identify the user for taxation purposes.",
                  "type": "string"
                },
                "zipCode": {
                  "description": "The ZIP or postal code of the registrant's address.",
                  "type": "string"
                }
              }
            }
          },
          {
            "enum": [
              "updateUserRegistration"
            ],
            "name": "action",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The action of the rest service."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Updates account data for a registered user. This also supports resetting password for unauthenticated and authenticated users. When action is set to 'updateUserRegistration', user account data is updated using UserRegistrationUpdateCmd",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Update account data",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "operationId": "Person-updatePersonOnUserRegistrationUpdate"
      },
      "get": {
        "responses": {
          "200": {
            "schema": {
              "required": [
                "challengeQuestion",
                "email1",
                "email2",
                "fax1",
                "fax2",
                "logonId",
                "mobilePhone1",
                "mobilePhone1Country",
                "nickName",
                "phone1",
                "phone2"
              ],
              "properties": {
                "accountStatus": {
                  "type": "string",
                  "enum": [
                    "Enabled",
                    "Disabled"
                  ]
                },
                "addressId": {
                  "type": "string"
                },
                "addressLine": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "addressType": {
                  "type": "string"
                },
                "attributes": {
                  "type": "array",
                  "items": {
                    "required": [
                      "bProfileAttrKey",
                      "contactInfoAttrKey",
                      "pProfileAttrKey"
                    ],
                    "properties": {
                      "bProfileAttrKey": {
                        "type": "string"
                      },
                      "bProfileAttrValue": {
                        "type": "string"
                      },
                      "contactInfoAttrKey": {
                        "type": "string"
                      },
                      "contactInfoAttrValue": {
                        "type": "string"
                      },
                      "pProfileAttrKey": {
                        "type": "string"
                      },
                      "pProfileAttrValue": {
                        "type": "string"
                      }
                    }
                  }
                },
                "bestCallingTime": {
                  "type": "string"
                },
                "businessTitle": {
                  "type": "string"
                },
                "challengeQuestion": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "companyName": {
                  "type": "string"
                },
                "contact": {
                  "type": "array",
                  "items": {
                    "required": [
                      "email1",
                      "email2",
                      "fax1",
                      "fax2",
                      "mobilePhone1",
                      "mobilePhone1Country",
                      "nickName",
                      "phone1",
                      "phone2"
                    ],
                    "properties": {
                      "addressId": {
                        "type": "string"
                      },
                      "addressLine": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "addressType": {
                        "type": "string"
                      },
                      "attributes": {
                        "type": "array",
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "bestCallingTime": {
                        "type": "string"
                      },
                      "businessTitle": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "email1": {
                        "type": "string"
                      },
                      "email2": {
                        "type": "string"
                      },
                      "fax1": {
                        "type": "string"
                      },
                      "fax2": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "geographicalShippingCode": {
                        "type": "string"
                      },
                      "geographicalTaxCode": {
                        "type": "string"
                      },
                      "internalOfficeAddress": {
                        "type": "string"
                      },
                      "language": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "middleName": {
                        "type": "string"
                      },
                      "mobilePhone1": {
                        "type": "string"
                      },
                      "mobilePhone1Country": {
                        "type": "string"
                      },
                      "nickName": {
                        "type": "string"
                      },
                      "organizationIdentifier": {
                        "properties": {
                          "distinguishedName": {
                            "type": "string"
                          },
                          "uniqueID": {
                            "type": "string"
                          }
                        }
                      },
                      "organizationName": {
                        "type": "string"
                      },
                      "organizationUnitName": {
                        "type": "string"
                      },
                      "personIdentifier": {
                        "properties": {
                          "distinguishedName": {
                            "type": "string"
                          },
                          "uniqueID": {
                            "type": "string"
                          },
                          "externalIdentifier": {
                            "properties": {
                              "identifier": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "personTitle": {
                        "type": "string"
                      },
                      "phone1": {
                        "type": "string"
                      },
                      "phone1Publish": {
                        "type": "string"
                      },
                      "phone1Type": {
                        "type": "string"
                      },
                      "phone2": {
                        "type": "string"
                      },
                      "phone2Publish": {
                        "type": "string"
                      },
                      "phone2Type": {
                        "type": "string"
                      },
                      "primary": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "userDataField": {
                        "type": "array",
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "zipCode": {
                        "type": "string"
                      }
                    }
                  }
                },
                "contextAttribute": {
                  "type": "array",
                  "items": {
                    "required": [
                      "attributeName",
                      "attributeValue"
                    ],
                    "properties": {
                      "attributeName": {
                        "type": "string"
                      },
                      "attributeValue": {
                        "type": "array",
                        "items": {
                          "required": [
                            "value"
                          ],
                          "properties": {
                            "storeId": {
                              "type": "string"
                            },
                            "value": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "country": {
                  "type": "string"
                },
                "dateOfBirth": {
                  "type": "string"
                },
                "departmentNumber": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                },
                "distinguishedName": {
                  "type": "string"
                },
                "email1": {
                  "type": "string"
                },
                "email2": {
                  "type": "string"
                },
                "employeeID": {
                  "type": "string"
                },
                "employeeType": {
                  "type": "string"
                },
                "fax1": {
                  "type": "string"
                },
                "fax2": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "gender": {
                  "type": "string",
                  "enum": [
                    "Male",
                    "Female",
                    "Unspecified"
                  ]
                },
                "geographicalShippingCode": {
                  "type": "string"
                },
                "geographicalTaxCode": {
                  "type": "string"
                },
                "hobbies": {
                  "type": "string"
                },
                "householdSize": {
                  "type": "string",
                  "format": "int32"
                },
                "income": {
                  "properties": {
                    "currency": {
                      "type": "string"
                    },
                    "value": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "internalOfficeAddress": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "string"
                },
                "logonId": {
                  "type": "string"
                },
                "manager": {
                  "type": "string"
                },
                "maritalStatus": {
                  "type": "string"
                },
                "middleName": {
                  "type": "string"
                },
                "mobilePhone1": {
                  "type": "string"
                },
                "mobilePhone1Country": {
                  "type": "string"
                },
                "nickName": {
                  "type": "string"
                },
                "numberOfChildren": {
                  "type": "string",
                  "format": "int32"
                },
                "organizationDistinguishedName": {
                  "type": "string"
                },
                "organizationIdentifier": {
                  "properties": {
                    "distinguishedName": {
                      "type": "string"
                    },
                    "uniqueID": {
                      "type": "string"
                    }
                  }
                },
                "organizationName": {
                  "type": "string"
                },
                "organizationUnitName": {
                  "type": "string"
                },
                "orgizationId": {
                  "type": "string"
                },
                "passwordExpired": {
                  "type": "string"
                },
                "personIdentifier": {
                  "properties": {
                    "distinguishedName": {
                      "type": "string"
                    },
                    "uniqueID": {
                      "type": "string"
                    },
                    "externalIdentifier": {
                      "properties": {
                        "identifier": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "personTitle": {
                  "type": "string"
                },
                "phone1": {
                  "type": "string"
                },
                "phone1Publish": {
                  "type": "string"
                },
                "phone1Type": {
                  "type": "string"
                },
                "phone2": {
                  "type": "string"
                },
                "phone2Publish": {
                  "type": "string"
                },
                "phone2Type": {
                  "type": "string"
                },
                "photoURI": {
                  "type": "string"
                },
                "preferredCommunication": {
                  "type": "string"
                },
                "preferredCurrency": {
                  "type": "string"
                },
                "preferredDelivery": {
                  "type": "string"
                },
                "preferredLanguage": {
                  "type": "string"
                },
                "primary": {
                  "type": "string"
                },
                "profileType": {
                  "type": "string",
                  "enum": [
                    "C",
                    "B"
                  ]
                },
                "receiveEmailPreference": {
                  "type": "array",
                  "items": {
                    "required": [
                      "value"
                    ],
                    "properties": {
                      "storeID": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "receiveSMSNotification": {
                  "type": "string"
                },
                "receiveSMSPreference": {
                  "type": "array",
                  "items": {
                    "required": [
                      "value"
                    ],
                    "properties": {
                      "storeID": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "registrationApprovalStatus": {
                  "type": "string"
                },
                "registrationDateTime": {
                  "type": "string"
                },
                "registrationStatus": {
                  "type": "string",
                  "enum": [
                    "Guest",
                    "RegisteredPerson"
                  ]
                },
                "secretary": {
                  "type": "string",
                  "description": "The name of the registrant's secretary or administrative assistant."
                },
                "state": {
                  "type": "string"
                },
                "userDataField": {
                  "type": "array",
                  "items": {
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "userId": {
                  "type": "string"
                },
                "zipCode": {
                  "type": "string"
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "accountStatus": "Enabled",
                "addressId": "15309",
                "addressLine": [
                  "123 Main St",
                  "",
                  ""
                ],
                "addressType": "ShippingAndBilling",
                "challengeQuestion": "-",
                "city": "Toronto",
                "contact": [
                  {
                    "addressId": "15308",
                    "addressLine": [
                      "123 Main St",
                      "",
                      ""
                    ],
                    "addressType": "ShippingAndBilling",
                    "city": "Toronto",
                    "country": "CA",
                    "email1": "jane@example.com",
                    "firstName": "Jane",
                    "lastName": "Smith",
                    "nickName": "jane",
                    "phone1": "4161234567",
                    "primary": "false",
                    "state": "ON",
                    "zipCode": "M1M1M1"
                  },
                  {
                    "addressId": "15810",
                    "addressLine": [
                      "123 Main St",
                      "",
                      ""
                    ],
                    "addressType": "Billing",
                    "city": "Toronto",
                    "country": "CA",
                    "email1": "john@example.com",
                    "firstName": "John",
                    "lastName": "Smith",
                    "nickName": "Default_Billing_10001",
                    "primary": "false",
                    "state": "ON",
                    "zipCode": "M1M1M1"
                  },
                  {
                    "addressId": "15811",
                    "addressLine": [
                      "123 Main St",
                      "",
                      ""
                    ],
                    "addressType": "Shipping",
                    "city": "Toronto",
                    "country": "CA",
                    "email1": "john@example.com",
                    "firstName": "John",
                    "lastName": "Smith",
                    "nickName": "Default_Shipping_10001",
                    "primary": "false",
                    "state": "ON",
                    "zipCode": "M1M1M1"
                  }
                ],
                "country": "CA",
                "distinguishedName": "uid=john,o=default organization,o=root organization",
                "email1": "john@example.com",
                "firstName": "John",
                "gender": "Unspecified",
                "lastName": "Smith",
                "lastUpdate": "2014-11-20T14:32:21.459Z",
                "logonId": "john",
                "nickName": "john",
                "organizationDistinguishedName": "o=default organization,o=root organization",
                "orgizationId": "-2000",
                "passwordExpired": "false",
                "preferredCurrency": "USD",
                "preferredLanguage": "en_US",
                "primary": "true",
                "profileType": "C",
                "receiveEmailPreference": [
                  {
                    "storeID": "10001",
                    "value": "false"
                  }
                ],
                "receiveSMSPreference": [
                  {
                    "storeID": "10001",
                    "value": "false"
                  }
                ],
                "registrationApprovalStatus": "Approved",
                "registrationDateTime": "2014-11-20T14:32:21.469Z",
                "registrationStatus": "RegisteredPerson",
                "resourceId": "https://localhost:443/wcs/resources/store/10001/person/@self?responseFormat=json",
                "resourceName": "person",
                "state": "ON",
                "userId": "11051",
                "zipCode": "M1M1M1"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Gets the account data for a registered user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get account data",
        "operationId": "Person-findPersonBySelf"
      }
    },
    "/wcs/resources/store/{storeId}/person/@self/registrationOptions": {
      "get": {
        "description": "Get the user registration options available to the current user.",
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          }
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get the user registration options available to the current user.",
        "operationId": "getUserRegistrationOptions",
        "tags": [
          "Person"
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "description": "Response body containing user registration options.",
              "properties": {
                "bestCallingTimeList": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "description": "Best calling time options for user registration.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "policyAccountIdList": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "description": "Account policy options for user registration.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "preferredLanguagesList": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "description": "Preferred language options for user registration.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "userStatusList": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "description": "User status options for user registration.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "userId": {
                  "type": "string",
                  "description": "The user ID."
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource could not be found."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        }
      }
    },
    "/wcs/resources/store/{storeId}/useractivate/emailactivate": {
      "put": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "description": "Response body to activate the user account.",
              "required": [
                "redirecturl",
                "logonId",
                "viewTaskName"
              ],
              "properties": {
                "redirecturl": {
                  "description": "The redirect URL.",
                  "type": "string"
                },
                "logonId": {
                  "description": "The user's logon ID.",
                  "type": "string"
                },
                "viewTaskName": {
                  "description": "The view task name.",
                  "type": "string"
                },
                "storeId": {
                  "description": "The store identifier.",
                  "type": "string"
                },
                "langId": {
                  "description": "The language ID.",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource could not be found."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "required": false,
            "type": "string",
            "description": "The language ID.",
            "name": "langId",
            "in": "query"
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body to activate the user account.",
            "name": "body",
            "schema": {
              "description": "Request body to activate the user account.",
              "required": [
                "logonId",
                "validationCode"
              ],
              "properties": {
                "logonId": {
                  "description": "The user's logon ID.",
                  "type": "string"
                },
                "validationCode": {
                  "description": "The account validation code.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "User Activate"
        ],
        "description": "Activate the user account.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Activate the user account.",
        "operationId": "UserActivate-activeUser"
      }
    },
    "/wcs/resources/store/{storeId}/useractivate/resendemail": {
      "post": {
        "responses": {
          "201": {
            "description": "The requested completed successfully.",
            "schema": {}
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource could not be found."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "required": true,
            "description": "Request body for resend user account activation email.",
            "in": "body",
            "name": "body",
            "schema": {
              "description": "Request body for resend user account activation email.",
              "required": [
                "logonId",
                "logonPassword"
              ],
              "properties": {
                "email1": {
                  "description": "An alternative email that the user account activation email can be sent to.",
                  "type": "string"
                },
                "logonId": {
                  "description": "The user's logon ID.",
                  "type": "string"
                },
                "logonPassword": {
                  "description": "The user's logon password.",
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "User Activate"
        ],
        "description": "Resend user account activation email.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Resend user account activation email.",
        "operationId": "UserActivate-resendActiveUser"
      }
    },
    "/wcs/resources/store/{storeId}/person/@self/languageCurrency": {
      "put": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {}
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Changes language and currency preference in profile and in context.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Change language and currency preference",
        "operationId": "Person-changeLanguageCurrency"
      }
    },
    "/wcs/resources/store/{storeId}/person/@self/contact/{nickName}": {
      "put": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "required": [
                "email1",
                "email2",
                "fax1",
                "fax2",
                "mobilePhone1",
                "mobilePhone1Country",
                "nickName",
                "phone1",
                "phone2"
              ],
              "properties": {
                "addressType": {
                  "type": "string"
                },
                "addressLine": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "addressId": {
                  "type": "string"
                },
                "personTitle": {
                  "type": "string"
                },
                "primary": {
                  "type": "string"
                },
                "email2": {
                  "type": "string"
                },
                "email1": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "middleName": {
                  "type": "string"
                },
                "geographicalTaxCode": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "internalOfficeAddress": {
                  "type": "string"
                },
                "fax2": {
                  "type": "string"
                },
                "fax1": {
                  "type": "string"
                },
                "organizationIdentifier": {
                  "properties": {
                    "distinguishedName": {
                      "type": "string"
                    },
                    "uniqueID": {
                      "type": "string"
                    }
                  }
                },
                "phone1Type": {
                  "type": "string"
                },
                "nickName": {
                  "type": "string"
                },
                "phone2Type": {
                  "type": "string"
                },
                "phone2": {
                  "type": "string"
                },
                "businessTitle": {
                  "type": "string"
                },
                "phone1": {
                  "type": "string"
                },
                "zipCode": {
                  "type": "string"
                },
                "bestCallingTime": {
                  "type": "string"
                },
                "mobilePhone1Country": {
                  "type": "string"
                },
                "phone2Publish": {
                  "type": "string"
                },
                "mobilePhone1": {
                  "type": "string"
                },
                "personIdentifier": {
                  "properties": {
                    "distinguishedName": {
                      "type": "string"
                    },
                    "uniqueID": {
                      "type": "string"
                    },
                    "externalIdentifier": {
                      "properties": {
                        "identifier": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "organizationUnitName": {
                  "type": "string"
                },
                "organizationName": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "geographicalShippingCode": {
                  "type": "string"
                },
                "phone1Publish": {
                  "type": "string"
                },
                "attributes": {
                  "items": {
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "value": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "country": {
                  "type": "string"
                },
                "userDataField": {
                  "items": {
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "value": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource could not be found."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The contact name saved in addressBook by registered shopper.",
            "in": "path",
            "name": "nickName"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "required": false,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {}
          }
        ],
        "tags": [
          "Contact"
        ],
        "description": "Updates the contact in the address book identified by nickname.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Update contact by nickname",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "operationId": "Contact-updatePersonContact"
      },
      "get": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "required": [
                "email1",
                "email2",
                "fax1",
                "fax2",
                "mobilePhone1",
                "mobilePhone1Country",
                "nickName",
                "phone1",
                "phone2"
              ],
              "properties": {
                "addressType": {
                  "type": "string"
                },
                "addressLine": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "addressId": {
                  "type": "string"
                },
                "personTitle": {
                  "type": "string"
                },
                "primary": {
                  "type": "string"
                },
                "email2": {
                  "type": "string"
                },
                "email1": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "middleName": {
                  "type": "string"
                },
                "geographicalTaxCode": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "internalOfficeAddress": {
                  "type": "string"
                },
                "fax2": {
                  "type": "string"
                },
                "fax1": {
                  "type": "string"
                },
                "organizationIdentifier": {
                  "properties": {
                    "distinguishedName": {
                      "type": "string"
                    },
                    "uniqueID": {
                      "type": "string"
                    }
                  }
                },
                "phone1Type": {
                  "type": "string"
                },
                "nickName": {
                  "type": "string"
                },
                "phone2Type": {
                  "type": "string"
                },
                "phone2": {
                  "type": "string"
                },
                "businessTitle": {
                  "type": "string"
                },
                "phone1": {
                  "type": "string"
                },
                "zipCode": {
                  "type": "string"
                },
                "bestCallingTime": {
                  "type": "string"
                },
                "mobilePhone1Country": {
                  "type": "string"
                },
                "phone2Publish": {
                  "type": "string"
                },
                "mobilePhone1": {
                  "type": "string"
                },
                "personIdentifier": {
                  "properties": {
                    "distinguishedName": {
                      "type": "string"
                    },
                    "uniqueID": {
                      "type": "string"
                    },
                    "externalIdentifier": {
                      "properties": {
                        "identifier": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "organizationUnitName": {
                  "type": "string"
                },
                "organizationName": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "geographicalShippingCode": {
                  "type": "string"
                },
                "phone1Publish": {
                  "type": "string"
                },
                "attributes": {
                  "items": {
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "value": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "country": {
                  "type": "string"
                },
                "userDataField": {
                  "items": {
                    "required": [
                      "key"
                    ],
                    "properties": {
                      "value": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource could not be found."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The contact name saved in addressBook by registered shopper.",
            "in": "path",
            "name": "nickName"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Contact"
        ],
        "description": "Gets a person contact by nickname.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get contact by nickname",
        "operationId": "Contact-findPersonContactByNickName"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "description": "Empty model. Used as default value when no model is specified."
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource could not be found."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The contact name saved in addressBook by registered shopper.",
            "in": "path",
            "name": "nickName"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Contact"
        ],
        "description": "Deletes the contact in the address book identified by nickname.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Delete contact from address book",
        "operationId": "Contact-deletePersonContact"
      }
    },
    "/wcs/resources/store/{storeId}/person/@self/optOut": {
      "get": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "userReceive": false,
                "userReceiveSMS": false
              }
            },
            "schema": {
              "properties": {
                "userReceiveSMS": {
                  "type": "boolean"
                },
                "userReceive": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "IBM_optOut_email",
              "IBM_optOut_sms",
              "IBM_optOut_all"
            ],
            "name": "profileName",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Profile name. Profiles determine the subset of data returned by a query.  Default profile name = IBM_optOut_email."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "Finds personal opt-out. When the store level personal opt-out does not exist, the site level personal opt-out is returned.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get opt out preferences",
        "operationId": "Person-findOptOutBySelfWOptOutAllProfileName"
      }
    },
    "/wcs/resources/store/{storeId}/person/search": {
      "get": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "examples": {},
            "schema": {
              "properties": {
                "recordSetCount": {
                  "type": "integer",
                  "format": "int32"
                },
                "pageNumber": {
                  "type": "integer",
                  "format": "int32"
                },
                "userDataBeans": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "businessProfile": {
                        "properties": {
                          "organizationId": {
                            "type": "string"
                          },
                          "employeeType": {
                            "type": "string"
                          },
                          "departmentNumber": {
                            "type": "string"
                          },
                          "employeeId": {
                            "type": "string"
                          },
                          "organizationUnitId": {
                            "type": "string"
                          },
                          "requistionerId": {
                            "type": "string"
                          }
                        }
                      },
                      "demographics": {
                        "properties": {
                          "income": {
                            "type": "string"
                          },
                          "numberOfChildren": {
                            "type": "string"
                          },
                          "numberOfHouseholds": {
                            "type": "string"
                          },
                          "gender": {
                            "type": "string"
                          },
                          "hobbies": {
                            "type": "string"
                          },
                          "incomeCurrency": {
                            "type": "string"
                          },
                          "timezone": {
                            "type": "string"
                          },
                          "companyName": {
                            "type": "string"
                          },
                          "orderBefore": {
                            "type": "string"
                          },
                          "dateOfBirth": {
                            "type": "string"
                          },
                          "age": {
                            "type": "string"
                          },
                          "maritalStatus": {
                            "type": "string"
                          }
                        }
                      },
                      "displayName": {
                        "type": "string"
                      },
                      "distinguishedName": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "logonId": {
                        "type": "string"
                      },
                      "memberAttributeValues": {
                        "items": {
                          "properties": {
                            "storeEntityId": {
                              "type": "string"
                            },
                            "memberAttributeValueId": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            },
                            "memberAttribute": {
                              "properties": {
                                "getName": {
                                  "type": "string"
                                },
                                "getDescription": {
                                  "type": "string"
                                },
                                "getMemberAttributeId": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "type": "array"
                      },
                      "memberId": {
                        "type": "string"
                      },
                      "parentMemberId": {
                        "type": "string"
                      },
                      "personalizationId": {
                        "type": "string"
                      },
                      "preferredCurrency": {
                        "type": "string"
                      },
                      "preferredLanguageId": {
                        "type": "string"
                      },
                      "profileType": {
                        "type": "string"
                      },
                      "registerType": {
                        "type": "string"
                      },
                      "roles": {
                        "items": {
                          "format": "int32",
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "state": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "userProfile": {
                        "properties": {
                          "preferredCommunication": {
                            "type": "string"
                          },
                          "preferredMeasure": {
                            "type": "string"
                          },
                          "displayName": {
                            "type": "string"
                          },
                          "taxPayerId": {
                            "type": "string",
                            "description": "A string used to identify the user for taxation purposes."
                          },
                          "description": {
                            "type": "string"
                          },
                          "preferredDelivery": {
                            "type": "string"
                          },
                          "receiveSMSNotification": {
                            "type": "string"
                          }
                        }
                      },
                      "userRegistry": {
                        "properties": {
                          "logonId": {
                            "type": "string"
                          },
                          "policyAccountId": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "pageSize ": {
                  "type": "string"
                },
                "recordSetTotal": {
                  "type": "integer",
                  "format": "int32"
                },
                "recordSetCompleteIndicator": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "IBM_User_List_Summary",
              "IBM_User_List_Details"
            ],
            "name": "profileName",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query. Default profile name = IBM_User_List_Summary"
          },
          {
            "enum": [
              "ADDRESS"
            ],
            "name": "orderByTableName",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The order by table name."
          },
          {
            "enum": [
              "ADDRESS_ID"
            ],
            "name": "orderByFieldName",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The order by field name."
          },
          {
            "name": "startIndex",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The starting index of the result."
          },
          {
            "name": "maxResults",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above."
          },
          {
            "name": "firstName",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The user's first name."
          },
          {
            "name": "lastName",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The user's last name."
          },
          {
            "name": "logonId",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The user's logonId."
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The user's email address."
          },
          {
            "enum": [
              "R",
              "G",
              "RG",
              "A"
            ],
            "name": "registerType",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The user registration type: G (Guest users), R (Registered users), RG (Registered and Guest users), or A (Administrators)."
          }
        ],
        "tags": [
          "Person"
        ],
        "description": "This allows an administrator to find users by their logonId, firstname, lastname and/or email.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "This allows an administrator to find users by their logonId, firstname, lastname and/or email.",
        "operationId": "Person-findByUserSearch"
      }
    },
    "/wcs/resources/store/{storeId}/approval_status": {
      "get": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "properties": {
                "approvalStatusId": {
                  "type": "string"
                },
                "approverGroupId": {
                  "type": "string"
                },
                "submitTime": {
                  "type": "string",
                  "format": "date"
                },
                "flowTypeId": {
                  "type": "string"
                },
                "stateId": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                },
                "submitterId": {
                  "type": "string"
                },
                "flowId": {
                  "type": "string"
                },
                "approveTime": {
                  "type": "string",
                  "format": "date"
                },
                "status": {
                  "type": "string"
                },
                "approverId": {
                  "type": "string"
                },
                "entityId": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The query name.",
            "in": "query",
            "name": "q",
            "enum": [
              "all",
              "buyerApprovals"
            ]
          },
          {
            "name": "submitterFirstName",
            "description": "Query by approval request submitter's first name.",
            "type": "string",
            "required": false,
            "in": "query"
          },
          {
            "name": "submitterMiddleName",
            "description": "Query by approval request submitter's middle name.",
            "type": "string",
            "required": false,
            "in": "query"
          },
          {
            "name": "submitterLastName",
            "description": "Query by approval request submitter's last name.",
            "type": "string",
            "required": false,
            "in": "query"
          },
          {
            "name": "startSubmitTime",
            "description": "Query by approval request start time.",
            "type": "string",
            "format": "date",
            "required": false,
            "in": "query"
          },
          {
            "name": "endSubmitTime",
            "description": "Query by approval request end time.",
            "type": "string",
            "format": "date",
            "required": false,
            "in": "query"
          },
          {
            "name": "status",
            "description": "Query by approval request status. 0 for pending, 1 for approved, 2 for rejected.",
            "enum": [
              0,
              1,
              2
            ],
            "type": "integer",
            "format": "int32",
            "required": false,
            "in": "query"
          },
          {
            "name": "approvalStatusId",
            "description": "Query by approval request approval status id.",
            "type": "integer",
            "format": "int64",
            "required": false,
            "in": "query"
          },
          {
            "name": "entityId",
            "description": "Query by approval request entity id, such as order id.",
            "type": "integer",
            "format": "int64",
            "required": false,
            "in": "query"
          },
          {
            "name": "approverId",
            "description": "Query by approver id. Only returns approval requests that can be approved by the current user.",
            "type": "integer",
            "format": "int64",
            "required": false,
            "in": "query"
          },
          {
            "name": "orderBy",
            "description": "Order by.",
            "enum": [
              "A-approvalStatusId",
              "A-entityId",
              "A-submitTime",
              "A-approveTime",
              "A-status",
              "A-flowTypeId",
              "A-stateId",
              "D-approvalStatusId",
              "D-entityId",
              "D-submitTime",
              "D-approveTime",
              "D-status",
              "D-flowTypeId",
              "D-stateId"
            ],
            "type": "string",
            "required": false,
            "in": "query"
          },
          {
            "name": "pageNumber",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The 'pageSize' must be specified for paging to work.",
            "type": "integer",
            "format": "int32",
            "required": false,
            "in": "query"
          },
          {
            "name": "pageSize",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The 'pageNumber' must be specified for paging to work.",
            "type": "integer",
            "format": "int32",
            "required": false,
            "in": "query"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Approval Status"
        ],
        "description": "Gets a list of approval records details that the current authenticated user can approve.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Finds all approval status records available to the current user.",
        "operationId": "ApprovalStatus-findByQuery"
      }
    },
    "/wcs/resources/store/{storeId}/approval_status/{approvalStatusId}": {
      "post": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "description": "Description of approval status record update response.",
              "properties": {
                "resultmsg": {
                  "type": "string",
                  "items": {
                    "type": "string"
                  },
                  "description": "Update approval status message. Possible values include 'approvalsFailed' for a failed approval and 'approvalsOK' for a successful approval."
                }
              }
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The approval status ID.",
            "name": "approvalStatusId",
            "in": "path"
          },
          {
            "required": false,
            "type": "string",
            "description": "The action name.",
            "name": "action",
            "in": "query",
            "enum": [
              "updateApprovalStatus"
            ]
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "required": true,
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "schema": {
              "required": [
                "aprv_act"
              ],
              "description": "Description of the post input body to update an approval status record.",
              "properties": {
                "comments": {
                  "type": "string",
                  "description": "Comment text for status change."
                },
                "aprv_act": {
                  "enum": [
                    "1",
                    "2"
                  ],
                  "type": "string",
                  "description": "Approval status. Valid values are 1 for approve and 2 for reject."
                }
              }
            }
          }
        ],
        "tags": [
          "Approval Status"
        ],
        "description": "Approve or reject an approval record.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Approve or reject an approval record.",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "operationId": "ApprovalStatus-updateApprovalStatus"
      }
    },
    "/wcs/resources/store/{storeId}/storelocator/byLocation": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "recordSetCount": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetComplete": {
                  "type": "string"
                },
                "recordSetTotal": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetStartNumber": {
                  "type": "string",
                  "format": "int64"
                },
                "PhysicalStore": {
                  "items": {
                    "required": [
                      "telephone1"
                    ],
                    "properties": {
                      "distance": {
                        "type": "string",
                        "format": "double"
                      },
                      "Description": {
                        "items": {
                          "properties": {
                            "displayStoreName": {
                              "type": "string"
                            },
                            "fullImage": {
                              "type": "string"
                            },
                            "thumbnail": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "storeName": {
                        "type": "string"
                      },
                      "Attribute": {
                        "items": {
                          "properties": {
                            "displayValue": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "longitude": {
                        "type": "string",
                        "format": "double"
                      },
                      "postalCode": {
                        "type": "string"
                      },
                      "stateOrProvinceName": {
                        "type": "string"
                      },
                      "uniqueID": {
                        "type": "string"
                      },
                      "telephone1": {
                        "type": "string"
                      },
                      "latitude": {
                        "type": "string",
                        "format": "double"
                      },
                      "userDataField": {
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "country": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "addressLine": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "recordSetStartNumber": "0",
                "recordSetComplete": "true",
                "recordSetCount": "3",
                "resourceId": "http://localhost:80/wcs/resources/store/10001/storelocator/byLocation?city=markham&siteLevelStoreSearch=false",
                "PhysicalStore": [
                  {
                    "city": "Markham",
                    "Description": [
                      {
                        "displayStoreName": "Markham Centre"
                      }
                    ],
                    "storeName": "Markham Centre",
                    "Attribute": [
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "Regular Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Regular Store"
                      },
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      }
                    ],
                    "longitude": "-79.33200",
                    "latitude": "43.84600",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10003",
                    "telephone1": "905.413.5555                    ",
                    "postalCode": "L6G 1C7                                 ",
                    "country": "Canada",
                    "addressLine": [
                      "8200 Warden Ave"
                    ]
                  },
                  {
                    "city": "Markham",
                    "Description": [
                      {
                        "displayStoreName": "Markville Mall"
                      }
                    ],
                    "storeName": "Markville Mall",
                    "Attribute": [
                      {
                        "displayValue": "true",
                        "displayName": "Designer studio",
                        "name": "DesignerStudio",
                        "value": "true"
                      },
                      {
                        "displayValue": "Express Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Express Store"
                      },
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      }
                    ],
                    "longitude": "-79.29000",
                    "latitude": "43.88900",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10004",
                    "telephone1": "905.416.6666                    ",
                    "postalCode": "L3P 3J3                                 ",
                    "country": "Canada",
                    "addressLine": [
                      "8000 McCowan Rd"
                    ]
                  },
                  {
                    "city": "Markham",
                    "Description": [
                      {
                        "displayStoreName": "Warden Plaza"
                      }
                    ],
                    "storeName": "Warden Plaza",
                    "Attribute": [
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Sushi restaurant",
                        "name": "SushiRestaurant",
                        "value": "true"
                      },
                      {
                        "displayValue": "Regular Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Regular Store"
                      },
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      }
                    ],
                    "longitude": "-79.33300",
                    "latitude": "43.85100",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10039",
                    "telephone1": "905.326.8647                    ",
                    "postalCode": "L6G 1C7                                 ",
                    "country": "Canada",
                    "addressLine": [
                      "8250 Warden Ave"
                    ]
                  }
                ],
                "resourceName": "storelocator",
                "recordSetTotal": "3"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "404": {
            "description": "No physical store is found for the criteria provided."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "required": false,
            "type": "string",
            "description": "The city.",
            "in": "query",
            "name": "city"
          },
          {
            "required": false,
            "type": "string",
            "description": "The state.",
            "in": "query",
            "name": "state"
          },
          {
            "required": false,
            "type": "string",
            "description": "The province.",
            "in": "query",
            "name": "prov"
          },
          {
            "required": false,
            "type": "string",
            "description": "The country.",
            "in": "query",
            "name": "country"
          },
          {
            "required": false,
            "type": "string",
            "description": "The radius unit of measure.",
            "in": "query",
            "name": "radiusUOM"
          },
          {
            "required": false,
            "type": "string",
            "description": "The physical store attribute name that describes whether the store is a beauty center.",
            "in": "query",
            "name": "BeautyCenter"
          },
          {
            "required": false,
            "type": "string",
            "description": "The physical store attribute name to describe the type of the store.",
            "in": "query",
            "name": "Type"
          },
          {
            "required": false,
            "type": "string",
            "description": "The radius.",
            "in": "query",
            "name": "radius"
          },
          {
            "description": "Page number. Valid values are positive integers starting at 1. Use pageNumber with pageSize.",
            "format": "int32",
            "required": false,
            "in": "query",
            "type": "integer",
            "name": "pageNumber"
          },
          {
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values are integers starting with 1. Use pageSize with pageNumber.",
            "format": "int32",
            "required": false,
            "in": "query",
            "type": "integer",
            "name": "pageSize"
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "name": "siteLevelStoreSearch",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "If it is 'true', a site level physical search is performed.  Otherwise, the physical store search is performed at the web store level. By default, it is 'true'."
          }
        ],
        "tags": [
          "Store Locator"
        ],
        "description": "Gets store location information by a specified location.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get by specified location",
        "operationId": "StoreLocator-findGeoNodeByGeoLocation"
      }
    },
    "/wcs/resources/store/{storeId}/country/country_state_list": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "countryCodeStates": {
                  "items": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "displayName": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "countries": {}
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "countryCodeStates": null,
                "countries": [
                  {
                    "states": [],
                    "callingCode": "+93",
                    "code": "AF",
                    "displayName": "Afghanistan"
                  },
                  {
                    "states": [],
                    "callingCode": "+355",
                    "code": "AL",
                    "displayName": "Albania"
                  },
                  {
                    "states": [],
                    "callingCode": "+213",
                    "code": "DZ",
                    "displayName": "Algeria"
                  },
                  {
                    "states": [],
                    "callingCode": "+684",
                    "code": "AS",
                    "displayName": "American Samoa"
                  },
                  {
                    "states": [],
                    "callingCode": "+376",
                    "code": "AD",
                    "displayName": "Andorra"
                  },
                  {
                    "states": [],
                    "callingCode": "+244",
                    "code": "AO",
                    "displayName": "Angola"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-264",
                    "code": "AI",
                    "displayName": "Anguilla"
                  },
                  {
                    "states": [],
                    "callingCode": "+672",
                    "code": "AQ",
                    "displayName": "Antarctica"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-268",
                    "code": "AG",
                    "displayName": "Antigua and Barbuda"
                  },
                  {
                    "states": [],
                    "callingCode": "+54",
                    "code": "AR",
                    "displayName": "Argentina"
                  },
                  {
                    "states": [],
                    "callingCode": "+374",
                    "code": "AM",
                    "displayName": "Armenia"
                  },
                  {
                    "states": [],
                    "callingCode": "+297",
                    "code": "AW",
                    "displayName": "Aruba"
                  },
                  {
                    "states": [],
                    "callingCode": "+61",
                    "code": "AU",
                    "displayName": "Australia"
                  },
                  {
                    "states": [],
                    "callingCode": "+43",
                    "code": "AT",
                    "displayName": "Austria"
                  },
                  {
                    "states": [],
                    "callingCode": "+994",
                    "code": "AZ",
                    "displayName": "Azerbaijan"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-242",
                    "code": "BS",
                    "displayName": "Bahamas"
                  },
                  {
                    "states": [],
                    "callingCode": "+973",
                    "code": "BH",
                    "displayName": "Bahrain"
                  },
                  {
                    "states": [],
                    "callingCode": "+880",
                    "code": "BD",
                    "displayName": "Bangladesh"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-246",
                    "code": "BB",
                    "displayName": "Barbados"
                  },
                  {
                    "states": [],
                    "callingCode": "+375",
                    "code": "BY",
                    "displayName": "Belarus"
                  },
                  {
                    "states": [],
                    "callingCode": "+32",
                    "code": "BE",
                    "displayName": "Belgium"
                  },
                  {
                    "states": [],
                    "callingCode": "+501",
                    "code": "BZ",
                    "displayName": "Belize"
                  },
                  {
                    "states": [],
                    "callingCode": "+229",
                    "code": "BJ",
                    "displayName": "Benin"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-441",
                    "code": "BM",
                    "displayName": "Bermuda"
                  },
                  {
                    "states": [],
                    "callingCode": "+975",
                    "code": "BT",
                    "displayName": "Bhutan"
                  },
                  {
                    "states": [],
                    "callingCode": "+591",
                    "code": "BO",
                    "displayName": "Bolivia"
                  },
                  {
                    "states": [],
                    "callingCode": "+387",
                    "code": "BA",
                    "displayName": "Bosnia and Herzegovina"
                  },
                  {
                    "states": [],
                    "callingCode": "+267",
                    "code": "BW",
                    "displayName": "Botswana"
                  },
                  {
                    "states": [],
                    "callingCode": "",
                    "code": "BV",
                    "displayName": "Bouvet Island"
                  },
                  {
                    "states": [],
                    "callingCode": "+55",
                    "code": "BR",
                    "displayName": "Brazil"
                  },
                  {
                    "states": [],
                    "callingCode": "+246",
                    "code": "IO",
                    "displayName": "British Indian Ocean Territory"
                  },
                  {
                    "states": [],
                    "callingCode": "+673",
                    "code": "BN",
                    "displayName": "Brunei"
                  },
                  {
                    "states": [],
                    "callingCode": "+359",
                    "code": "BG",
                    "displayName": "Bulgaria"
                  },
                  {
                    "states": [],
                    "callingCode": "+226",
                    "code": "BF",
                    "displayName": "Burkina Faso"
                  },
                  {
                    "states": [],
                    "callingCode": "+257",
                    "code": "BI",
                    "displayName": "Burundi"
                  },
                  {
                    "states": [],
                    "callingCode": "+855",
                    "code": "KH",
                    "displayName": "Cambodia"
                  },
                  {
                    "states": [],
                    "callingCode": "+237",
                    "code": "CM",
                    "displayName": "Cameroon"
                  },
                  {
                    "states": [
                      {
                        "code": "AB",
                        "displayName": "Alberta"
                      },
                      {
                        "code": "BC",
                        "displayName": "British Columbia"
                      },
                      {
                        "code": "MB",
                        "displayName": "Manitoba"
                      },
                      {
                        "code": "NB",
                        "displayName": "New Brunswick"
                      },
                      {
                        "code": "NL",
                        "displayName": "Newfoundland"
                      },
                      {
                        "code": "NT",
                        "displayName": "Northwest Territory"
                      },
                      {
                        "code": "NS",
                        "displayName": "Nova Scotia"
                      },
                      {
                        "code": "NU",
                        "displayName": "Nunavut"
                      },
                      {
                        "code": "ON",
                        "displayName": "Ontario"
                      },
                      {
                        "code": "PE",
                        "displayName": "Prince Edward Island"
                      },
                      {
                        "code": "QC",
                        "displayName": "Quebec"
                      },
                      {
                        "code": "SK",
                        "displayName": "Saskatchewan"
                      },
                      {
                        "code": "YT",
                        "displayName": "Yukon"
                      }
                    ],
                    "callingCode": "+1",
                    "code": "CA",
                    "displayName": "Canada"
                  },
                  {
                    "states": [],
                    "callingCode": "+238",
                    "code": "CV",
                    "displayName": "Cape Verde"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-345",
                    "code": "KY",
                    "displayName": "Cayman Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+236",
                    "code": "CF",
                    "displayName": "Central African Republic"
                  },
                  {
                    "states": [],
                    "callingCode": "+235",
                    "code": "TD",
                    "displayName": "Chad"
                  },
                  {
                    "states": [],
                    "callingCode": "+56",
                    "code": "CL",
                    "displayName": "Chile"
                  },
                  {
                    "states": [],
                    "callingCode": "+86",
                    "code": "CN",
                    "displayName": "China"
                  },
                  {
                    "states": [],
                    "callingCode": "+61-8",
                    "code": "CX",
                    "displayName": "Christmas Island"
                  },
                  {
                    "states": [],
                    "callingCode": "+61",
                    "code": "CC",
                    "displayName": "Cocos Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+57",
                    "code": "CO",
                    "displayName": "Colombia"
                  },
                  {
                    "states": [],
                    "callingCode": "+269",
                    "code": "KM",
                    "displayName": "Comoros"
                  },
                  {
                    "states": [],
                    "callingCode": "+242",
                    "code": "CG",
                    "displayName": "Congo"
                  },
                  {
                    "states": [],
                    "callingCode": "+243",
                    "code": "CD",
                    "displayName": "Congo, Democratic Republic of the"
                  },
                  {
                    "states": [],
                    "callingCode": "+682",
                    "code": "CK",
                    "displayName": "Cook Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+506",
                    "code": "CR",
                    "displayName": "Costa Rica"
                  },
                  {
                    "states": [],
                    "callingCode": "+225",
                    "code": "CI",
                    "displayName": "Cote d'Ivoire"
                  },
                  {
                    "states": [],
                    "callingCode": "+385",
                    "code": "HR",
                    "displayName": "Croatia"
                  },
                  {
                    "states": [],
                    "callingCode": "+53",
                    "code": "CU",
                    "displayName": "Cuba"
                  },
                  {
                    "states": [],
                    "callingCode": "+357",
                    "code": "CY",
                    "displayName": "Cyprus"
                  },
                  {
                    "states": [],
                    "callingCode": "+420",
                    "code": "CZ",
                    "displayName": "Czech Republic"
                  },
                  {
                    "states": [],
                    "callingCode": "+45",
                    "code": "DK",
                    "displayName": "Denmark"
                  },
                  {
                    "states": [],
                    "callingCode": "+253",
                    "code": "DJ",
                    "displayName": "Djibouti"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-767",
                    "code": "DM",
                    "displayName": "Dominica"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-809",
                    "code": "DO",
                    "displayName": "Dominican Republic"
                  },
                  {
                    "states": [],
                    "callingCode": "+670",
                    "code": "TP",
                    "displayName": "East Timor"
                  },
                  {
                    "states": [],
                    "callingCode": "+593",
                    "code": "EC",
                    "displayName": "Ecuador"
                  },
                  {
                    "states": [],
                    "callingCode": "+20",
                    "code": "EG",
                    "displayName": "Egypt"
                  },
                  {
                    "states": [],
                    "callingCode": "+503",
                    "code": "SV",
                    "displayName": "El Salvador"
                  },
                  {
                    "states": [],
                    "callingCode": "+240",
                    "code": "GQ",
                    "displayName": "Equatorial Guinea"
                  },
                  {
                    "states": [],
                    "callingCode": "+291",
                    "code": "ER",
                    "displayName": "Eritrea"
                  },
                  {
                    "states": [],
                    "callingCode": "+372",
                    "code": "EE",
                    "displayName": "Estonia"
                  },
                  {
                    "states": [],
                    "callingCode": "+251",
                    "code": "ET",
                    "displayName": "Ethiopia"
                  },
                  {
                    "states": [],
                    "callingCode": "+500",
                    "code": "FK",
                    "displayName": "Falkland Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+298",
                    "code": "FO",
                    "displayName": "Faroe Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+679",
                    "code": "FJ",
                    "displayName": "Fiji"
                  },
                  {
                    "states": [],
                    "callingCode": "+358",
                    "code": "FI",
                    "displayName": "Finland"
                  },
                  {
                    "states": [],
                    "callingCode": "+33",
                    "code": "FR",
                    "displayName": "France"
                  },
                  {
                    "states": [],
                    "callingCode": "+594",
                    "code": "GF",
                    "displayName": "French Guiana"
                  },
                  {
                    "states": [],
                    "callingCode": "+689",
                    "code": "PF",
                    "displayName": "French Polynesia"
                  },
                  {
                    "states": [],
                    "callingCode": "",
                    "code": "TF",
                    "displayName": "French Southern Territories"
                  },
                  {
                    "states": [],
                    "callingCode": "+241",
                    "code": "GA",
                    "displayName": "Gabon"
                  },
                  {
                    "states": [],
                    "callingCode": "+220",
                    "code": "GM",
                    "displayName": "Gambia"
                  },
                  {
                    "states": [],
                    "callingCode": "+995",
                    "code": "GE",
                    "displayName": "Georgia"
                  },
                  {
                    "states": [],
                    "callingCode": "+49",
                    "code": "DE",
                    "displayName": "Germany"
                  },
                  {
                    "states": [],
                    "callingCode": "+233",
                    "code": "GH",
                    "displayName": "Ghana"
                  },
                  {
                    "states": [],
                    "callingCode": "+350",
                    "code": "GI",
                    "displayName": "Gibraltar"
                  },
                  {
                    "states": [],
                    "callingCode": "+30",
                    "code": "GR",
                    "displayName": "Greece"
                  },
                  {
                    "states": [],
                    "callingCode": "+299",
                    "code": "GL",
                    "displayName": "Greenland"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-473",
                    "code": "GD",
                    "displayName": "Grenada"
                  },
                  {
                    "states": [],
                    "callingCode": "+590",
                    "code": "GP",
                    "displayName": "Guadeloupe"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-671",
                    "code": "GU",
                    "displayName": "Guam"
                  },
                  {
                    "states": [],
                    "callingCode": "+502",
                    "code": "GT",
                    "displayName": "Guatemala"
                  },
                  {
                    "states": [],
                    "callingCode": "+224",
                    "code": "GN",
                    "displayName": "Guinea"
                  },
                  {
                    "states": [],
                    "callingCode": "+245",
                    "code": "GW",
                    "displayName": "Guinea-Bissau"
                  },
                  {
                    "states": [],
                    "callingCode": "+592",
                    "code": "GY",
                    "displayName": "Guyana"
                  },
                  {
                    "states": [],
                    "callingCode": "+509",
                    "code": "HT",
                    "displayName": "Haiti"
                  },
                  {
                    "states": [],
                    "callingCode": "",
                    "code": "HM",
                    "displayName": "Heard Island and Mcdonald Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+379",
                    "code": "VA",
                    "displayName": "Holy See"
                  },
                  {
                    "states": [],
                    "callingCode": "+504",
                    "code": "HN",
                    "displayName": "Honduras"
                  },
                  {
                    "states": [],
                    "callingCode": "+852",
                    "code": "HK",
                    "displayName": "Hong Kong S.A.R. of China"
                  },
                  {
                    "states": [],
                    "callingCode": "+36",
                    "code": "HU",
                    "displayName": "Hungary"
                  },
                  {
                    "states": [],
                    "callingCode": "+354",
                    "code": "IS",
                    "displayName": "Iceland"
                  },
                  {
                    "states": [],
                    "callingCode": "+91",
                    "code": "IN",
                    "displayName": "India"
                  },
                  {
                    "states": [],
                    "callingCode": "+62",
                    "code": "ID",
                    "displayName": "Indonesia"
                  },
                  {
                    "states": [],
                    "callingCode": "+98",
                    "code": "IR",
                    "displayName": "Iran"
                  },
                  {
                    "states": [],
                    "callingCode": "+964",
                    "code": "IQ",
                    "displayName": "Iraq"
                  },
                  {
                    "states": [],
                    "callingCode": "+353",
                    "code": "IE",
                    "displayName": "Ireland"
                  },
                  {
                    "states": [],
                    "callingCode": "+972",
                    "code": "IL",
                    "displayName": "Israel"
                  },
                  {
                    "states": [],
                    "callingCode": "+39",
                    "code": "IT",
                    "displayName": "Italy"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-876",
                    "code": "JM",
                    "displayName": "Jamaica"
                  },
                  {
                    "states": [
                      {
                        "code": "Aichi",
                        "displayName": "Aichi"
                      },
                      {
                        "code": "Akita",
                        "displayName": "Akita"
                      },
                      {
                        "code": "Aomori",
                        "displayName": "Aomori"
                      },
                      {
                        "code": "Chiba",
                        "displayName": "Chiba"
                      },
                      {
                        "code": "Ehime",
                        "displayName": "Ehime"
                      },
                      {
                        "code": "Fukui",
                        "displayName": "Fukui"
                      },
                      {
                        "code": "Fukuoka",
                        "displayName": "Fukuoka"
                      },
                      {
                        "code": "Fukushima",
                        "displayName": "Fukushima"
                      },
                      {
                        "code": "Gifu",
                        "displayName": "Gifu"
                      },
                      {
                        "code": "Gunma",
                        "displayName": "Gunma"
                      },
                      {
                        "code": "Hiroshima",
                        "displayName": "Hiroshima"
                      },
                      {
                        "code": "Hokkaido",
                        "displayName": "Hokkaido"
                      },
                      {
                        "code": "Hyogo",
                        "displayName": "Hyogo"
                      },
                      {
                        "code": "Ibaraki",
                        "displayName": "Ibaraki"
                      },
                      {
                        "code": "Ishikawa",
                        "displayName": "Ishikawa"
                      },
                      {
                        "code": "Iwate",
                        "displayName": "Iwate"
                      },
                      {
                        "code": "Kagawa",
                        "displayName": "Kagawa"
                      },
                      {
                        "code": "Kagoshima",
                        "displayName": "Kagoshima"
                      },
                      {
                        "code": "Kanagawa",
                        "displayName": "Kanagawa"
                      },
                      {
                        "code": "Kochi",
                        "displayName": "Kochi"
                      },
                      {
                        "code": "Kumamoto",
                        "displayName": "Kumamoto"
                      },
                      {
                        "code": "Kyoto",
                        "displayName": "Kyoto"
                      },
                      {
                        "code": "Mie",
                        "displayName": "Mie"
                      },
                      {
                        "code": "Miyagi",
                        "displayName": "Miyagi"
                      },
                      {
                        "code": "Miyazaki",
                        "displayName": "Miyazaki"
                      },
                      {
                        "code": "Nagano",
                        "displayName": "Nagano"
                      },
                      {
                        "code": "Nagasaki",
                        "displayName": "Nagasaki"
                      },
                      {
                        "code": "Nara",
                        "displayName": "Nara"
                      },
                      {
                        "code": "Niigata",
                        "displayName": "Niigata"
                      },
                      {
                        "code": "Oita",
                        "displayName": "Oita"
                      },
                      {
                        "code": "Okayama",
                        "displayName": "Okayama"
                      },
                      {
                        "code": "Okinawa",
                        "displayName": "Okinawa"
                      },
                      {
                        "code": "Osaka",
                        "displayName": "Osaka"
                      },
                      {
                        "code": "Saga",
                        "displayName": "Saga"
                      },
                      {
                        "code": "Saitama",
                        "displayName": "Saitama"
                      },
                      {
                        "code": "Shiga",
                        "displayName": "Shiga"
                      },
                      {
                        "code": "Shimane",
                        "displayName": "Shimane"
                      },
                      {
                        "code": "Shizuoka",
                        "displayName": "Shizuoka"
                      },
                      {
                        "code": "Tochigi",
                        "displayName": "Tochigi"
                      },
                      {
                        "code": "Tokushima",
                        "displayName": "Tokushima"
                      },
                      {
                        "code": "Tokyo",
                        "displayName": "Tokyo"
                      },
                      {
                        "code": "Tottori",
                        "displayName": "Tottori"
                      },
                      {
                        "code": "Toyama",
                        "displayName": "Toyama"
                      },
                      {
                        "code": "Wakayama",
                        "displayName": "Wakayama"
                      },
                      {
                        "code": "Yamagata",
                        "displayName": "Yamagata"
                      },
                      {
                        "code": "Yamaguchi",
                        "displayName": "Yamaguchi"
                      },
                      {
                        "code": "Yamanashi",
                        "displayName": "Yamanashi"
                      }
                    ],
                    "callingCode": "+81",
                    "code": "JP",
                    "displayName": "Japan"
                  },
                  {
                    "states": [],
                    "callingCode": "+962",
                    "code": "JO",
                    "displayName": "Jordan"
                  },
                  {
                    "states": [],
                    "callingCode": "+7-6",
                    "code": "KZ",
                    "displayName": "Kazakhstan"
                  },
                  {
                    "states": [],
                    "callingCode": "+254",
                    "code": "KE",
                    "displayName": "Kenya"
                  },
                  {
                    "states": [],
                    "callingCode": "+686",
                    "code": "KI",
                    "displayName": "Kiribati"
                  },
                  {
                    "states": [],
                    "callingCode": "+850",
                    "code": "KP",
                    "displayName": "Korea, North"
                  },
                  {
                    "states": [],
                    "callingCode": "+82",
                    "code": "KR",
                    "displayName": "Korea, South"
                  },
                  {
                    "states": [],
                    "callingCode": "+965",
                    "code": "KW",
                    "displayName": "Kuwait"
                  },
                  {
                    "states": [],
                    "callingCode": "+996",
                    "code": "KG",
                    "displayName": "Kyrgyzstan"
                  },
                  {
                    "states": [],
                    "callingCode": "+856",
                    "code": "LA",
                    "displayName": "Laos"
                  },
                  {
                    "states": [],
                    "callingCode": "+371",
                    "code": "LV",
                    "displayName": "Latvia"
                  },
                  {
                    "states": [],
                    "callingCode": "+961",
                    "code": "LB",
                    "displayName": "Lebanon"
                  },
                  {
                    "states": [],
                    "callingCode": "+266",
                    "code": "LS",
                    "displayName": "Lesotho"
                  },
                  {
                    "states": [],
                    "callingCode": "+231",
                    "code": "LR",
                    "displayName": "Liberia"
                  },
                  {
                    "states": [],
                    "callingCode": "+218",
                    "code": "LY",
                    "displayName": "Libya"
                  },
                  {
                    "states": [],
                    "callingCode": "+423",
                    "code": "LI",
                    "displayName": "Liechtenstein"
                  },
                  {
                    "states": [],
                    "callingCode": "+370",
                    "code": "LT",
                    "displayName": "Lithuania"
                  },
                  {
                    "states": [],
                    "callingCode": "+352",
                    "code": "LU",
                    "displayName": "Luxembourg"
                  },
                  {
                    "states": [],
                    "callingCode": "+853",
                    "code": "MO",
                    "displayName": "Macau S.A.R. of China"
                  },
                  {
                    "states": [],
                    "callingCode": "+389",
                    "code": "MK",
                    "displayName": "Macedonia"
                  },
                  {
                    "states": [],
                    "callingCode": "+261",
                    "code": "MG",
                    "displayName": "Madagascar"
                  },
                  {
                    "states": [],
                    "callingCode": "+265",
                    "code": "MW",
                    "displayName": "Malawi"
                  },
                  {
                    "states": [],
                    "callingCode": "+60",
                    "code": "MY",
                    "displayName": "Malaysia"
                  },
                  {
                    "states": [],
                    "callingCode": "+960",
                    "code": "MV",
                    "displayName": "Maldives"
                  },
                  {
                    "states": [],
                    "callingCode": "+223",
                    "code": "ML",
                    "displayName": "Mali"
                  },
                  {
                    "states": [],
                    "callingCode": "+356",
                    "code": "MT",
                    "displayName": "Malta"
                  },
                  {
                    "states": [],
                    "callingCode": "+692",
                    "code": "MH",
                    "displayName": "Marshall Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+596",
                    "code": "MQ",
                    "displayName": "Martinique"
                  },
                  {
                    "states": [],
                    "callingCode": "+222",
                    "code": "MR",
                    "displayName": "Mauritania"
                  },
                  {
                    "states": [],
                    "callingCode": "+230",
                    "code": "MU",
                    "displayName": "Mauritius"
                  },
                  {
                    "states": [],
                    "callingCode": "+262",
                    "code": "YT",
                    "displayName": "Mayotte"
                  },
                  {
                    "states": [],
                    "callingCode": "+52",
                    "code": "MX",
                    "displayName": "Mexico"
                  },
                  {
                    "states": [],
                    "callingCode": "+691",
                    "code": "FM",
                    "displayName": "Micronesia"
                  },
                  {
                    "states": [],
                    "callingCode": "+373",
                    "code": "MD",
                    "displayName": "Moldova"
                  },
                  {
                    "states": [],
                    "callingCode": "+377",
                    "code": "MC",
                    "displayName": "Monaco"
                  },
                  {
                    "states": [],
                    "callingCode": "+976",
                    "code": "MN",
                    "displayName": "Mongolia"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-664",
                    "code": "MS",
                    "displayName": "Montserrat"
                  },
                  {
                    "states": [],
                    "callingCode": "+212",
                    "code": "MA",
                    "displayName": "Morocco"
                  },
                  {
                    "states": [],
                    "callingCode": "+258",
                    "code": "MZ",
                    "displayName": "Mozambique"
                  },
                  {
                    "states": [],
                    "callingCode": "+95",
                    "code": "MM",
                    "displayName": "Myanmar"
                  },
                  {
                    "states": [],
                    "callingCode": "+264",
                    "code": "NA",
                    "displayName": "Namibia"
                  },
                  {
                    "states": [],
                    "callingCode": "+674",
                    "code": "NR",
                    "displayName": "Nauru"
                  },
                  {
                    "states": [],
                    "callingCode": "+977",
                    "code": "NP",
                    "displayName": "Nepal"
                  },
                  {
                    "states": [],
                    "callingCode": "+31",
                    "code": "NL",
                    "displayName": "Netherlands"
                  },
                  {
                    "states": [],
                    "callingCode": "+599",
                    "code": "AN",
                    "displayName": "Netherlands Antilles"
                  },
                  {
                    "states": [],
                    "callingCode": "+687",
                    "code": "NC",
                    "displayName": "New Caledonia"
                  },
                  {
                    "states": [],
                    "callingCode": "+64",
                    "code": "NZ",
                    "displayName": "New Zealand"
                  },
                  {
                    "states": [],
                    "callingCode": "+505",
                    "code": "NI",
                    "displayName": "Nicaragua"
                  },
                  {
                    "states": [],
                    "callingCode": "+227",
                    "code": "NE",
                    "displayName": "Niger"
                  },
                  {
                    "states": [],
                    "callingCode": "+234",
                    "code": "NG",
                    "displayName": "Nigeria"
                  },
                  {
                    "states": [],
                    "callingCode": "+683",
                    "code": "NU",
                    "displayName": "Niue"
                  },
                  {
                    "states": [],
                    "callingCode": "+672",
                    "code": "NF",
                    "displayName": "Norfolk Island"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-670",
                    "code": "MP",
                    "displayName": "Northern Mariana Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+47",
                    "code": "NO",
                    "displayName": "Norway"
                  },
                  {
                    "states": [],
                    "callingCode": "+968",
                    "code": "OM",
                    "displayName": "Oman"
                  },
                  {
                    "states": [],
                    "callingCode": "+92",
                    "code": "PK",
                    "displayName": "Pakistan"
                  },
                  {
                    "states": [],
                    "callingCode": "+680",
                    "code": "PW",
                    "displayName": "Palau"
                  },
                  {
                    "states": [],
                    "callingCode": "+970",
                    "code": "PS",
                    "displayName": "Palestinian Territory"
                  },
                  {
                    "states": [],
                    "callingCode": "+507",
                    "code": "PA",
                    "displayName": "Panama"
                  },
                  {
                    "states": [],
                    "callingCode": "+675",
                    "code": "PG",
                    "displayName": "Papua New Guinea"
                  },
                  {
                    "states": [],
                    "callingCode": "+595",
                    "code": "PY",
                    "displayName": "Paraguay"
                  },
                  {
                    "states": [],
                    "callingCode": "+51",
                    "code": "PE",
                    "displayName": "Peru"
                  },
                  {
                    "states": [],
                    "callingCode": "+63",
                    "code": "PH",
                    "displayName": "Philippines"
                  },
                  {
                    "states": [],
                    "callingCode": "+872",
                    "code": "PN",
                    "displayName": "Pitcairn"
                  },
                  {
                    "states": [],
                    "callingCode": "+48",
                    "code": "PL",
                    "displayName": "Poland"
                  },
                  {
                    "states": [],
                    "callingCode": "+351",
                    "code": "PT",
                    "displayName": "Portugal"
                  },
                  {
                    "states": [
                      {
                        "code": "PR",
                        "displayName": "Puerto Rico"
                      }
                    ],
                    "callingCode": "+1-778",
                    "code": "PR",
                    "displayName": "Puerto Rico"
                  },
                  {
                    "states": [],
                    "callingCode": "+974",
                    "code": "QA",
                    "displayName": "Qatar"
                  },
                  {
                    "states": [],
                    "callingCode": "+262",
                    "code": "RE",
                    "displayName": "Reunion"
                  },
                  {
                    "states": [],
                    "callingCode": "+40",
                    "code": "RO",
                    "displayName": "Romania"
                  },
                  {
                    "states": [],
                    "callingCode": "+7",
                    "code": "RU",
                    "displayName": "Russian Federation"
                  },
                  {
                    "states": [],
                    "callingCode": "+250",
                    "code": "RW",
                    "displayName": "Rwanda"
                  },
                  {
                    "states": [],
                    "callingCode": "+290",
                    "code": "SH",
                    "displayName": "Saint Helena"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-869",
                    "code": "KN",
                    "displayName": "Saint Kitts and Nevis"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-758",
                    "code": "LC",
                    "displayName": "Saint Lucia"
                  },
                  {
                    "states": [],
                    "callingCode": "+508",
                    "code": "PM",
                    "displayName": "Saint Pierre and Miquelon"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-784",
                    "code": "VC",
                    "displayName": "Saint Vincent and the Grenadines"
                  },
                  {
                    "states": [],
                    "callingCode": "+685",
                    "code": "WS",
                    "displayName": "Samoa"
                  },
                  {
                    "states": [],
                    "callingCode": "+378",
                    "code": "SM",
                    "displayName": "San Marino"
                  },
                  {
                    "states": [],
                    "callingCode": "+239",
                    "code": "ST",
                    "displayName": "Sao Tome and Principe"
                  },
                  {
                    "states": [],
                    "callingCode": "+966",
                    "code": "SA",
                    "displayName": "Saudi Arabia"
                  },
                  {
                    "states": [],
                    "callingCode": "+221",
                    "code": "SN",
                    "displayName": "Senegal"
                  },
                  {
                    "states": [],
                    "callingCode": "+248",
                    "code": "SC",
                    "displayName": "Seychelles"
                  },
                  {
                    "states": [],
                    "callingCode": "+232",
                    "code": "SL",
                    "displayName": "Sierra Leone"
                  },
                  {
                    "states": [],
                    "callingCode": "+65",
                    "code": "SG",
                    "displayName": "Singapore"
                  },
                  {
                    "states": [],
                    "callingCode": "+421",
                    "code": "SK",
                    "displayName": "Slovakia"
                  },
                  {
                    "states": [],
                    "callingCode": "+386",
                    "code": "SI",
                    "displayName": "Slovenia"
                  },
                  {
                    "states": [],
                    "callingCode": "+677",
                    "code": "SB",
                    "displayName": "Solomon Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+252",
                    "code": "SO",
                    "displayName": "Somalia"
                  },
                  {
                    "states": [],
                    "callingCode": "+27",
                    "code": "ZA",
                    "displayName": "South Africa"
                  },
                  {
                    "states": [],
                    "callingCode": "",
                    "code": "GS",
                    "displayName": "South Georgia and the South Sandwich Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+34",
                    "code": "ES",
                    "displayName": "Spain"
                  },
                  {
                    "states": [],
                    "callingCode": "+94",
                    "code": "LK",
                    "displayName": "Sri Lanka"
                  },
                  {
                    "states": [],
                    "callingCode": "+249",
                    "code": "SD",
                    "displayName": "Sudan"
                  },
                  {
                    "states": [],
                    "callingCode": "+597",
                    "code": "SR",
                    "displayName": "Suriname"
                  },
                  {
                    "states": [],
                    "callingCode": "+79",
                    "code": "SJ",
                    "displayName": "Svalbard and Jan Mayen"
                  },
                  {
                    "states": [],
                    "callingCode": "+268",
                    "code": "SZ",
                    "displayName": "Swaziland"
                  },
                  {
                    "states": [],
                    "callingCode": "+46",
                    "code": "SE",
                    "displayName": "Sweden"
                  },
                  {
                    "states": [],
                    "callingCode": "+41",
                    "code": "CH",
                    "displayName": "Switzerland"
                  },
                  {
                    "states": [],
                    "callingCode": "+963",
                    "code": "SY",
                    "displayName": "Syria"
                  },
                  {
                    "states": [],
                    "callingCode": "+886",
                    "code": "TW",
                    "displayName": "Taiwan"
                  },
                  {
                    "states": [],
                    "callingCode": "+992",
                    "code": "TJ",
                    "displayName": "Tajikistan"
                  },
                  {
                    "states": [],
                    "callingCode": "+255",
                    "code": "TZ",
                    "displayName": "Tanzania"
                  },
                  {
                    "states": [],
                    "callingCode": "+66",
                    "code": "TH",
                    "displayName": "Thailand"
                  },
                  {
                    "states": [],
                    "callingCode": "+228",
                    "code": "TG",
                    "displayName": "Togo"
                  },
                  {
                    "states": [],
                    "callingCode": "+690",
                    "code": "TK",
                    "displayName": "Tokelau"
                  },
                  {
                    "states": [],
                    "callingCode": "+676",
                    "code": "TO",
                    "displayName": "Tonga"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-868",
                    "code": "TT",
                    "displayName": "Trinidad and Tobago"
                  },
                  {
                    "states": [],
                    "callingCode": "+216",
                    "code": "TN",
                    "displayName": "Tunisia"
                  },
                  {
                    "states": [],
                    "callingCode": "+90",
                    "code": "TR",
                    "displayName": "Turkey"
                  },
                  {
                    "states": [],
                    "callingCode": "+993",
                    "code": "TM",
                    "displayName": "Turkmenistan"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-649",
                    "code": "TC",
                    "displayName": "Turks and Caicos Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+688",
                    "code": "TV",
                    "displayName": "Tuvalu"
                  },
                  {
                    "states": [],
                    "callingCode": "+256",
                    "code": "UG",
                    "displayName": "Uganda"
                  },
                  {
                    "states": [],
                    "callingCode": "+380",
                    "code": "UA",
                    "displayName": "Ukraine"
                  },
                  {
                    "states": [],
                    "callingCode": "+971",
                    "code": "AE",
                    "displayName": "United Arab Emirates"
                  },
                  {
                    "states": [],
                    "callingCode": "+44",
                    "code": "GB",
                    "displayName": "United Kingdom"
                  },
                  {
                    "states": [
                      {
                        "code": "AL",
                        "displayName": "Alabama"
                      },
                      {
                        "code": "AK",
                        "displayName": "Alaska"
                      },
                      {
                        "code": "AS",
                        "displayName": "American Samoa"
                      },
                      {
                        "code": "AZ",
                        "displayName": "Arizona"
                      },
                      {
                        "code": "AR",
                        "displayName": "Arkansas"
                      },
                      {
                        "code": "AA",
                        "displayName": "Armed Forces Americas"
                      },
                      {
                        "code": "AE",
                        "displayName": "Armed Forces Europe"
                      },
                      {
                        "code": "AP",
                        "displayName": "Armed Forces Pacific"
                      },
                      {
                        "code": "CA",
                        "displayName": "California"
                      },
                      {
                        "code": "CO",
                        "displayName": "Colorado"
                      },
                      {
                        "code": "CT",
                        "displayName": "Connecticut"
                      },
                      {
                        "code": "DE",
                        "displayName": "Delaware"
                      },
                      {
                        "code": "DC",
                        "displayName": "District of Columbia"
                      },
                      {
                        "code": "FL",
                        "displayName": "Florida"
                      },
                      {
                        "code": "GA",
                        "displayName": "Georgia"
                      },
                      {
                        "code": "GU",
                        "displayName": "Guam"
                      },
                      {
                        "code": "HI",
                        "displayName": "Hawaii"
                      },
                      {
                        "code": "ID",
                        "displayName": "Idaho"
                      },
                      {
                        "code": "IL",
                        "displayName": "Illinois"
                      },
                      {
                        "code": "IN",
                        "displayName": "Indiana"
                      },
                      {
                        "code": "IA",
                        "displayName": "Iowa"
                      },
                      {
                        "code": "KS",
                        "displayName": "Kansas"
                      },
                      {
                        "code": "KY",
                        "displayName": "Kentucky"
                      },
                      {
                        "code": "LA",
                        "displayName": "Louisiana"
                      },
                      {
                        "code": "ME",
                        "displayName": "Maine"
                      },
                      {
                        "code": "MD",
                        "displayName": "Maryland"
                      },
                      {
                        "code": "MA",
                        "displayName": "Massachusetts"
                      },
                      {
                        "code": "MI",
                        "displayName": "Michigan"
                      },
                      {
                        "code": "MN",
                        "displayName": "Minnesota"
                      },
                      {
                        "code": "MS",
                        "displayName": "Mississippi"
                      },
                      {
                        "code": "MO",
                        "displayName": "Missouri"
                      },
                      {
                        "code": "MT",
                        "displayName": "Montana"
                      },
                      {
                        "code": "NE",
                        "displayName": "Nebraska"
                      },
                      {
                        "code": "NV",
                        "displayName": "Nevada"
                      },
                      {
                        "code": "NH",
                        "displayName": "New Hampshire"
                      },
                      {
                        "code": "NJ",
                        "displayName": "New Jersey"
                      },
                      {
                        "code": "NM",
                        "displayName": "New Mexico"
                      },
                      {
                        "code": "NY",
                        "displayName": "New York"
                      },
                      {
                        "code": "NC",
                        "displayName": "North Carolina"
                      },
                      {
                        "code": "ND",
                        "displayName": "North Dakota"
                      },
                      {
                        "code": "MP",
                        "displayName": "Northern Mariana Islands"
                      },
                      {
                        "code": "OH",
                        "displayName": "Ohio"
                      },
                      {
                        "code": "OK",
                        "displayName": "Oklahoma"
                      },
                      {
                        "code": "OR",
                        "displayName": "Oregon"
                      },
                      {
                        "code": "PW",
                        "displayName": "Palau"
                      },
                      {
                        "code": "PA",
                        "displayName": "Pennsylvania"
                      },
                      {
                        "code": "RI",
                        "displayName": "Rhode Island"
                      },
                      {
                        "code": "SC",
                        "displayName": "South Carolina"
                      },
                      {
                        "code": "SD",
                        "displayName": "South Dakota"
                      },
                      {
                        "code": "TN",
                        "displayName": "Tennessee"
                      },
                      {
                        "code": "TX",
                        "displayName": "Texas"
                      },
                      {
                        "code": "VI",
                        "displayName": "U.S. Virgin Islands"
                      },
                      {
                        "code": "UT",
                        "displayName": "Utah"
                      },
                      {
                        "code": "VT",
                        "displayName": "Vermont"
                      },
                      {
                        "code": "VA",
                        "displayName": "Virginia"
                      },
                      {
                        "code": "WA",
                        "displayName": "Washington"
                      },
                      {
                        "code": "WV",
                        "displayName": "West Virginia"
                      },
                      {
                        "code": "WI",
                        "displayName": "Wisconsin"
                      },
                      {
                        "code": "WY",
                        "displayName": "Wyoming"
                      }
                    ],
                    "callingCode": "+1",
                    "code": "US",
                    "displayName": "United States"
                  },
                  {
                    "states": [],
                    "callingCode": "+808",
                    "code": "UM",
                    "displayName": "United States Minor Outlying Islands"
                  },
                  {
                    "states": [],
                    "callingCode": "+598",
                    "code": "UY",
                    "displayName": "Uruguay"
                  },
                  {
                    "states": [],
                    "callingCode": "+998",
                    "code": "UZ",
                    "displayName": "Uzbekistan"
                  },
                  {
                    "states": [],
                    "callingCode": "+678",
                    "code": "VU",
                    "displayName": "Vanuatu"
                  },
                  {
                    "states": [],
                    "callingCode": "+58",
                    "code": "VE",
                    "displayName": "Venezuela"
                  },
                  {
                    "states": [],
                    "callingCode": "+84",
                    "code": "VN",
                    "displayName": "Viet Nam"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-284",
                    "code": "VG",
                    "displayName": "Virgin Islands, British"
                  },
                  {
                    "states": [],
                    "callingCode": "+1-340",
                    "code": "VI",
                    "displayName": "Virgin Islands, US"
                  },
                  {
                    "states": [],
                    "callingCode": "+681",
                    "code": "WF",
                    "displayName": "Wallis and Futuna"
                  },
                  {
                    "states": [],
                    "callingCode": "+212",
                    "code": "EH",
                    "displayName": "Western Saraha"
                  },
                  {
                    "states": [],
                    "callingCode": "+967",
                    "code": "YE",
                    "displayName": "Yemen"
                  },
                  {
                    "states": [],
                    "callingCode": "+381",
                    "code": "YU",
                    "displayName": "Yugoslavia"
                  },
                  {
                    "states": [],
                    "callingCode": "+260",
                    "code": "ZM",
                    "displayName": "Zambia"
                  },
                  {
                    "states": [],
                    "callingCode": "+263",
                    "code": "ZW",
                    "displayName": "Zimbabwe"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "IBM_countryStateList_Summary"
            ],
            "name": "profileName",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Profile name. Profiles determine the subset of data returned by a query.  Default profile name = IBM_countryStateList_Summary."
          },
          {
            "required": false,
            "type": "string",
            "description": "The country or region abbreviation code.",
            "in": "query",
            "name": "countryCode"
          }
        ],
        "tags": [
          "Country"
        ],
        "description": "Gets a list of countries or regions with the corresponding states or provinces.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get countries and regions",
        "operationId": "Country-findCountryStateList"
      }
    },
    "/wcs/resources/store/{storeId}/storelocator/byStoreId/{uniqueId}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "recordSetCount": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetComplete": {
                  "type": "string"
                },
                "recordSetTotal": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetStartNumber": {
                  "type": "string",
                  "format": "int64"
                },
                "PhysicalStore": {
                  "items": {
                    "required": [
                      "telephone1"
                    ],
                    "properties": {
                      "distance": {
                        "type": "string",
                        "format": "double"
                      },
                      "Description": {
                        "items": {
                          "properties": {
                            "displayStoreName": {
                              "type": "string"
                            },
                            "fullImage": {
                              "type": "string"
                            },
                            "thumbnail": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "storeName": {
                        "type": "string"
                      },
                      "Attribute": {
                        "items": {
                          "properties": {
                            "displayValue": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "longitude": {
                        "type": "string",
                        "format": "double"
                      },
                      "postalCode": {
                        "type": "string"
                      },
                      "stateOrProvinceName": {
                        "type": "string"
                      },
                      "uniqueID": {
                        "type": "string"
                      },
                      "telephone1": {
                        "type": "string"
                      },
                      "latitude": {
                        "type": "string",
                        "format": "double"
                      },
                      "userDataField": {
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "country": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "addressLine": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "recordSetStartNumber": "0",
                "recordSetComplete": "true",
                "recordSetCount": "1",
                "resourceId": "http://localhost:80/wcs/resources/store/10001/storelocator/byStoreId/10003",
                "PhysicalStore": [
                  {
                    "city": "Markham",
                    "Description": [
                      {
                        "displayStoreName": "Markham Centre"
                      }
                    ],
                    "storeName": "Markham Centre",
                    "Attribute": [
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "Regular Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Regular Store"
                      },
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      }
                    ],
                    "longitude": "-79.33200",
                    "latitude": "43.84600",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10003",
                    "telephone1": "905.413.5555                    ",
                    "postalCode": "L6G 1C7                                 ",
                    "country": "Canada",
                    "addressLine": [
                      "8200 Warden Ave"
                    ]
                  }
                ],
                "resourceName": "storelocator",
                "recordSetTotal": "1"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The unique identifier.",
            "in": "path",
            "name": "uniqueId"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "description": "Page number. Valid values are positive integers starting at 1. Use pageNumber with pageSize.",
            "format": "int32",
            "required": false,
            "in": "query",
            "type": "integer",
            "name": "pageNumber"
          },
          {
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values are integers starting with 1. Use pageSize with pageNumber.",
            "format": "int32",
            "required": false,
            "in": "query",
            "type": "integer",
            "name": "pageSize"
          }
        ],
        "tags": [
          "Store Locator"
        ],
        "description": "Gets store location information by a store unique ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get by store unique ID",
        "operationId": "StoreLocator-findByStoreUniqueId"
      }
    },
    "/wcs/resources/store/{storeId}/country/country_state_name": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "stateDisplayName": {
                  "type": "string"
                },
                "countryDisplayName": {
                  "type": "string"
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "stateDisplayName": "Ontario",
                "countryDisplayName": "Canada"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "IBM_countryStateName"
            ],
            "name": "profileName",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Profile name. Profiles determine the subset of data returned by a query. The default profile name is IBM_countryStateName."
          },
          {
            "required": false,
            "type": "string",
            "description": "The country or region abbreviation code.",
            "in": "query",
            "name": "countryCode"
          },
          {
            "required": false,
            "type": "string",
            "description": "The state or province abbreviation code.",
            "in": "query",
            "name": "stateCode"
          }
        ],
        "tags": [
          "Country"
        ],
        "description": "Gets the display name of a country and/or a state.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get display name of countries and regions",
        "operationId": "Country-findCountryStateName"
      }
    },
    "/wcs/resources/store/{storeId}/storelocator/byStoreIds": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "recordSetCount": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetComplete": {
                  "type": "string"
                },
                "recordSetTotal": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetStartNumber": {
                  "type": "string",
                  "format": "int64"
                },
                "PhysicalStore": {
                  "items": {
                    "required": [
                      "telephone1"
                    ],
                    "properties": {
                      "distance": {
                        "type": "string",
                        "format": "double"
                      },
                      "Description": {
                        "items": {
                          "properties": {
                            "displayStoreName": {
                              "type": "string"
                            },
                            "fullImage": {
                              "type": "string"
                            },
                            "thumbnail": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "storeName": {
                        "type": "string"
                      },
                      "Attribute": {
                        "items": {
                          "properties": {
                            "displayValue": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "longitude": {
                        "type": "string",
                        "format": "double"
                      },
                      "postalCode": {
                        "type": "string"
                      },
                      "stateOrProvinceName": {
                        "type": "string"
                      },
                      "uniqueID": {
                        "type": "string"
                      },
                      "telephone1": {
                        "type": "string"
                      },
                      "latitude": {
                        "type": "string",
                        "format": "double"
                      },
                      "userDataField": {
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "country": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "addressLine": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "recordSetStartNumber": "0",
                "recordSetComplete": "true",
                "recordSetCount": "2",
                "resourceId": "http://localhost:80/wcs/resources/store/10001/storelocator/byStoreIds?physicalStoreId=10039&physicalStoreId=10003&responseFormat=json",
                "PhysicalStore": [
                  {
                    "city": "Markham",
                    "Description": [
                      {
                        "displayStoreName": "Markham Centre"
                      }
                    ],
                    "storeName": "Markham Centre",
                    "Attribute": [
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "Regular Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Regular Store"
                      },
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      }
                    ],
                    "longitude": "-79.33200",
                    "latitude": "43.84600",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10003",
                    "telephone1": "905.413.5555                    ",
                    "postalCode": "L6G 1C7                                 ",
                    "country": "Canada",
                    "addressLine": [
                      "8200 Warden Ave"
                    ]
                  },
                  {
                    "city": "Markham",
                    "Description": [
                      {
                        "displayStoreName": "Warden Plaza"
                      }
                    ],
                    "storeName": "Warden Plaza",
                    "Attribute": [
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Sushi restaurant",
                        "name": "SushiRestaurant",
                        "value": "true"
                      },
                      {
                        "displayValue": "Regular Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Regular Store"
                      },
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      }
                    ],
                    "longitude": "-79.33300",
                    "latitude": "43.85100",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10039",
                    "telephone1": "905.326.8647                    ",
                    "postalCode": "L6G 1C7                                 ",
                    "country": "Canada",
                    "addressLine": [
                      "8250 Warden Ave"
                    ]
                  }
                ],
                "resourceName": "storelocator",
                "recordSetTotal": "2"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "description": "A list of physical store unique identifiers.",
            "items": {
              "type": "string"
            },
            "required": true,
            "in": "query",
            "type": "array",
            "name": "physicalStoreId"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "description": "Page number. Valid values are positive integers starting at 1. Use pageNumber with pageSize.",
            "format": "int32",
            "required": false,
            "in": "query",
            "type": "integer",
            "name": "pageNumber"
          },
          {
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values are integers starting with 1. Use pageSize with pageNumber.",
            "format": "int32",
            "required": false,
            "in": "query",
            "type": "integer",
            "name": "pageSize"
          }
        ],
        "tags": [
          "Store Locator"
        ],
        "description": "Gets store location information by one to n store unique IDs.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get by store unique IDs",
        "operationId": "StoreLocator-findByStoreUniqueIds"
      }
    },
    "/wcs/resources/store/{storeId}/storelocator/latitude/{latitude}/longitude/{longitude}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "recordSetCount": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetComplete": {
                  "type": "string"
                },
                "recordSetTotal": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetStartNumber": {
                  "type": "string",
                  "format": "int64"
                },
                "PhysicalStore": {
                  "items": {
                    "required": [
                      "telephone1"
                    ],
                    "properties": {
                      "distance": {
                        "type": "string",
                        "format": "double"
                      },
                      "Description": {
                        "items": {
                          "properties": {
                            "displayStoreName": {
                              "type": "string"
                            },
                            "fullImage": {
                              "type": "string"
                            },
                            "thumbnail": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "storeName": {
                        "type": "string"
                      },
                      "Attribute": {
                        "items": {
                          "properties": {
                            "displayValue": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "longitude": {
                        "type": "string",
                        "format": "double"
                      },
                      "postalCode": {
                        "type": "string"
                      },
                      "stateOrProvinceName": {
                        "type": "string"
                      },
                      "uniqueID": {
                        "type": "string"
                      },
                      "telephone1": {
                        "type": "string"
                      },
                      "latitude": {
                        "type": "string",
                        "format": "double"
                      },
                      "userDataField": {
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "country": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "addressLine": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "recordSetStartNumber": "0",
                "recordSetComplete": "true",
                "recordSetCount": "6",
                "resourceId": "http://localhost:80/wcs/resources/store/10001/storelocator/latitude/43.848983/longitude/-79.3392102?maxItems=&siteLevelStoreSearch=false&responseFormat=json",
                "PhysicalStore": [
                  {
                    "distance": "0.5458207187651365",
                    "Description": [
                      {
                        "displayStoreName": "Warden Plaza"
                      }
                    ],
                    "storeName": "Warden Plaza",
                    "Attribute": [
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Sushi restaurant",
                        "name": "SushiRestaurant",
                        "value": "true"
                      },
                      {
                        "displayValue": "Regular Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Regular Store"
                      }
                    ],
                    "longitude": "-79.33300",
                    "latitude": "43.85100",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10039",
                    "telephone1": "905.326.8647                    ",
                    "postalCode": "L6G 1C7                                 ",
                    "country": "Canada",
                    "city": "Markham",
                    "addressLine": [
                      "8250 Warden Ave"
                    ]
                  },
                  {
                    "distance": "0.666169063579425",
                    "Description": [
                      {
                        "displayStoreName": "Markham Centre"
                      }
                    ],
                    "storeName": "Markham Centre",
                    "Attribute": [
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "Regular Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Regular Store"
                      }
                    ],
                    "longitude": "-79.33200",
                    "latitude": "43.84600",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10003",
                    "telephone1": "905.413.5555                    ",
                    "postalCode": "L6G 1C7                                 ",
                    "country": "Canada",
                    "city": "Markham",
                    "addressLine": [
                      "8200 Warden Ave"
                    ]
                  },
                  {
                    "distance": "5.602484764287309",
                    "Description": [
                      {
                        "displayStoreName": "Alton Towers Plaza"
                      }
                    ],
                    "storeName": "Alton Towers Plaza",
                    "Attribute": [
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Designer studio",
                        "name": "DesignerStudio",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Sushi restaurant",
                        "name": "SushiRestaurant",
                        "value": "true"
                      },
                      {
                        "displayValue": "Regular Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Regular Store"
                      }
                    ],
                    "longitude": "-79.27700",
                    "latitude": "43.82600",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10042",
                    "telephone1": "416.326.8647                    ",
                    "postalCode": "M1V 3Z4                                 ",
                    "country": "Canada",
                    "city": "Toronto",
                    "addressLine": [
                      "250 Alton Towers Circle"
                    ]
                  },
                  {
                    "distance": "5.9428276427935876",
                    "Description": [
                      {
                        "displayStoreName": "Markville Mall"
                      }
                    ],
                    "storeName": "Markville Mall",
                    "Attribute": [
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Designer studio",
                        "name": "DesignerStudio",
                        "value": "true"
                      },
                      {
                        "displayValue": "Express Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Express Store"
                      }
                    ],
                    "longitude": "-79.29000",
                    "latitude": "43.88900",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10004",
                    "telephone1": "905.416.6666                    ",
                    "postalCode": "L3P 3J3                                 ",
                    "country": "Canada",
                    "city": "Markham",
                    "addressLine": [
                      "8000 McCowan Rd"
                    ]
                  },
                  {
                    "distance": "10.639123055945683",
                    "Description": [
                      {
                        "displayStoreName": "Borough Plaza"
                      }
                    ],
                    "storeName": "Borough Plaza",
                    "Attribute": [
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Sushi restaurant",
                        "name": "SushiRestaurant",
                        "value": "true"
                      },
                      {
                        "displayValue": "Express Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Express Store"
                      }
                    ],
                    "longitude": "-79.25500",
                    "latitude": "43.77500",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10044",
                    "telephone1": "416.134.5467                    ",
                    "postalCode": "M1P 4P5                                 ",
                    "country": "Canada",
                    "city": "Toronto",
                    "addressLine": [
                      "300 Borough Drive"
                    ]
                  },
                  {
                    "distance": "12.575219484555985",
                    "Description": [
                      {
                        "displayStoreName": "Yorkdale Centre"
                      }
                    ],
                    "storeName": "Yorkdale Centre",
                    "Attribute": [
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Designer studio",
                        "name": "DesignerStudio",
                        "value": "true"
                      },
                      {
                        "displayValue": "Express Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Express Store"
                      }
                    ],
                    "longitude": "-79.42000",
                    "latitude": "43.75200",
                    "stateOrProvinceName": "Ontario",
                    "uniqueID": "10002",
                    "telephone1": "905.411.1278                    ",
                    "postalCode": "M2N 1A1                                 ",
                    "country": "Canada",
                    "city": "North York",
                    "addressLine": [
                      "3401 Dufferin Street"
                    ]
                  }
                ],
                "resourceName": "storelocator",
                "recordSetTotal": "6"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The latitude.",
            "in": "path",
            "name": "latitude"
          },
          {
            "required": true,
            "type": "string",
            "description": "The longitude.",
            "in": "path",
            "name": "longitude"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "required": false,
            "type": "string",
            "description": "The maximum number of stores to return.",
            "in": "query",
            "name": "maxItems"
          },
          {
            "required": false,
            "type": "string",
            "description": "The radius unit of measure.",
            "in": "query",
            "name": "radiusUOM"
          },
          {
            "required": false,
            "type": "string",
            "description": "The physical store attribute name that describes whether the store is a beauty center.",
            "in": "query",
            "name": "BeautyCenter"
          },
          {
            "required": false,
            "type": "string",
            "description": "The physical store attribute name to describe the type of the store.",
            "in": "query",
            "name": "Type"
          },
          {
            "required": false,
            "type": "string",
            "description": "The radius.",
            "in": "query",
            "name": "radius"
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "name": "siteLevelStoreSearch",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "If it is 'true', a site level physical search is performed.  Otherwise, the physical store search is performed at the web store level. By default, it is 'true'."
          }
        ],
        "tags": [
          "Store Locator"
        ],
        "description": "Gets store location information by specified coordinates.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get by specified coordinates",
        "operationId": "StoreLocator-findStores"
      }
    },
    "/wcs/resources/store/{storeId}/storelocator/byGeoNode/{geoId}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "recordSetCount": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetComplete": {
                  "type": "string"
                },
                "recordSetTotal": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetStartNumber": {
                  "type": "string",
                  "format": "int64"
                },
                "PhysicalStore": {
                  "items": {
                    "required": [
                      "telephone1"
                    ],
                    "properties": {
                      "distance": {
                        "type": "string",
                        "format": "double"
                      },
                      "Description": {
                        "items": {
                          "properties": {
                            "displayStoreName": {
                              "type": "string"
                            },
                            "fullImage": {
                              "type": "string"
                            },
                            "thumbnail": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "storeName": {
                        "type": "string"
                      },
                      "Attribute": {
                        "items": {
                          "properties": {
                            "displayValue": {
                              "type": "string"
                            },
                            "displayName": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "longitude": {
                        "type": "string",
                        "format": "double"
                      },
                      "postalCode": {
                        "type": "string"
                      },
                      "stateOrProvinceName": {
                        "type": "string"
                      },
                      "uniqueID": {
                        "type": "string"
                      },
                      "telephone1": {
                        "type": "string"
                      },
                      "latitude": {
                        "type": "string",
                        "format": "double"
                      },
                      "userDataField": {
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "country": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "addressLine": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "recordSetStartNumber": "0",
                "recordSetComplete": "true",
                "recordSetCount": "2",
                "resourceId": "http://localhost:80/wcs/resources/store/10001/storelocator/byGeoNode/10004?responseFormat=json",
                "PhysicalStore": [
                  {
                    "city": "Calgary",
                    "Description": [
                      {
                        "displayStoreName": "Calgary Circle Mall"
                      }
                    ],
                    "storeName": "Calgary Circle Mall",
                    "Attribute": [
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Designer studio",
                        "name": "DesignerStudio",
                        "value": "true"
                      },
                      {
                        "displayValue": "Express Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Express Store"
                      },
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      }
                    ],
                    "longitude": "-114.05800",
                    "latitude": "51.05000",
                    "stateOrProvinceName": "Alberta",
                    "uniqueID": "10037",
                    "telephone1": "511.513.5789                    ",
                    "postalCode": "T2G 5R1                                 ",
                    "country": "Canada",
                    "addressLine": [
                      "300 MacLeod Tr"
                    ]
                  },
                  {
                    "city": "Calgary",
                    "Description": [
                      {
                        "displayStoreName": "Calgary Mall"
                      }
                    ],
                    "storeName": "Calgary Mall",
                    "Attribute": [
                      {
                        "displayValue": "true",
                        "displayName": "Beauty center",
                        "name": "BeautyCenter",
                        "value": "true"
                      },
                      {
                        "displayValue": "true",
                        "displayName": "Cappuccino bar",
                        "name": "CappuccinoBar",
                        "value": "true"
                      },
                      {
                        "displayValue": "Outlet Store",
                        "displayName": "Type",
                        "name": "Type",
                        "value": "Outlet Store"
                      },
                      {
                        "displayValue": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />",
                        "displayName": "Store hours",
                        "name": "StoreHours",
                        "value": "Mon-Fri: 10am - 9pm<br />Sat: 9am - 7pm<br />Sun: 11am - 6pm<br />"
                      }
                    ],
                    "longitude": "-114.08640",
                    "latitude": "51.03636",
                    "stateOrProvinceName": "Alberta",
                    "uniqueID": "10026",
                    "telephone1": "367.666.6666                    ",
                    "postalCode": "T2T 0K4                                 ",
                    "country": "Canada",
                    "addressLine": [
                      "1025 Cameron Ave SW"
                    ]
                  }
                ],
                "resourceName": "storelocator",
                "recordSetTotal": "2"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The geo node unique identifier.",
            "in": "path",
            "name": "geoId"
          },
          {
            "description": "Page number. Valid values are positive integers starting at 1. Use pageNumber with pageSize.",
            "format": "int32",
            "required": false,
            "in": "query",
            "type": "integer",
            "name": "pageNumber"
          },
          {
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values are integers starting with 1. Use pageSize with pageNumber.",
            "format": "int32",
            "required": false,
            "in": "query",
            "type": "integer",
            "name": "pageSize"
          },
          {
            "required": false,
            "type": "string",
            "description": "The physical store attribute name that describes whether the store is a beauty center.",
            "in": "query",
            "name": "BeautyCenter"
          },
          {
            "required": false,
            "type": "string",
            "description": "The physical store attribute name to describe the type of the store.",
            "in": "query",
            "name": "Type"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          },
          {
            "enum": [
              "true",
              "false"
            ],
            "name": "siteLevelStoreSearch",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "If it is 'true', a site level physical search is performed.  Otherwise, the physical store search is performed at the web store level. By default, it is 'true'."
          }
        ],
        "tags": [
          "Store Locator"
        ],
        "description": "Gets store location information by a geo node unique ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get by geo node unique ID",
        "operationId": "StoreLocator-findGeoNodeByGeoId"
      }
    },
    "/wcs/resources/store/{storeId}/geonode/byParentGeoNode/{parentgeoid}": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "GeoNode": {
                  "items": {
                    "properties": {
                      "userDataField": {
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "type": {
                        "type": "string"
                      },
                      "Description": {
                        "items": {
                          "properties": {
                            "shortDescription": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "uniqueID": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "recordSetComplete": {
                  "type": "string"
                },
                "recordSetStartNumber": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetCount": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetTotal": {
                  "type": "string",
                  "format": "int64"
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "recordSetStartNumber": "0",
                "recordSetComplete": "true",
                "recordSetCount": "7",
                "resourceId": "http://localhost:80/wcs/resources/store/10001/geonode/byParentGeoNode/10003?responseFormat=json",
                "GeoNode": [
                  {
                    "type": "CITY",
                    "Description": [
                      {
                        "shortDescription": "Calgary"
                      }
                    ],
                    "uniqueID": "10004",
                    "name": "Calgary"
                  },
                  {
                    "type": "CITY",
                    "Description": [
                      {
                        "shortDescription": "Edmonton"
                      }
                    ],
                    "uniqueID": "10005",
                    "name": "Edmonton"
                  },
                  {
                    "type": "CITY",
                    "Description": [
                      {
                        "shortDescription": "Lethbridge"
                      }
                    ],
                    "uniqueID": "10006",
                    "name": "Lethbridge"
                  },
                  {
                    "type": "CITY",
                    "Description": [
                      {
                        "shortDescription": "Medicine Hat"
                      }
                    ],
                    "uniqueID": "10007",
                    "name": "Medicine Hat"
                  },
                  {
                    "type": "CITY",
                    "Description": [
                      {
                        "shortDescription": "Red Deer"
                      }
                    ],
                    "uniqueID": "10008",
                    "name": "Red Deer"
                  },
                  {
                    "type": "CITY",
                    "Description": [
                      {
                        "shortDescription": "St. Albert"
                      }
                    ],
                    "uniqueID": "10009",
                    "name": "St. Albert"
                  },
                  {
                    "type": "CITY",
                    "Description": [
                      {
                        "shortDescription": "Strathcona County"
                      }
                    ],
                    "uniqueID": "10010",
                    "name": "Strathcona County"
                  }
                ],
                "resourceName": "geonode",
                "recordSetTotal": "7"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "required": true,
            "type": "string",
            "description": "The parent geo node identifier.",
            "in": "path",
            "name": "parentgeoid"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Geonode"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Gets by parent unique ID",
        "operationId": "Geonode-findGeoByParentGeoId",
        "description": "Gets the geo nodes by the parent geo node unique ID. The response schema will flatten the result if a single object is returned in the list."
      }
    },
    "/wcs/resources/store/{storeId}/geonode": {
      "get": {
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "description": "Empty model. Used as default value when no model is specified."
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "byGeoNodeTypeAndName"
            ],
            "name": "q",
            "required": true,
            "in": "query",
            "type": "string",
            "description": "The query name."
          }
        ],
        "tags": [
          "Geonode"
        ],
        "description": "Finds geo nodes based on query name. See each query for details on input and output.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Get by query",
        "operationId": "Geonode-findByQuery"
      }
    },
    "/wcs/resources/store/{storeId}/geonode/byTopGeoNode": {
      "get": {
        "responses": {
          "200": {
            "schema": {
              "properties": {
                "GeoNode": {
                  "items": {
                    "properties": {
                      "userDataField": {
                        "items": {
                          "required": [
                            "key"
                          ],
                          "properties": {
                            "value": {
                              "type": "string"
                            },
                            "key": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "type": {
                        "type": "string"
                      },
                      "Description": {
                        "items": {
                          "properties": {
                            "shortDescription": {
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "uniqueID": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "array"
                },
                "recordSetComplete": {
                  "type": "string"
                },
                "recordSetStartNumber": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetCount": {
                  "type": "string",
                  "format": "int64"
                },
                "recordSetTotal": {
                  "type": "string",
                  "format": "int64"
                }
              }
            },
            "description": "The requested completed successfully.",
            "examples": {
              "application/json": {
                "recordSetStartNumber": "0",
                "recordSetComplete": "true",
                "recordSetCount": "2",
                "resourceId": "http://localhost:80/wcs/resources/store/10001/geonode/byTopGeoNode?siteLevelSearch=false&responseFormat=json",
                "GeoNode": [
                  {
                    "type": "CNTY",
                    "Description": [
                      {
                        "shortDescription": "Canada"
                      }
                    ],
                    "uniqueID": "10001",
                    "name": "Canada"
                  },
                  {
                    "type": "CNTY",
                    "Description": [
                      {
                        "shortDescription": "United States"
                      }
                    ],
                    "uniqueID": "10002",
                    "name": "United States"
                  }
                ],
                "resourceName": "geonode",
                "recordSetTotal": "2"
              }
            }
          },
          "400": {
            "description": "Bad request. The request could not be understood by the server due to malformed syntax."
          },
          "401": {
            "description": "Not authenticated. The user session is not valid."
          },
          "403": {
            "description": "The user is not authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. For details, see the server log files."
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "The store identifier.",
            "name": "storeId",
            "in": "path"
          },
          {
            "enum": [
              "xml",
              "json"
            ],
            "name": "responseFormat",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json."
          }
        ],
        "tags": [
          "Geonode"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "summary": "Gets by site top-nodes",
        "operationId": "Geonode-findTopGeoNodes",
        "description": "Gets the top geo nodes for the site. The response schema will flatten the result if a single object is returned in the list."
      }
    }
  }
}
